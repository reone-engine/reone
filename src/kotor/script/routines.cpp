/*
 * Copyright (c) 2020-2021 The reone project contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "routines.h"

#include "../../common/collectionutil.h"
#include "../../game/services.h"
#include "../../script/variable.h"

#include "routine/context.h"
#include "routine/declarations.h"

using namespace std;

using namespace reone::game;
using namespace reone::script;

#define R_VOID script::VariableType::Void
#define R_INT script::VariableType::Int
#define R_FLOAT script::VariableType::Float
#define R_OBJECT script::VariableType::Object
#define R_STRING script::VariableType::String
#define R_EFFECT script::VariableType::Effect
#define R_EVENT script::VariableType::Event
#define R_LOCATION script::VariableType::Location
#define R_TALENT script::VariableType::Talent
#define R_VECTOR script::VariableType::Vector
#define R_ACTION script::VariableType::Action

namespace reone {

namespace kotor {

void Routines::initForKotOR() {
    add("Random", R_INT, {R_INT}, &routine::random);
    add("PrintString", R_VOID, {R_STRING}, &routine::printString);
    add("PrintFloat", R_VOID, {R_FLOAT, R_INT, R_INT}, &routine::printFloat);
    add("FloatToString", R_STRING, {R_FLOAT, R_INT, R_INT}, &routine::floatToString);
    add("PrintInteger", R_VOID, {R_INT}, &routine::printInteger);
    add("PrintObject", R_VOID, {R_OBJECT}, &routine::printObject);
    add("AssignCommand", R_VOID, {R_OBJECT, R_ACTION}, &routine::assignCommand);
    add("DelayCommand", R_VOID, {R_FLOAT, R_ACTION}, &routine::delayCommand);
    add("ExecuteScript", R_VOID, {R_STRING, R_OBJECT, R_INT}, &routine::executeScript);
    add("ClearAllActions", R_VOID, {}, &routine::clearAllActions);
    add("SetFacing", R_VOID, {R_FLOAT}, &routine::setFacing);
    add("SwitchPlayerCharacter", R_INT, {R_INT}, &routine::switchPlayerCharacter);
    add("SetTime", R_VOID, {R_INT, R_INT, R_INT, R_INT}, &routine::setTime);
    add("SetPartyLeader", R_INT, {R_INT}, &routine::setPartyLeader);
    add("SetAreaUnescapable", R_VOID, {R_INT}, &routine::setAreaUnescapable);
    add("GetAreaUnescapable", R_INT, {}, &routine::getAreaUnescapable);
    add("GetTimeHour", R_INT, {}, &routine::getTimeHour);
    add("GetTimeMinute", R_INT, {}, &routine::getTimeMinute);
    add("GetTimeSecond", R_INT, {}, &routine::getTimeSecond);
    add("GetTimeMillisecond", R_INT, {}, &routine::getTimeMillisecond);
    add("ActionRandomWalk", R_VOID, {}, &routine::actionRandomWalk);
    add("ActionMoveToLocation", R_VOID, {R_LOCATION, R_INT}, &routine::actionMoveToLocation);
    add("ActionMoveToObject", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::actionMoveToObject);
    add("ActionMoveAwayFromObject", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::actionMoveAwayFromObject);
    add("GetArea", R_OBJECT, {R_OBJECT}, &routine::getArea);
    add("GetEnteringObject", R_OBJECT, {}, &routine::getEnteringObject);
    add("GetExitingObject", R_OBJECT, {}, &routine::getExitingObject);
    add("GetPosition", R_VECTOR, {R_OBJECT}, &routine::getPosition);
    add("GetFacing", R_FLOAT, {R_OBJECT}, &routine::getFacing);
    add("GetItemPossessor", R_OBJECT, {R_OBJECT}, &routine::getItemPossessor);
    add("GetItemPossessedBy", R_OBJECT, {R_OBJECT, R_STRING}, &routine::getItemPossessedBy);
    add("CreateItemOnObject", R_OBJECT, {R_STRING, R_OBJECT, R_INT}, &routine::createItemOnObject);
    add("ActionEquipItem", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::actionEquipItem);
    add("ActionUnequipItem", R_VOID, {R_OBJECT, R_INT}, &routine::actionUnequipItem);
    add("ActionPickUpItem", R_VOID, {R_OBJECT}, &routine::actionPickUpItem);
    add("ActionPutDownItem", R_VOID, {R_OBJECT}, &routine::actionPutDownItem);
    add("GetLastAttacker", R_OBJECT, {R_OBJECT}, &routine::getLastAttacker);
    add("ActionAttack", R_VOID, {R_OBJECT, R_INT}, &routine::actionAttack);
    add("GetNearestCreature", R_OBJECT, {R_INT, R_INT, R_OBJECT, R_INT, R_INT, R_INT, R_INT, R_INT}, &routine::getNearestCreature);
    add("ActionSpeakString", R_VOID, {R_STRING, R_INT}, &routine::actionSpeakString);
    add("ActionPlayAnimation", R_VOID, {R_INT, R_FLOAT, R_FLOAT}, &routine::actionPlayAnimation);
    add("GetDistanceToObject", R_FLOAT, {R_OBJECT}, &routine::getDistanceToObject);
    add("GetIsObjectValid", R_INT, {R_OBJECT}, &routine::getIsObjectValid);
    add("ActionOpenDoor", R_VOID, {R_OBJECT}, &routine::actionOpenDoor);
    add("ActionCloseDoor", R_VOID, {R_OBJECT}, &routine::actionCloseDoor);
    add("SetCameraFacing", R_VOID, {R_FLOAT}, &routine::setCameraFacing);
    add("PlaySound", R_VOID, {R_STRING}, &routine::playSound);
    add("GetSpellTargetObject", R_OBJECT, {}, &routine::getSpellTargetObject);
    add("ActionCastSpellAtObject", R_VOID, {R_INT, R_OBJECT, R_INT, R_INT, R_INT, R_INT, R_INT}, &routine::actionCastSpellAtObject);
    add("GetCurrentHitPoints", R_INT, {R_OBJECT}, &routine::getCurrentHitPoints);
    add("GetMaxHitPoints", R_INT, {R_OBJECT}, &routine::getMaxHitPoints);
    add("EffectAssuredHit", R_EFFECT, {}, &routine::effectAssuredHit);
    add("GetLastItemEquipped", R_OBJECT, {}, &routine::getLastItemEquipped);
    add("GetSubScreenID", R_INT, {}, &routine::getSubScreenID);
    add("CancelCombat", R_VOID, {R_OBJECT}, &routine::cancelCombat);
    add("GetCurrentForcePoints", R_INT, {R_OBJECT}, &routine::getCurrentForcePoints);
    add("GetMaxForcePoints", R_INT, {R_OBJECT}, &routine::getMaxForcePoints);
    add("PauseGame", R_VOID, {R_INT}, &routine::pauseGame);
    add("SetPlayerRestrictMode", R_VOID, {R_INT}, &routine::setPlayerRestrictMode);
    add("GetStringLength", R_INT, {R_STRING}, &routine::getStringLength);
    add("GetStringUpperCase", R_STRING, {R_STRING}, &routine::getStringUpperCase);
    add("GetStringLowerCase", R_STRING, {R_STRING}, &routine::getStringLowerCase);
    add("GetStringRight", R_STRING, {R_STRING, R_INT}, &routine::getStringRight);
    add("GetStringLeft", R_STRING, {R_STRING, R_INT}, &routine::getStringLeft);
    add("InsertString", R_STRING, {R_STRING, R_STRING, R_INT}, &routine::insertString);
    add("GetSubString", R_STRING, {R_STRING, R_INT, R_INT}, &routine::getSubString);
    add("FindSubString", R_INT, {R_STRING, R_STRING}, &routine::findSubString);
    add("fabs", R_FLOAT, {R_FLOAT}, &routine::fabs);
    add("cos", R_FLOAT, {R_FLOAT}, &routine::cos);
    add("sin", R_FLOAT, {R_FLOAT}, &routine::sin);
    add("tan", R_FLOAT, {R_FLOAT}, &routine::tan);
    add("acos", R_FLOAT, {R_FLOAT}, &routine::acos);
    add("asin", R_FLOAT, {R_FLOAT}, &routine::asin);
    add("atan", R_FLOAT, {R_FLOAT}, &routine::atan);
    add("log", R_FLOAT, {R_FLOAT}, &routine::log);
    add("pow", R_FLOAT, {R_FLOAT, R_FLOAT}, &routine::pow);
    add("sqrt", R_FLOAT, {R_FLOAT}, &routine::sqrt);
    add("abs", R_INT, {R_INT}, &routine::abs);
    add("EffectHeal", R_EFFECT, {R_INT}, &routine::effectHeal);
    add("EffectDamage", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamage);
    add("EffectAbilityIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAbilityIncrease);
    add("EffectDamageResistance", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamageResistance);
    add("EffectResurrection", R_EFFECT, {}, &routine::effectResurrection);
    add("GetPlayerRestrictMode", R_INT, {R_OBJECT}, &routine::getPlayerRestrictMode);
    add("GetCasterLevel", R_INT, {R_OBJECT}, &routine::getCasterLevel);
    add("GetFirstEffect", R_EFFECT, {R_OBJECT}, &routine::getFirstEffect);
    add("GetNextEffect", R_EFFECT, {R_OBJECT}, &routine::getNextEffect);
    add("RemoveEffect", R_VOID, {R_OBJECT, R_EFFECT}, &routine::removeEffect);
    add("GetIsEffectValid", R_INT, {R_EFFECT}, &routine::getIsEffectValid);
    add("GetEffectDurationType", R_INT, {R_EFFECT}, &routine::getEffectDurationType);
    add("GetEffectSubType", R_INT, {R_EFFECT}, &routine::getEffectSubType);
    add("GetEffectCreator", R_OBJECT, {R_EFFECT}, &routine::getEffectCreator);
    add("IntToString", R_STRING, {R_INT}, &routine::intToString);
    add("GetFirstObjectInArea", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFirstObjectInArea);
    add("GetNextObjectInArea", R_OBJECT, {R_OBJECT, R_INT}, &routine::getNextObjectInArea);
    add("d2", R_INT, {R_INT}, &routine::d2);
    add("d3", R_INT, {R_INT}, &routine::d3);
    add("d4", R_INT, {R_INT}, &routine::d4);
    add("d6", R_INT, {R_INT}, &routine::d6);
    add("d8", R_INT, {R_INT}, &routine::d8);
    add("d10", R_INT, {R_INT}, &routine::d10);
    add("d12", R_INT, {R_INT}, &routine::d12);
    add("d20", R_INT, {R_INT}, &routine::d20);
    add("d100", R_INT, {R_INT}, &routine::d100);
    add("VectorMagnitude", R_FLOAT, {R_VECTOR}, &routine::vectorMagnitude);
    add("GetMetaMagicFeat", R_INT, {}, &routine::getMetaMagicFeat);
    add("GetObjectType", R_INT, {R_OBJECT}, &routine::getObjectType);
    add("GetRacialType", R_INT, {R_OBJECT}, &routine::getRacialType);
    add("FortitudeSave", R_INT, {R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::fortitudeSave);
    add("ReflexSave", R_INT, {R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::reflexSave);
    add("WillSave", R_INT, {R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::willSave);
    add("GetSpellSaveDC", R_INT, {}, &routine::getSpellSaveDC);
    add("MagicalEffect", R_EFFECT, {R_EFFECT}, &routine::magicalEffect);
    add("SupernaturalEffect", R_EFFECT, {R_EFFECT}, &routine::supernaturalEffect);
    add("ExtraordinaryEffect", R_EFFECT, {R_EFFECT}, &routine::extraordinaryEffect);
    add("EffectACIncrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectACIncrease);
    add("GetAC", R_INT, {R_OBJECT, R_INT}, &routine::getAC);
    add("EffectSavingThrowIncrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectSavingThrowIncrease);
    add("EffectAttackIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAttackIncrease);
    add("EffectDamageReduction", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamageReduction);
    add("EffectDamageIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageIncrease);
    add("RoundsToSeconds", R_FLOAT, {R_INT}, &routine::roundsToSeconds);
    add("HoursToSeconds", R_FLOAT, {R_INT}, &routine::hoursToSeconds);
    add("TurnsToSeconds", R_FLOAT, {R_INT}, &routine::turnsToSeconds);
    add("SoundObjectSetFixedVariance", R_VOID, {R_OBJECT, R_FLOAT}, &routine::soundObjectSetFixedVariance);
    add("GetGoodEvilValue", R_INT, {R_OBJECT}, &routine::getGoodEvilValue);
    add("GetPartyMemberCount", R_INT, {}, &routine::getPartyMemberCount);
    add("GetAlignmentGoodEvil", R_INT, {R_OBJECT}, &routine::getAlignmentGoodEvil);
    add("GetFirstObjectInShape", R_OBJECT, {R_INT, R_FLOAT, R_LOCATION, R_INT, R_INT, R_VECTOR}, &routine::getFirstObjectInShape);
    add("GetNextObjectInShape", R_OBJECT, {R_INT, R_FLOAT, R_LOCATION, R_INT, R_INT, R_VECTOR}, &routine::getNextObjectInShape);
    add("EffectEntangle", R_EFFECT, {}, &routine::effectEntangle);
    add("SignalEvent", R_VOID, {R_OBJECT, R_EVENT}, &routine::signalEvent);
    add("EventUserDefined", R_EVENT, {R_INT}, &routine::eventUserDefined);
    add("EffectDeath", R_EFFECT, {R_INT, R_INT}, &routine::effectDeath);
    add("EffectKnockdown", R_EFFECT, {}, &routine::effectKnockdown);
    add("ActionGiveItem", R_VOID, {R_OBJECT, R_OBJECT}, &routine::actionGiveItem);
    add("ActionTakeItem", R_VOID, {R_OBJECT, R_OBJECT}, &routine::actionTakeItem);
    add("VectorNormalize", R_VECTOR, {R_VECTOR}, &routine::vectorNormalize);
    add("GetItemStackSize", R_INT, {R_OBJECT}, &routine::getItemStackSize);
    add("GetAbilityScore", R_INT, {R_OBJECT, R_INT}, &routine::getAbilityScore);
    add("GetIsDead", R_INT, {R_OBJECT}, &routine::getIsDead);
    add("PrintVector", R_VOID, {R_VECTOR, R_INT}, &routine::printVector);
    add("Vector", R_VECTOR, {R_FLOAT, R_FLOAT, R_FLOAT}, &routine::vectorCreate);
    add("SetFacingPoint", R_VOID, {R_VECTOR}, &routine::setFacingPoint);
    add("AngleToVector", R_VECTOR, {R_FLOAT}, &routine::angleToVector);
    add("VectorToAngle", R_FLOAT, {R_VECTOR}, &routine::vectorToAngle);
    add("TouchAttackMelee", R_INT, {R_OBJECT, R_INT}, &routine::touchAttackMelee);
    add("TouchAttackRanged", R_INT, {R_OBJECT, R_INT}, &routine::touchAttackRanged);
    add("EffectParalyze", R_EFFECT, {}, &routine::effectParalyze);
    add("EffectSpellImmunity", R_EFFECT, {R_INT}, &routine::effectSpellImmunity);
    add("SetItemStackSize", R_VOID, {R_OBJECT, R_INT}, &routine::setItemStackSize);
    add("GetDistanceBetween", R_FLOAT, {R_OBJECT, R_OBJECT}, &routine::getDistanceBetween);
    add("SetReturnStrref", R_VOID, {R_INT, R_INT, R_INT}, &routine::setReturnStrref);
    add("EffectForceJump", R_EFFECT, {R_OBJECT, R_INT}, &routine::effectForceJump);
    add("EffectSleep", R_EFFECT, {}, &routine::effectSleep);
    add("GetItemInSlot", R_OBJECT, {R_INT, R_OBJECT}, &routine::getItemInSlot);
    add("EffectTemporaryForcePoints", R_EFFECT, {R_INT}, &routine::effectTemporaryForcePoints);
    add("EffectConfused", R_EFFECT, {}, &routine::effectConfused);
    add("EffectFrightened", R_EFFECT, {}, &routine::effectFrightened);
    add("EffectChoke", R_EFFECT, {}, &routine::effectChoke);
    add("SetGlobalString", R_VOID, {R_STRING, R_STRING}, &routine::setGlobalString);
    add("EffectStunned", R_EFFECT, {}, &routine::effectStunned);
    add("SetCommandable", R_VOID, {R_INT, R_OBJECT}, &routine::setCommandable);
    add("GetCommandable", R_INT, {R_OBJECT}, &routine::getCommandable);
    add("EffectRegenerate", R_EFFECT, {R_INT, R_FLOAT}, &routine::effectRegenerate);
    add("EffectMovementSpeedIncrease", R_EFFECT, {R_INT}, &routine::effectMovementSpeedIncrease);
    add("GetHitDice", R_INT, {R_OBJECT}, &routine::getHitDice);
    add("ActionForceFollowObject", R_VOID, {R_OBJECT, R_FLOAT}, &routine::actionForceFollowObject);
    add("GetTag", R_STRING, {R_OBJECT}, &routine::getTag);
    add("ResistForce", R_INT, {R_OBJECT, R_OBJECT}, &routine::resistForce);
    add("GetEffectType", R_INT, {R_EFFECT}, &routine::getEffectType);
    add("EffectAreaOfEffect", R_EFFECT, {R_INT, R_STRING, R_STRING, R_STRING}, &routine::effectAreaOfEffect);
    add("GetFactionEqual", R_INT, {R_OBJECT, R_OBJECT}, &routine::getFactionEqual);
    add("ChangeFaction", R_VOID, {R_OBJECT, R_OBJECT}, &routine::changeFaction);
    add("GetIsListening", R_INT, {R_OBJECT}, &routine::getIsListening);
    add("SetListening", R_VOID, {R_OBJECT, R_INT}, &routine::setListening);
    add("SetListenPattern", R_VOID, {R_OBJECT, R_STRING, R_INT}, &routine::setListenPattern);
    add("TestStringAgainstPattern", R_INT, {R_STRING, R_STRING}, &routine::testStringAgainstPattern);
    add("GetMatchedSubstring", R_STRING, {R_INT}, &routine::getMatchedSubstring);
    add("GetMatchedSubstringsCount", R_INT, {}, &routine::getMatchedSubstringsCount);
    add("EffectVisualEffect", R_EFFECT, {R_INT, R_INT}, &routine::effectVisualEffect);
    add("GetFactionWeakestMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionWeakestMember);
    add("GetFactionStrongestMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionStrongestMember);
    add("GetFactionMostDamagedMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionMostDamagedMember);
    add("GetFactionLeastDamagedMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionLeastDamagedMember);
    add("GetFactionGold", R_INT, {R_OBJECT}, &routine::getFactionGold);
    add("GetFactionAverageReputation", R_INT, {R_OBJECT, R_OBJECT}, &routine::getFactionAverageReputation);
    add("GetFactionAverageGoodEvilAlignment", R_INT, {R_OBJECT}, &routine::getFactionAverageGoodEvilAlignment);
    add("SoundObjectGetFixedVariance", R_FLOAT, {R_OBJECT}, &routine::soundObjectGetFixedVariance);
    add("GetFactionAverageLevel", R_INT, {R_OBJECT}, &routine::getFactionAverageLevel);
    add("GetFactionAverageXP", R_INT, {R_OBJECT}, &routine::getFactionAverageXP);
    add("GetFactionMostFrequentClass", R_INT, {R_OBJECT}, &routine::getFactionMostFrequentClass);
    add("GetFactionWorstAC", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionWorstAC);
    add("GetFactionBestAC", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionBestAC);
    add("GetGlobalString", R_STRING, {R_STRING}, &routine::getGlobalString);
    add("GetListenPatternNumber", R_INT, {}, &routine::getListenPatternNumber);
    add("ActionJumpToObject", R_VOID, {R_OBJECT, R_INT}, &routine::actionJumpToObject);
    add("GetWaypointByTag", R_OBJECT, {R_STRING}, &routine::getWaypointByTag);
    add("GetTransitionTarget", R_OBJECT, {R_OBJECT}, &routine::getTransitionTarget);
    add("EffectLinkEffects", R_EFFECT, {R_EFFECT, R_EFFECT}, &routine::effectLinkEffects);
    add("GetObjectByTag", R_OBJECT, {R_STRING, R_INT}, &routine::getObjectByTag);
    add("AdjustAlignment", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::adjustAlignment);
    add("ActionWait", R_VOID, {R_FLOAT}, &routine::actionWait);
    add("SetAreaTransitionBMP", R_VOID, {R_INT, R_STRING}, &routine::setAreaTransitionBMP);
    add("ActionStartConversation", R_VOID, {R_OBJECT, R_STRING, R_INT, R_INT, R_INT, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_INT}, &routine::actionStartConversation);
    add("ActionPauseConversation", R_VOID, {}, &routine::actionPauseConversation);
    add("ActionResumeConversation", R_VOID, {}, &routine::actionResumeConversation);
    add("EffectBeam", R_EFFECT, {R_INT, R_OBJECT, R_INT, R_INT}, &routine::effectBeam);
    add("GetReputation", R_INT, {R_OBJECT, R_OBJECT}, &routine::getReputation);
    add("AdjustReputation", R_VOID, {R_OBJECT, R_OBJECT, R_INT}, &routine::adjustReputation);
    add("GetModuleFileName", R_STRING, {}, &routine::getModuleFileName);
    add("GetGoingToBeAttackedBy", R_OBJECT, {R_OBJECT}, &routine::getGoingToBeAttackedBy);
    add("EffectForceResistanceIncrease", R_EFFECT, {R_INT}, &routine::effectForceResistanceIncrease);
    add("GetLocation", R_LOCATION, {R_OBJECT}, &routine::getLocation);
    add("ActionJumpToLocation", R_VOID, {R_LOCATION}, &routine::actionJumpToLocation);
    add("Location", R_LOCATION, {R_VECTOR, R_FLOAT}, &routine::location);
    add("ApplyEffectAtLocation", R_VOID, {R_INT, R_EFFECT, R_LOCATION, R_FLOAT}, &routine::applyEffectAtLocation);
    add("GetIsPC", R_INT, {R_OBJECT}, &routine::getIsPC);
    add("FeetToMeters", R_FLOAT, {R_FLOAT}, &routine::feetToMeters);
    add("YardsToMeters", R_FLOAT, {R_FLOAT}, &routine::yardsToMeters);
    add("ApplyEffectToObject", R_VOID, {R_INT, R_EFFECT, R_OBJECT, R_FLOAT}, &routine::applyEffectToObject);
    add("SpeakString", R_VOID, {R_STRING, R_INT}, &routine::speakString);
    add("GetSpellTargetLocation", R_LOCATION, {}, &routine::getSpellTargetLocation);
    add("GetPositionFromLocation", R_VECTOR, {R_LOCATION}, &routine::getPositionFromLocation);
    add("EffectBodyFuel", R_EFFECT, {}, &routine::effectBodyFuel);
    add("GetFacingFromLocation", R_FLOAT, {R_LOCATION}, &routine::getFacingFromLocation);
    add("GetNearestCreatureToLocation", R_OBJECT, {R_INT, R_INT, R_LOCATION, R_INT, R_INT, R_INT, R_INT, R_INT}, &routine::getNearestCreatureToLocation);
    add("GetNearestObject", R_OBJECT, {R_INT, R_OBJECT, R_INT}, &routine::getNearestObject);
    add("GetNearestObjectToLocation", R_OBJECT, {R_INT, R_LOCATION, R_INT}, &routine::getNearestObjectToLocation);
    add("GetNearestObjectByTag", R_OBJECT, {R_STRING, R_OBJECT, R_INT}, &routine::getNearestObjectByTag);
    add("IntToFloat", R_FLOAT, {R_INT}, &routine::intToFloat);
    add("FloatToInt", R_INT, {R_FLOAT}, &routine::floatToInt);
    add("StringToInt", R_INT, {R_STRING}, &routine::stringToInt);
    add("StringToFloat", R_FLOAT, {R_STRING}, &routine::stringToFloat);
    add("ActionCastSpellAtLocation", R_VOID, {R_INT, R_LOCATION, R_INT, R_INT, R_INT, R_INT}, &routine::actionCastSpellAtLocation);
    add("GetIsEnemy", R_INT, {R_OBJECT, R_OBJECT}, &routine::getIsEnemy);
    add("GetIsFriend", R_INT, {R_OBJECT, R_OBJECT}, &routine::getIsFriend);
    add("GetIsNeutral", R_INT, {R_OBJECT, R_OBJECT}, &routine::getIsNeutral);
    add("GetPCSpeaker", R_OBJECT, {}, &routine::getPCSpeaker);
    add("GetStringByStrRef", R_STRING, {R_INT}, &routine::getStringByStrRef);
    add("ActionSpeakStringByStrRef", R_VOID, {R_INT, R_INT}, &routine::actionSpeakStringByStrRef);
    add("DestroyObject", R_VOID, {R_OBJECT, R_FLOAT, R_INT, R_FLOAT}, &routine::destroyObject);
    add("GetModule", R_OBJECT, {}, &routine::getModule);
    add("CreateObject", R_OBJECT, {R_INT, R_STRING, R_LOCATION, R_INT}, &routine::createObject);
    add("EventSpellCastAt", R_EVENT, {R_OBJECT, R_INT, R_INT}, &routine::eventSpellCastAt);
    add("GetLastSpellCaster", R_OBJECT, {}, &routine::getLastSpellCaster);
    add("GetLastSpell", R_INT, {}, &routine::getLastSpell);
    add("GetUserDefinedEventNumber", R_INT, {}, &routine::getUserDefinedEventNumber);
    add("GetSpellId", R_INT, {}, &routine::getSpellId);
    add("RandomName", R_STRING, {}, &routine::randomName);
    add("EffectPoison", R_EFFECT, {R_INT}, &routine::effectPoison);
    add("GetLoadFromSaveGame", R_INT, {}, &routine::getLoadFromSaveGame);
    add("EffectAssuredDeflection", R_EFFECT, {R_INT}, &routine::effectAssuredDeflection);
    add("GetName", R_STRING, {R_OBJECT}, &routine::getName);
    add("GetLastSpeaker", R_OBJECT, {}, &routine::getLastSpeaker);
    add("BeginConversation", R_INT, {R_STRING, R_OBJECT}, &routine::beginConversation);
    add("GetLastPerceived", R_OBJECT, {}, &routine::getLastPerceived);
    add("GetLastPerceptionHeard", R_INT, {}, &routine::getLastPerceptionHeard);
    add("GetLastPerceptionInaudible", R_INT, {}, &routine::getLastPerceptionInaudible);
    add("GetLastPerceptionSeen", R_INT, {}, &routine::getLastPerceptionSeen);
    add("GetLastClosedBy", R_OBJECT, {}, &routine::getLastClosedBy);
    add("GetLastPerceptionVanished", R_INT, {}, &routine::getLastPerceptionVanished);
    add("GetFirstInPersistentObject", R_OBJECT, {R_OBJECT, R_INT, R_INT}, &routine::getFirstInPersistentObject);
    add("GetNextInPersistentObject", R_OBJECT, {R_OBJECT, R_INT, R_INT}, &routine::getNextInPersistentObject);
    add("GetAreaOfEffectCreator", R_OBJECT, {R_OBJECT}, &routine::getAreaOfEffectCreator);
    add("ShowLevelUpGUI", R_INT, {}, &routine::showLevelUpGUI);
    add("SetItemNonEquippable", R_VOID, {R_OBJECT, R_INT}, &routine::setItemNonEquippable);
    add("GetButtonMashCheck", R_INT, {}, &routine::getButtonMashCheck);
    add("SetButtonMashCheck", R_VOID, {R_INT}, &routine::setButtonMashCheck);
    add("EffectForcePushTargeted", R_EFFECT, {R_LOCATION, R_INT}, &routine::effectForcePushTargeted);
    add("EffectHaste", R_EFFECT, {}, &routine::effectHaste);
    add("GiveItem", R_VOID, {R_OBJECT, R_OBJECT}, &routine::giveItem);
    add("ObjectToString", R_STRING, {R_OBJECT}, &routine::objectToString);
    add("EffectImmunity", R_EFFECT, {R_INT}, &routine::effectImmunity);
    add("GetIsImmune", R_INT, {R_OBJECT, R_INT, R_OBJECT}, &routine::getIsImmune);
    add("EffectDamageImmunityIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageImmunityIncrease);
    add("GetEncounterActive", R_INT, {R_OBJECT}, &routine::getEncounterActive);
    add("SetEncounterActive", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterActive);
    add("GetEncounterSpawnsMax", R_INT, {R_OBJECT}, &routine::getEncounterSpawnsMax);
    add("SetEncounterSpawnsMax", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterSpawnsMax);
    add("GetEncounterSpawnsCurrent", R_INT, {R_OBJECT}, &routine::getEncounterSpawnsCurrent);
    add("SetEncounterSpawnsCurrent", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterSpawnsCurrent);
    add("GetModuleItemAcquired", R_OBJECT, {}, &routine::getModuleItemAcquired);
    add("GetModuleItemAcquiredFrom", R_OBJECT, {}, &routine::getModuleItemAcquiredFrom);
    add("SetCustomToken", R_VOID, {R_INT, R_STRING}, &routine::setCustomToken);
    add("GetHasFeat", R_INT, {R_INT, R_OBJECT}, &routine::getHasFeat);
    add("GetHasSkill", R_INT, {R_INT, R_OBJECT}, &routine::getHasSkill);
    add("ActionUseFeat", R_VOID, {R_INT, R_OBJECT}, &routine::actionUseFeat);
    add("ActionUseSkill", R_VOID, {R_INT, R_OBJECT, R_INT, R_OBJECT}, &routine::actionUseSkill);
    add("GetObjectSeen", R_INT, {R_OBJECT, R_OBJECT}, &routine::getObjectSeen);
    add("GetObjectHeard", R_INT, {R_OBJECT, R_OBJECT}, &routine::getObjectHeard);
    add("GetLastPlayerDied", R_OBJECT, {}, &routine::getLastPlayerDied);
    add("GetModuleItemLost", R_OBJECT, {}, &routine::getModuleItemLost);
    add("GetModuleItemLostBy", R_OBJECT, {}, &routine::getModuleItemLostBy);
    add("ActionDoCommand", R_VOID, {R_ACTION}, &routine::actionDoCommand);
    add("EventConversation", R_EVENT, {}, &routine::eventConversation);
    add("SetEncounterDifficulty", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterDifficulty);
    add("GetEncounterDifficulty", R_INT, {R_OBJECT}, &routine::getEncounterDifficulty);
    add("GetDistanceBetweenLocations", R_FLOAT, {R_LOCATION, R_LOCATION}, &routine::getDistanceBetweenLocations);
    add("GetReflexAdjustedDamage", R_INT, {R_INT, R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::getReflexAdjustedDamage);
    add("PlayAnimation", R_VOID, {R_INT, R_FLOAT, R_FLOAT}, &routine::playAnimation);
    add("TalentSpell", R_TALENT, {R_INT}, &routine::talentSpell);
    add("TalentFeat", R_TALENT, {R_INT}, &routine::talentFeat);
    add("TalentSkill", R_TALENT, {R_INT}, &routine::talentSkill);
    add("GetHasSpellEffect", R_INT, {R_INT, R_OBJECT}, &routine::getHasSpellEffect);
    add("GetEffectSpellId", R_INT, {R_EFFECT}, &routine::getEffectSpellId);
    add("GetCreatureHasTalent", R_INT, {R_TALENT, R_OBJECT}, &routine::getCreatureHasTalent);
    add("GetCreatureTalentRandom", R_TALENT, {R_INT, R_OBJECT, R_INT}, &routine::getCreatureTalentRandom);
    add("GetCreatureTalentBest", R_TALENT, {R_INT, R_INT, R_OBJECT, R_INT, R_INT, R_INT}, &routine::getCreatureTalentBest);
    add("ActionUseTalentOnObject", R_VOID, {R_TALENT, R_OBJECT}, &routine::actionUseTalentOnObject);
    add("ActionUseTalentAtLocation", R_VOID, {R_TALENT, R_LOCATION}, &routine::actionUseTalentAtLocation);
    add("GetGoldPieceValue", R_INT, {R_OBJECT}, &routine::getGoldPieceValue);
    add("GetIsPlayableRacialType", R_INT, {R_OBJECT}, &routine::getIsPlayableRacialType);
    add("JumpToLocation", R_VOID, {R_LOCATION}, &routine::jumpToLocation);
    add("EffectTemporaryHitpoints", R_EFFECT, {R_INT}, &routine::effectTemporaryHitpoints);
    add("GetSkillRank", R_INT, {R_INT, R_OBJECT}, &routine::getSkillRank);
    add("GetAttackTarget", R_OBJECT, {R_OBJECT}, &routine::getAttackTarget);
    add("GetLastAttackType", R_INT, {R_OBJECT}, &routine::getLastAttackType);
    add("GetLastAttackMode", R_INT, {R_OBJECT}, &routine::getLastAttackMode);
    add("GetDistanceBetween2D", R_FLOAT, {R_OBJECT, R_OBJECT}, &routine::getDistanceBetween2D);
    add("GetIsInCombat", R_INT, {R_OBJECT}, &routine::getIsInCombat);
    add("GetLastAssociateCommand", R_INT, {R_OBJECT}, &routine::getLastAssociateCommand);
    add("GiveGoldToCreature", R_VOID, {R_OBJECT, R_INT}, &routine::giveGoldToCreature);
    add("SetIsDestroyable", R_VOID, {R_INT, R_INT, R_INT}, &routine::setIsDestroyable);
    add("SetLocked", R_VOID, {R_OBJECT, R_INT}, &routine::setLocked);
    add("GetLocked", R_INT, {R_OBJECT}, &routine::getLocked);
    add("GetClickingObject", R_OBJECT, {}, &routine::getClickingObject);
    add("SetAssociateListenPatterns", R_VOID, {R_OBJECT}, &routine::setAssociateListenPatterns);
    add("GetLastWeaponUsed", R_OBJECT, {R_OBJECT}, &routine::getLastWeaponUsed);
    add("ActionInteractObject", R_VOID, {R_OBJECT}, &routine::actionInteractObject);
    add("GetLastUsedBy", R_OBJECT, {}, &routine::getLastUsedBy);
    add("GetAbilityModifier", R_INT, {R_INT, R_OBJECT}, &routine::getAbilityModifier);
    add("GetIdentified", R_INT, {R_OBJECT}, &routine::getIdentified);
    add("SetIdentified", R_VOID, {R_OBJECT, R_INT}, &routine::setIdentified);
    add("GetDistanceBetweenLocations2D", R_FLOAT, {R_LOCATION, R_LOCATION}, &routine::getDistanceBetweenLocations2D);
    add("GetDistanceToObject2D", R_FLOAT, {R_OBJECT}, &routine::getDistanceToObject2D);
    add("GetBlockingDoor", R_OBJECT, {}, &routine::getBlockingDoor);
    add("GetIsDoorActionPossible", R_INT, {R_OBJECT, R_INT}, &routine::getIsDoorActionPossible);
    add("DoDoorAction", R_VOID, {R_OBJECT, R_INT}, &routine::doDoorAction);
    add("GetFirstItemInInventory", R_OBJECT, {R_OBJECT}, &routine::getFirstItemInInventory);
    add("GetNextItemInInventory", R_OBJECT, {R_OBJECT}, &routine::getNextItemInInventory);
    add("GetClassByPosition", R_INT, {R_INT, R_OBJECT}, &routine::getClassByPosition);
    add("GetLevelByPosition", R_INT, {R_INT, R_OBJECT}, &routine::getLevelByPosition);
    add("GetLevelByClass", R_INT, {R_INT, R_OBJECT}, &routine::getLevelByClass);
    add("GetDamageDealtByType", R_INT, {R_INT}, &routine::getDamageDealtByType);
    add("GetTotalDamageDealt", R_INT, {}, &routine::getTotalDamageDealt);
    add("GetLastDamager", R_OBJECT, {}, &routine::getLastDamager);
    add("GetLastDisarmed", R_OBJECT, {}, &routine::getLastDisarmed);
    add("GetLastDisturbed", R_OBJECT, {}, &routine::getLastDisturbed);
    add("GetLastLocked", R_OBJECT, {}, &routine::getLastLocked);
    add("GetLastUnlocked", R_OBJECT, {}, &routine::getLastUnlocked);
    add("EffectSkillIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectSkillIncrease);
    add("GetInventoryDisturbType", R_INT, {}, &routine::getInventoryDisturbType);
    add("GetInventoryDisturbItem", R_OBJECT, {}, &routine::getInventoryDisturbItem);
    add("ShowUpgradeScreen", R_VOID, {R_OBJECT}, &routine::showUpgradeScreen);
    add("VersusAlignmentEffect", R_EFFECT, {R_EFFECT, R_INT, R_INT}, &routine::versusAlignmentEffect);
    add("VersusRacialTypeEffect", R_EFFECT, {R_EFFECT, R_INT}, &routine::versusRacialTypeEffect);
    add("VersusTrapEffect", R_EFFECT, {R_EFFECT}, &routine::versusTrapEffect);
    add("GetGender", R_INT, {R_OBJECT}, &routine::getGender);
    add("GetIsTalentValid", R_INT, {R_TALENT}, &routine::getIsTalentValid);
    add("ActionMoveAwayFromLocation", R_VOID, {R_LOCATION, R_INT, R_FLOAT}, &routine::actionMoveAwayFromLocation);
    add("GetAttemptedAttackTarget", R_OBJECT, {}, &routine::getAttemptedAttackTarget);
    add("GetTypeFromTalent", R_INT, {R_TALENT}, &routine::getTypeFromTalent);
    add("GetIdFromTalent", R_INT, {R_TALENT}, &routine::getIdFromTalent);
    add("PlayPazaak", R_VOID, {R_INT, R_STRING, R_INT, R_INT, R_OBJECT}, &routine::playPazaak);
    add("GetLastPazaakResult", R_INT, {}, &routine::getLastPazaakResult);
    add("DisplayFeedBackText", R_VOID, {R_OBJECT, R_INT}, &routine::displayFeedBackText);
    add("AddJournalQuestEntry", R_VOID, {R_STRING, R_INT, R_INT}, &routine::addJournalQuestEntry);
    add("RemoveJournalQuestEntry", R_VOID, {R_STRING}, &routine::removeJournalQuestEntry);
    add("GetJournalEntry", R_INT, {R_STRING}, &routine::getJournalEntry);
    add("PlayRumblePattern", R_INT, {R_INT}, &routine::playRumblePattern);
    add("StopRumblePattern", R_INT, {R_INT}, &routine::stopRumblePattern);
    add("EffectDamageForcePoints", R_EFFECT, {R_INT}, &routine::effectDamageForcePoints);
    add("EffectHealForcePoints", R_EFFECT, {R_INT}, &routine::effectHealForcePoints);
    add("SendMessageToPC", R_VOID, {R_OBJECT, R_STRING}, &routine::sendMessageToPC);
    add("GetAttemptedSpellTarget", R_OBJECT, {}, &routine::getAttemptedSpellTarget);
    add("GetLastOpenedBy", R_OBJECT, {}, &routine::getLastOpenedBy);
    add("GetHasSpell", R_INT, {R_INT, R_OBJECT}, &routine::getHasSpell);
    add("OpenStore", R_VOID, {R_OBJECT, R_OBJECT, R_INT, R_INT}, &routine::openStore);
    add("ActionSurrenderToEnemies", R_VOID, {}, &routine::actionSurrenderToEnemies);
    add("GetFirstFactionMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFirstFactionMember);
    add("GetNextFactionMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getNextFactionMember);
    add("ActionForceMoveToLocation", R_VOID, {R_LOCATION, R_INT, R_FLOAT}, &routine::actionForceMoveToLocation);
    add("ActionForceMoveToObject", R_VOID, {R_OBJECT, R_INT, R_FLOAT, R_FLOAT}, &routine::actionForceMoveToObject);
    add("GetJournalQuestExperience", R_INT, {R_STRING}, &routine::getJournalQuestExperience);
    add("JumpToObject", R_VOID, {R_OBJECT, R_INT}, &routine::jumpToObject);
    add("SetMapPinEnabled", R_VOID, {R_OBJECT, R_INT}, &routine::setMapPinEnabled);
    add("EffectHitPointChangeWhenDying", R_EFFECT, {R_FLOAT}, &routine::effectHitPointChangeWhenDying);
    add("PopUpGUIPanel", R_VOID, {R_OBJECT, R_INT}, &routine::popUpGUIPanel);
    add("AddMultiClass", R_VOID, {R_INT, R_OBJECT}, &routine::addMultiClass);
    add("GetIsLinkImmune", R_INT, {R_OBJECT, R_EFFECT}, &routine::getIsLinkImmune);
    add("EffectDroidStun", R_EFFECT, {}, &routine::effectDroidStun);
    add("EffectForcePushed", R_EFFECT, {}, &routine::effectForcePushed);
    add("GiveXPToCreature", R_VOID, {R_OBJECT, R_INT}, &routine::giveXPToCreature);
    add("SetXP", R_VOID, {R_OBJECT, R_INT}, &routine::setXP);
    add("GetXP", R_INT, {R_OBJECT}, &routine::getXP);
    add("IntToHexString", R_STRING, {R_INT}, &routine::intToHexString);
    add("GetBaseItemType", R_INT, {R_OBJECT}, &routine::getBaseItemType);
    add("GetItemHasItemProperty", R_INT, {R_OBJECT, R_INT}, &routine::getItemHasItemProperty);
    add("ActionEquipMostDamagingMelee", R_VOID, {R_OBJECT, R_INT}, &routine::actionEquipMostDamagingMelee);
    add("ActionEquipMostDamagingRanged", R_VOID, {R_OBJECT}, &routine::actionEquipMostDamagingRanged);
    add("GetItemACValue", R_INT, {R_OBJECT}, &routine::getItemACValue);
    add("EffectForceResisted", R_EFFECT, {R_OBJECT}, &routine::effectForceResisted);
    add("ExploreAreaForPlayer", R_VOID, {R_OBJECT, R_OBJECT}, &routine::exploreAreaForPlayer);
    add("ActionEquipMostEffectiveArmor", R_VOID, {}, &routine::actionEquipMostEffectiveArmor);
    add("GetIsDay", R_INT, {}, &routine::getIsDay);
    add("GetIsNight", R_INT, {}, &routine::getIsNight);
    add("GetIsDawn", R_INT, {}, &routine::getIsDawn);
    add("GetIsDusk", R_INT, {}, &routine::getIsDusk);
    add("GetIsEncounterCreature", R_INT, {R_OBJECT}, &routine::getIsEncounterCreature);
    add("GetLastPlayerDying", R_OBJECT, {}, &routine::getLastPlayerDying);
    add("GetStartingLocation", R_LOCATION, {}, &routine::getStartingLocation);
    add("ChangeToStandardFaction", R_VOID, {R_OBJECT, R_INT}, &routine::changeToStandardFaction);
    add("SoundObjectPlay", R_VOID, {R_OBJECT}, &routine::soundObjectPlay);
    add("SoundObjectStop", R_VOID, {R_OBJECT}, &routine::soundObjectStop);
    add("SoundObjectSetVolume", R_VOID, {R_OBJECT, R_INT}, &routine::soundObjectSetVolume);
    add("SoundObjectSetPosition", R_VOID, {R_OBJECT, R_VECTOR}, &routine::soundObjectSetPosition);
    add("SpeakOneLinerConversation", R_VOID, {R_STRING, R_OBJECT}, &routine::speakOneLinerConversation);
    add("GetGold", R_INT, {R_OBJECT}, &routine::getGold);
    add("GetLastRespawnButtonPresser", R_OBJECT, {}, &routine::getLastRespawnButtonPresser);
    add("EffectForceFizzle", R_EFFECT, {}, &routine::effectForceFizzle);
    add("SetLightsaberPowered", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT}, &routine::setLightsaberPowered);
    add("GetIsWeaponEffective", R_INT, {R_OBJECT, R_INT}, &routine::getIsWeaponEffective);
    add("GetLastSpellHarmful", R_INT, {}, &routine::getLastSpellHarmful);
    add("EventActivateItem", R_EVENT, {R_OBJECT, R_LOCATION, R_OBJECT}, &routine::eventActivateItem);
    add("MusicBackgroundPlay", R_VOID, {R_OBJECT}, &routine::musicBackgroundPlay);
    add("MusicBackgroundStop", R_VOID, {R_OBJECT}, &routine::musicBackgroundStop);
    add("MusicBackgroundSetDelay", R_VOID, {R_OBJECT, R_INT}, &routine::musicBackgroundSetDelay);
    add("MusicBackgroundChangeDay", R_VOID, {R_OBJECT, R_INT}, &routine::musicBackgroundChangeDay);
    add("MusicBackgroundChangeNight", R_VOID, {R_OBJECT, R_INT}, &routine::musicBackgroundChangeNight);
    add("MusicBattlePlay", R_VOID, {R_OBJECT}, &routine::musicBattlePlay);
    add("MusicBattleStop", R_VOID, {R_OBJECT}, &routine::musicBattleStop);
    add("MusicBattleChange", R_VOID, {R_OBJECT, R_INT}, &routine::musicBattleChange);
    add("AmbientSoundPlay", R_VOID, {R_OBJECT}, &routine::ambientSoundPlay);
    add("AmbientSoundStop", R_VOID, {R_OBJECT}, &routine::ambientSoundStop);
    add("AmbientSoundChangeDay", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundChangeDay);
    add("AmbientSoundChangeNight", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundChangeNight);
    add("GetLastKiller", R_OBJECT, {}, &routine::getLastKiller);
    add("GetSpellCastItem", R_OBJECT, {}, &routine::getSpellCastItem);
    add("GetItemActivated", R_OBJECT, {}, &routine::getItemActivated);
    add("GetItemActivator", R_OBJECT, {}, &routine::getItemActivator);
    add("GetItemActivatedTargetLocation", R_LOCATION, {}, &routine::getItemActivatedTargetLocation);
    add("GetItemActivatedTarget", R_OBJECT, {}, &routine::getItemActivatedTarget);
    add("GetIsOpen", R_INT, {R_OBJECT}, &routine::getIsOpen);
    add("TakeGoldFromCreature", R_VOID, {R_INT, R_OBJECT, R_INT}, &routine::takeGoldFromCreature);
    add("GetIsInConversation", R_INT, {R_OBJECT}, &routine::getIsInConversation);
    add("EffectAbilityDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAbilityDecrease);
    add("EffectAttackDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAttackDecrease);
    add("EffectDamageDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageDecrease);
    add("EffectDamageImmunityDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageImmunityDecrease);
    add("EffectACDecrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectACDecrease);
    add("EffectMovementSpeedDecrease", R_EFFECT, {R_INT}, &routine::effectMovementSpeedDecrease);
    add("EffectSavingThrowDecrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectSavingThrowDecrease);
    add("EffectSkillDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectSkillDecrease);
    add("EffectForceResistanceDecrease", R_EFFECT, {R_INT}, &routine::effectForceResistanceDecrease);
    add("GetPlotFlag", R_INT, {R_OBJECT}, &routine::getPlotFlag);
    add("SetPlotFlag", R_VOID, {R_OBJECT, R_INT}, &routine::setPlotFlag);
    add("EffectInvisibility", R_EFFECT, {R_INT}, &routine::effectInvisibility);
    add("EffectConcealment", R_EFFECT, {R_INT}, &routine::effectConcealment);
    add("EffectForceShield", R_EFFECT, {R_INT}, &routine::effectForceShield);
    add("EffectDispelMagicAll", R_EFFECT, {R_INT}, &routine::effectDispelMagicAll);
    add("SetDialogPlaceableCamera", R_VOID, {R_INT}, &routine::setDialogPlaceableCamera);
    add("GetSoloMode", R_INT, {}, &routine::getSoloMode);
    add("EffectDisguise", R_EFFECT, {R_INT}, &routine::effectDisguise);
    add("GetMaxStealthXP", R_INT, {}, &routine::getMaxStealthXP);
    add("EffectTrueSeeing", R_EFFECT, {}, &routine::effectTrueSeeing);
    add("EffectSeeInvisible", R_EFFECT, {}, &routine::effectSeeInvisible);
    add("EffectTimeStop", R_EFFECT, {}, &routine::effectTimeStop);
    add("SetMaxStealthXP", R_VOID, {R_INT}, &routine::setMaxStealthXP);
    add("EffectBlasterDeflectionIncrease", R_EFFECT, {R_INT}, &routine::effectBlasterDeflectionIncrease);
    add("EffectBlasterDeflectionDecrease", R_EFFECT, {R_INT}, &routine::effectBlasterDeflectionDecrease);
    add("EffectHorrified", R_EFFECT, {}, &routine::effectHorrified);
    add("EffectSpellLevelAbsorption", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectSpellLevelAbsorption);
    add("EffectDispelMagicBest", R_EFFECT, {R_INT}, &routine::effectDispelMagicBest);
    add("GetCurrentStealthXP", R_INT, {}, &routine::getCurrentStealthXP);
    add("GetNumStackedItems", R_INT, {R_OBJECT}, &routine::getNumStackedItems);
    add("SurrenderToEnemies", R_VOID, {}, &routine::surrenderToEnemies);
    add("EffectMissChance", R_EFFECT, {R_INT}, &routine::effectMissChance);
    add("SetCurrentStealthXP", R_VOID, {R_INT}, &routine::setCurrentStealthXP);
    add("GetCreatureSize", R_INT, {R_OBJECT}, &routine::getCreatureSize);
    add("AwardStealthXP", R_VOID, {R_OBJECT}, &routine::awardStealthXP);
    add("GetStealthXPEnabled", R_INT, {}, &routine::getStealthXPEnabled);
    add("SetStealthXPEnabled", R_VOID, {R_INT}, &routine::setStealthXPEnabled);
    add("ActionUnlockObject", R_VOID, {R_OBJECT}, &routine::actionUnlockObject);
    add("ActionLockObject", R_VOID, {R_OBJECT}, &routine::actionLockObject);
    add("EffectModifyAttacks", R_EFFECT, {R_INT}, &routine::effectModifyAttacks);
    add("GetLastTrapDetected", R_OBJECT, {R_OBJECT}, &routine::getLastTrapDetected);
    add("EffectDamageShield", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamageShield);
    add("GetNearestTrapToObject", R_OBJECT, {R_OBJECT, R_INT}, &routine::getNearestTrapToObject);
    add("GetAttemptedMovementTarget", R_OBJECT, {}, &routine::getAttemptedMovementTarget);
    add("GetBlockingCreature", R_OBJECT, {R_OBJECT}, &routine::getBlockingCreature);
    add("GetFortitudeSavingThrow", R_INT, {R_OBJECT}, &routine::getFortitudeSavingThrow);
    add("GetWillSavingThrow", R_INT, {R_OBJECT}, &routine::getWillSavingThrow);
    add("GetReflexSavingThrow", R_INT, {R_OBJECT}, &routine::getReflexSavingThrow);
    add("GetChallengeRating", R_FLOAT, {R_OBJECT}, &routine::getChallengeRating);
    add("GetFoundEnemyCreature", R_OBJECT, {R_OBJECT}, &routine::getFoundEnemyCreature);
    add("GetMovementRate", R_INT, {R_OBJECT}, &routine::getMovementRate);
    add("GetSubRace", R_INT, {R_OBJECT}, &routine::getSubRace);
    add("GetStealthXPDecrement", R_INT, {}, &routine::getStealthXPDecrement);
    add("SetStealthXPDecrement", R_VOID, {R_INT}, &routine::setStealthXPDecrement);
    add("DuplicateHeadAppearance", R_VOID, {R_OBJECT, R_OBJECT}, &routine::duplicateHeadAppearance);
    add("ActionCastFakeSpellAtObject", R_VOID, {R_INT, R_OBJECT, R_INT}, &routine::actionCastFakeSpellAtObject);
    add("ActionCastFakeSpellAtLocation", R_VOID, {R_INT, R_LOCATION, R_INT}, &routine::actionCastFakeSpellAtLocation);
    add("CutsceneAttack", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT}, &routine::cutsceneAttack);
    add("SetCameraMode", R_VOID, {R_OBJECT, R_INT}, &routine::setCameraMode);
    add("SetLockOrientationInDialog", R_VOID, {R_OBJECT, R_INT}, &routine::setLockOrientationInDialog);
    add("SetLockHeadFollowInDialog", R_VOID, {R_OBJECT, R_INT}, &routine::setLockHeadFollowInDialog);
    add("CutsceneMove", R_VOID, {R_OBJECT, R_VECTOR, R_INT}, &routine::cutsceneMove);
    add("EnableVideoEffect", R_VOID, {R_INT}, &routine::enableVideoEffect);
    add("StartNewModule", R_VOID, {R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING}, &routine::startNewModule);
    add("DisableVideoEffect", R_VOID, {}, &routine::disableVideoEffect);
    add("GetWeaponRanged", R_INT, {R_OBJECT}, &routine::getWeaponRanged);
    add("DoSinglePlayerAutoSave", R_VOID, {}, &routine::doSinglePlayerAutoSave);
    add("GetGameDifficulty", R_INT, {}, &routine::getGameDifficulty);
    add("GetUserActionsPending", R_INT, {}, &routine::getUserActionsPending);
    add("RevealMap", R_VOID, {R_VECTOR, R_INT}, &routine::revealMap);
    add("SetTutorialWindowsEnabled", R_VOID, {R_INT}, &routine::setTutorialWindowsEnabled);
    add("ShowTutorialWindow", R_VOID, {R_INT}, &routine::showTutorialWindow);
    add("StartCreditSequence", R_VOID, {R_INT}, &routine::startCreditSequence);
    add("IsCreditSequenceInProgress", R_INT, {}, &routine::isCreditSequenceInProgress);

    add("SWMG_SetLateralAccelerationPerSecond", R_VOID, {R_FLOAT}, &routine::minigame::setLateralAccelerationPerSecond);
    add("SWMG_GetLateralAccelerationPerSecond", R_FLOAT, {}, &routine::minigame::getLateralAccelerationPerSecond);

    add("GetCurrentAction", R_INT, {R_OBJECT}, &routine::getCurrentAction);
    add("GetDifficultyModifier", R_FLOAT, {}, &routine::getDifficultyModifier);
    add("GetAppearanceType", R_INT, {R_OBJECT}, &routine::getAppearanceType);
    add("FloatingTextStrRefOnCreature", R_VOID, {R_INT, R_OBJECT, R_INT}, &routine::floatingTextStrRefOnCreature);
    add("FloatingTextStringOnCreature", R_VOID, {R_STRING, R_OBJECT, R_INT}, &routine::floatingTextStringOnCreature);
    add("GetTrapDisarmable", R_INT, {R_OBJECT}, &routine::getTrapDisarmable);
    add("GetTrapDetectable", R_INT, {R_OBJECT}, &routine::getTrapDetectable);
    add("GetTrapDetectedBy", R_INT, {R_OBJECT, R_OBJECT}, &routine::getTrapDetectedBy);
    add("GetTrapFlagged", R_INT, {R_OBJECT}, &routine::getTrapFlagged);
    add("GetTrapBaseType", R_INT, {R_OBJECT}, &routine::getTrapBaseType);
    add("GetTrapOneShot", R_INT, {R_OBJECT}, &routine::getTrapOneShot);
    add("GetTrapCreator", R_OBJECT, {R_OBJECT}, &routine::getTrapCreator);
    add("GetTrapKeyTag", R_STRING, {R_OBJECT}, &routine::getTrapKeyTag);
    add("GetTrapDisarmDC", R_INT, {R_OBJECT}, &routine::getTrapDisarmDC);
    add("GetTrapDetectDC", R_INT, {R_OBJECT}, &routine::getTrapDetectDC);
    add("GetLockKeyRequired", R_INT, {R_OBJECT}, &routine::getLockKeyRequired);
    add("GetLockKeyTag", R_INT, {R_OBJECT}, &routine::getLockKeyTag);
    add("GetLockLockable", R_INT, {R_OBJECT}, &routine::getLockLockable);
    add("GetLockUnlockDC", R_INT, {R_OBJECT}, &routine::getLockUnlockDC);
    add("GetLockLockDC", R_INT, {R_OBJECT}, &routine::getLockLockDC);
    add("GetPCLevellingUp", R_OBJECT, {}, &routine::getPCLevellingUp);
    add("GetHasFeatEffect", R_INT, {R_INT, R_OBJECT}, &routine::getHasFeatEffect);
    add("SetPlaceableIllumination", R_VOID, {R_OBJECT, R_INT}, &routine::setPlaceableIllumination);
    add("GetPlaceableIllumination", R_INT, {R_OBJECT}, &routine::getPlaceableIllumination);
    add("GetIsPlaceableObjectActionPossible", R_INT, {R_OBJECT, R_INT}, &routine::getIsPlaceableObjectActionPossible);
    add("DoPlaceableObjectAction", R_VOID, {R_OBJECT, R_INT}, &routine::doPlaceableObjectAction);
    add("GetFirstPC", R_OBJECT, {}, &routine::getFirstPC);
    add("GetNextPC", R_OBJECT, {}, &routine::getNextPC);
    add("SetTrapDetectedBy", R_INT, {R_OBJECT, R_OBJECT}, &routine::setTrapDetectedBy);
    add("GetIsTrapped", R_INT, {R_OBJECT}, &routine::getIsTrapped);
    add("SetEffectIcon", R_EFFECT, {R_EFFECT, R_INT}, &routine::setEffectIcon);
    add("FaceObjectAwayFromObject", R_VOID, {R_OBJECT, R_OBJECT}, &routine::faceObjectAwayFromObject);
    add("PopUpDeathGUIPanel", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT, R_STRING}, &routine::popUpDeathGUIPanel);
    add("SetTrapDisabled", R_VOID, {R_OBJECT}, &routine::setTrapDisabled);
    add("GetLastHostileActor", R_OBJECT, {R_OBJECT}, &routine::getLastHostileActor);
    add("ExportAllCharacters", R_VOID, {}, &routine::exportAllCharacters);
    add("MusicBackgroundGetDayTrack", R_INT, {R_OBJECT}, &routine::musicBackgroundGetDayTrack);
    add("MusicBackgroundGetNightTrack", R_INT, {R_OBJECT}, &routine::musicBackgroundGetNightTrack);
    add("WriteTimestampedLogEntry", R_VOID, {R_STRING}, &routine::writeTimestampedLogEntry);
    add("GetModuleName", R_STRING, {}, &routine::getModuleName);
    add("GetFactionLeader", R_OBJECT, {R_OBJECT}, &routine::getFactionLeader);

    add("SWMG_SetSpeedBlurEffect", R_VOID, {R_INT, R_FLOAT}, &routine::minigame::setSpeedBlurEffect);

    add("EndGame", R_VOID, {R_INT}, &routine::endGame);
    add("GetRunScriptVar", R_INT, {}, &routine::getRunScriptVar);
    add("GetCreatureMovmentType", R_INT, {R_OBJECT}, &routine::getCreatureMovmentType);
    add("AmbientSoundSetDayVolume", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundSetDayVolume);
    add("AmbientSoundSetNightVolume", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundSetNightVolume);
    add("MusicBackgroundGetBattleTrack", R_INT, {R_OBJECT}, &routine::musicBackgroundGetBattleTrack);
    add("GetHasInventory", R_INT, {R_OBJECT}, &routine::getHasInventory);
    add("GetStrRefSoundDuration", R_FLOAT, {R_INT}, &routine::getStrRefSoundDuration);
    add("AddToParty", R_VOID, {R_OBJECT, R_OBJECT}, &routine::addToParty);
    add("RemoveFromParty", R_VOID, {R_OBJECT}, &routine::removeFromParty);
    add("AddPartyMember", R_INT, {R_INT, R_OBJECT}, &routine::addPartyMember);
    add("RemovePartyMember", R_INT, {R_INT}, &routine::removePartyMember);
    add("IsObjectPartyMember", R_INT, {R_OBJECT}, &routine::isObjectPartyMember);
    add("GetPartyMemberByIndex", R_OBJECT, {R_INT}, &routine::getPartyMemberByIndex);
    add("GetGlobalBoolean", R_INT, {R_STRING}, &routine::getGlobalBoolean);
    add("SetGlobalBoolean", R_VOID, {R_STRING, R_INT}, &routine::setGlobalBoolean);
    add("GetGlobalNumber", R_INT, {R_STRING}, &routine::getGlobalNumber);
    add("SetGlobalNumber", R_VOID, {R_STRING, R_INT}, &routine::setGlobalNumber);
    add("AurPostString", R_VOID, {R_STRING, R_INT, R_INT, R_FLOAT}, &routine::aurPostString);

    add("SWMG_GetLastEvent", R_STRING, {}, &routine::minigame::getLastEvent);
    add("SWMG_GetLastEventModelName", R_STRING, {}, &routine::minigame::getLastEventModelName);
    add("SWMG_GetObjectByName", R_OBJECT, {R_STRING}, &routine::minigame::getObjectByName);
    add("SWMG_PlayAnimation", R_VOID, {R_OBJECT, R_STRING, R_INT, R_INT, R_INT}, &routine::minigame::playAnimation);
    add("SWMG_GetLastBulletHitDamage", R_INT, {}, &routine::minigame::getLastBulletHitDamage);
    add("SWMG_GetLastBulletHitTarget", R_INT, {}, &routine::minigame::getLastBulletHitTarget);
    add("SWMG_GetLastBulletHitShooter", R_OBJECT, {}, &routine::minigame::getLastBulletHitShooter);
    add("SWMG_AdjustFollowerHitPoints", R_INT, {R_OBJECT, R_INT, R_INT}, &routine::minigame::adjustFollowerHitPoints);
    add("SWMG_OnBulletHit", R_VOID, {}, &routine::minigame::onBulletHit);
    add("SWMG_OnObstacleHit", R_VOID, {}, &routine::minigame::onObstacleHit);
    add("SWMG_GetLastFollowerHit", R_OBJECT, {}, &routine::minigame::getLastFollowerHit);
    add("SWMG_GetLastObstacleHit", R_OBJECT, {}, &routine::minigame::getLastObstacleHit);
    add("SWMG_GetLastBulletFiredDamage", R_INT, {}, &routine::minigame::getLastBulletFiredDamage);
    add("SWMG_GetLastBulletFiredTarget", R_INT, {}, &routine::minigame::getLastBulletFiredTarget);
    add("SWMG_GetObjectName", R_STRING, {R_OBJECT}, &routine::minigame::getObjectName);
    add("SWMG_OnDeath", R_VOID, {}, &routine::minigame::onDeath);
    add("SWMG_IsFollower", R_INT, {R_OBJECT}, &routine::minigame::isFollower);
    add("SWMG_IsPlayer", R_INT, {R_OBJECT}, &routine::minigame::isPlayer);
    add("SWMG_IsEnemy", R_INT, {R_OBJECT}, &routine::minigame::isEnemy);
    add("SWMG_IsTrigger", R_INT, {R_OBJECT}, &routine::minigame::isTrigger);
    add("SWMG_IsObstacle", R_INT, {R_OBJECT}, &routine::minigame::isObstacle);
    add("SWMG_SetFollowerHitPoints", R_VOID, {R_OBJECT, R_INT}, &routine::minigame::setFollowerHitPoints);
    add("SWMG_OnDamage", R_VOID, {}, &routine::minigame::onDamage);
    add("SWMG_GetLastHPChange", R_INT, {}, &routine::minigame::getLastHPChange);
    add("SWMG_RemoveAnimation", R_VOID, {R_OBJECT, R_STRING}, &routine::minigame::removeAnimation);
    add("SWMG_GetCameraNearClip", R_FLOAT, {}, &routine::minigame::getCameraNearClip);
    add("SWMG_GetCameraFarClip", R_FLOAT, {}, &routine::minigame::getCameraFarClip);
    add("SWMG_SetCameraClip", R_VOID, {R_FLOAT, R_FLOAT}, &routine::minigame::setCameraClip);
    add("SWMG_GetPlayer", R_OBJECT, {}, &routine::minigame::getPlayer);
    add("SWMG_GetEnemyCount", R_INT, {}, &routine::minigame::getEnemyCount);
    add("SWMG_GetEnemy", R_OBJECT, {R_INT}, &routine::minigame::getEnemy);
    add("SWMG_GetObstacleCount", R_INT, {}, &routine::minigame::testWalkCount);
    add("SWMG_GetObstacle", R_OBJECT, {R_INT}, &routine::minigame::testWalk);
    add("SWMG_GetHitPoints", R_INT, {R_OBJECT}, &routine::minigame::getHitPoints);
    add("SWMG_GetMaxHitPoints", R_INT, {R_OBJECT}, &routine::minigame::getMaxHitPoints);
    add("SWMG_SetMaxHitPoints", R_VOID, {R_OBJECT, R_INT}, &routine::minigame::setMaxHitPoints);
    add("SWMG_GetSphereRadius", R_FLOAT, {R_OBJECT}, &routine::minigame::getSphereRadius);
    add("SWMG_SetSphereRadius", R_VOID, {R_OBJECT, R_FLOAT}, &routine::minigame::setSphereRadius);
    add("SWMG_GetNumLoops", R_INT, {R_OBJECT}, &routine::minigame::getNumLoops);
    add("SWMG_SetNumLoops", R_VOID, {R_OBJECT, R_INT}, &routine::minigame::setNumLoops);
    add("SWMG_GetPosition", R_VECTOR, {R_OBJECT}, &routine::minigame::getPosition);
    add("SWMG_GetGunBankCount", R_INT, {R_OBJECT}, &routine::minigame::getGunBankCount);
    add("SWMG_GetGunBankBulletModel", R_STRING, {R_OBJECT, R_INT}, &routine::minigame::getGunBankBulletModel);
    add("SWMG_GetGunBankGunModel", R_STRING, {R_OBJECT, R_INT}, &routine::minigame::getGunBankGunModel);
    add("SWMG_GetGunBankDamage", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankDamage);
    add("SWMG_GetGunBankTimeBetweenShots", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankTimeBetweenShots);
    add("SWMG_GetGunBankLifespan", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankLifespan);
    add("SWMG_GetGunBankSpeed", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankSpeed);
    add("SWMG_GetGunBankTarget", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankTarget);
    add("SWMG_SetGunBankBulletModel", R_VOID, {R_OBJECT, R_INT, R_STRING}, &routine::minigame::setGunBankBulletModel);
    add("SWMG_SetGunBankGunModel", R_VOID, {R_OBJECT, R_INT, R_STRING}, &routine::minigame::setGunBankGunModel);
    add("SWMG_SetGunBankDamage", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setGunBankDamage);
    add("SWMG_SetGunBankTimeBetweenShots", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankTimeBetweenShots);
    add("SWMG_SetGunBankLifespan", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankLifespan);
    add("SWMG_SetGunBankSpeed", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankSpeed);
    add("SWMG_SetGunBankTarget", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setGunBankTarget);
    add("SWMG_GetLastBulletHitPart", R_STRING, {}, &routine::minigame::getLastBulletHitPart);
    add("SWMG_IsGunBankTargetting", R_INT, {R_OBJECT, R_INT}, &routine::minigame::isGunBankTargetting);
    add("SWMG_GetPlayerOffset", R_VECTOR, {}, &routine::minigame::getPlayerOffset);
    add("SWMG_GetPlayerInvincibility", R_FLOAT, {}, &routine::minigame::getPlayerInvincibility);
    add("SWMG_GetPlayerSpeed", R_FLOAT, {}, &routine::minigame::getPlayerSpeed);
    add("SWMG_GetPlayerMinSpeed", R_FLOAT, {}, &routine::minigame::getPlayerMinSpeed);
    add("SWMG_GetPlayerAccelerationPerSecond", R_FLOAT, {}, &routine::minigame::getPlayerAccelerationPerSecond);
    add("SWMG_GetPlayerTunnelPos", R_VECTOR, {}, &routine::minigame::getPlayerTunnelPos);
    add("SWMG_SetPlayerOffset", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerOffset);
    add("SWMG_SetPlayerInvincibility", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerInvincibility);
    add("SWMG_SetPlayerSpeed", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerSpeed);
    add("SWMG_SetPlayerMinSpeed", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerMinSpeed);
    add("SWMG_SetPlayerAccelerationPerSecond", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerAccelerationPerSecond);
    add("SWMG_SetPlayerTunnelPos", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerTunnelPos);
    add("SWMG_GetPlayerTunnelNeg", R_VECTOR, {}, &routine::minigame::getPlayerTunnelNeg);
    add("SWMG_SetPlayerTunnelNeg", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerTunnelNeg);
    add("SWMG_GetPlayerOrigin", R_VECTOR, {}, &routine::minigame::getPlayerOrigin);
    add("SWMG_SetPlayerOrigin", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerOrigin);
    add("SWMG_GetGunBankHorizontalSpread", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankHorizontalSpread);
    add("SWMG_GetGunBankVerticalSpread", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankVerticalSpread);
    add("SWMG_GetGunBankSensingRadius", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankSensingRadius);
    add("SWMG_GetGunBankInaccuracy", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankInaccuracy);
    add("SWMG_SetGunBankHorizontalSpread", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankHorizontalSpread);
    add("SWMG_SetGunBankVerticalSpread", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankVerticalSpread);
    add("SWMG_SetGunBankSensingRadius", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankSensingRadius);
    add("SWMG_SetGunBankInaccuracy", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankInaccuracy);
    add("SWMG_GetIsInvulnerable", R_INT, {R_OBJECT}, &routine::minigame::getIsInvulnerable);
    add("SWMG_StartInvulnerability", R_VOID, {R_OBJECT}, &routine::minigame::startInvulnerability);
    add("SWMG_GetPlayerMaxSpeed", R_FLOAT, {}, &routine::minigame::getPlayerMaxSpeed);
    add("SWMG_SetPlayerMaxSpeed", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerMaxSpeed);

    add("AddJournalWorldEntry", R_VOID, {R_INT, R_STRING, R_STRING}, &routine::addJournalWorldEntry);
    add("AddJournalWorldEntryStrref", R_VOID, {R_INT, R_INT}, &routine::addJournalWorldEntryStrref);
    add("BarkString", R_VOID, {R_OBJECT, R_INT}, &routine::barkString);
    add("DeleteJournalWorldAllEntries", R_VOID, {}, &routine::deleteJournalWorldAllEntries);
    add("DeleteJournalWorldEntry", R_VOID, {R_INT}, &routine::deleteJournalWorldEntry);
    add("DeleteJournalWorldEntryStrref", R_VOID, {R_INT}, &routine::deleteJournalWorldEntryStrref);
    add("EffectForceDrain", R_EFFECT, {R_INT}, &routine::effectForceDrain);
    add("EffectPsychicStatic", R_EFFECT, {}, &routine::effectPsychicStatic);
    add("PlayVisualAreaEffect", R_VOID, {R_INT, R_LOCATION}, &routine::playVisualAreaEffect);
    add("SetJournalQuestEntryPicture", R_VOID, {R_STRING, R_OBJECT, R_INT, R_INT, R_INT}, &routine::setJournalQuestEntryPicture);
    add("GetLocalBoolean", R_INT, {R_OBJECT, R_INT}, &routine::getLocalBoolean);
    add("SetLocalBoolean", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::setLocalBoolean);
    add("GetLocalNumber", R_INT, {R_OBJECT, R_INT}, &routine::getLocalNumber);
    add("SetLocalNumber", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::setLocalNumber);

    add("SWMG_GetSoundFrequency", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getSoundFrequency);
    add("SWMG_SetSoundFrequency", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setSoundFrequency);
    add("SWMG_GetSoundFrequencyIsRandom", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getSoundFrequencyIsRandom);
    add("SWMG_SetSoundFrequencyIsRandom", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setSoundFrequencyIsRandom);
    add("SWMG_GetSoundVolume", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getSoundVolume);
    add("SWMG_SetSoundVolume", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setSoundVolume);

    add("SoundObjectGetPitchVariance", R_FLOAT, {R_OBJECT}, &routine::soundObjectGetPitchVariance);
    add("SoundObjectSetPitchVariance", R_VOID, {R_OBJECT, R_FLOAT}, &routine::soundObjectSetPitchVariance);
    add("SoundObjectGetVolume", R_INT, {R_OBJECT}, &routine::soundObjectGetVolume);
    add("GetGlobalLocation", R_LOCATION, {R_STRING}, &routine::getGlobalLocation);
    add("SetGlobalLocation", R_VOID, {R_STRING, R_LOCATION}, &routine::setGlobalLocation);
    add("AddAvailableNPCByObject", R_INT, {R_INT, R_OBJECT}, &routine::addAvailableNPCByObject);
    add("RemoveAvailableNPC", R_INT, {R_INT}, &routine::removeAvailableNPC);
    add("IsAvailableCreature", R_INT, {R_INT}, &routine::isAvailableCreature);
    add("AddAvailableNPCByTemplate", R_INT, {R_INT, R_STRING}, &routine::addAvailableNPCByTemplate);
    add("SpawnAvailableNPC", R_OBJECT, {R_INT, R_LOCATION}, &routine::spawnAvailableNPC);
    add("IsNPCPartyMember", R_INT, {R_INT}, &routine::isNPCPartyMember);
    add("ActionBarkString", R_VOID, {R_INT}, &routine::actionBarkString);
    add("GetIsConversationActive", R_INT, {}, &routine::getIsConversationActive);
    add("EffectLightsaberThrow", R_EFFECT, {R_OBJECT, R_OBJECT, R_OBJECT, R_INT}, &routine::effectLightsaberThrow);
    add("EffectWhirlWind", R_EFFECT, {}, &routine::effectWhirlWind);
    add("GetPartyAIStyle", R_INT, {}, &routine::getPartyAIStyle);
    add("GetNPCAIStyle", R_INT, {R_OBJECT}, &routine::getNPCAIStyle);
    add("SetPartyAIStyle", R_VOID, {R_INT}, &routine::setPartyAIStyle);
    add("SetNPCAIStyle", R_VOID, {R_OBJECT, R_INT}, &routine::setNPCAIStyle);
    add("SetNPCSelectability", R_VOID, {R_INT, R_INT}, &routine::setNPCSelectability);
    add("GetNPCSelectability", R_INT, {R_INT}, &routine::getNPCSelectability);
    add("ClearAllEffects", R_VOID, {}, &routine::clearAllEffects);
    add("GetLastConversation", R_STRING, {}, &routine::getLastConversation);
    add("ShowPartySelectionGUI", R_VOID, {R_STRING, R_INT, R_INT}, &routine::showPartySelectionGUI);
    add("GetStandardFaction", R_INT, {R_OBJECT}, &routine::getStandardFaction);
    add("GivePlotXP", R_VOID, {R_STRING, R_INT}, &routine::givePlotXP);
    add("GetMinOneHP", R_INT, {R_OBJECT}, &routine::getMinOneHP);
    add("SetMinOneHP", R_VOID, {R_OBJECT, R_INT}, &routine::setMinOneHP);

    add("SWMG_GetPlayerTunnelInfinite", R_VECTOR, {}, &routine::minigame::getPlayerTunnelInfinite);
    add("SWMG_SetPlayerTunnelInfinite", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerTunnelInfinite);

    add("SetGlobalFadeIn", R_VOID, {R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT}, &routine::setGlobalFadeIn);
    add("SetGlobalFadeOut", R_VOID, {R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT}, &routine::setGlobalFadeOut);
    add("GetLastHostileTarget", R_OBJECT, {R_OBJECT}, &routine::getLastHostileTarget);
    add("GetLastAttackAction", R_INT, {R_OBJECT}, &routine::getLastAttackAction);
    add("GetLastForcePowerUsed", R_INT, {R_OBJECT}, &routine::getLastForcePowerUsed);
    add("GetLastCombatFeatUsed", R_INT, {R_OBJECT}, &routine::getLastCombatFeatUsed);
    add("GetLastAttackResult", R_INT, {R_OBJECT}, &routine::getLastAttackResult);
    add("GetWasForcePowerSuccessful", R_INT, {R_OBJECT}, &routine::getWasForcePowerSuccessful);
    add("GetFirstAttacker", R_OBJECT, {R_OBJECT}, &routine::getFirstAttacker);
    add("GetNextAttacker", R_OBJECT, {R_OBJECT}, &routine::getNextAttacker);
    add("SetFormation", R_VOID, {R_OBJECT, R_OBJECT, R_INT, R_INT}, &routine::setFormation);
    add("ActionFollowLeader", R_VOID, {}, &routine::actionFollowLeader);
    add("SetForcePowerUnsuccessful", R_VOID, {R_INT, R_OBJECT}, &routine::setForcePowerUnsuccessful);
    add("GetIsDebilitated", R_INT, {R_OBJECT}, &routine::getIsDebilitated);
    add("PlayMovie", R_VOID, {R_STRING}, &routine::playMovie);
    add("SaveNPCState", R_VOID, {R_INT}, &routine::saveNPCState);
    add("GetCategoryFromTalent", R_INT, {R_TALENT}, &routine::getCategoryFromTalent);
    add("SurrenderByFaction", R_VOID, {R_INT, R_INT}, &routine::surrenderByFaction);
    add("ChangeFactionByFaction", R_VOID, {R_INT, R_INT}, &routine::changeFactionByFaction);
    add("PlayRoomAnimation", R_VOID, {R_STRING, R_INT}, &routine::playRoomAnimation);
    add("ShowGalaxyMap", R_VOID, {R_INT}, &routine::showGalaxyMap);
    add("SetPlanetSelectable", R_VOID, {R_INT, R_INT}, &routine::setPlanetSelectable);
    add("GetPlanetSelectable", R_INT, {R_INT}, &routine::getPlanetSelectable);
    add("SetPlanetAvailable", R_VOID, {R_INT, R_INT}, &routine::setPlanetAvailable);
    add("GetPlanetAvailable", R_INT, {R_INT}, &routine::getPlanetAvailable);
    add("GetSelectedPlanet", R_INT, {}, &routine::getSelectedPlanet);
    add("SoundObjectFadeAndStop", R_VOID, {R_OBJECT, R_FLOAT}, &routine::soundObjectFadeAndStop);
    add("SetAreaFogColor", R_VOID, {R_OBJECT, R_FLOAT, R_FLOAT, R_FLOAT}, &routine::setAreaFogColor);
    add("ChangeItemCost", R_VOID, {R_STRING, R_FLOAT}, &routine::changeItemCost);
    add("GetIsLiveContentAvailable", R_INT, {R_INT}, &routine::getIsLiveContentAvailable);
    add("ResetDialogState", R_VOID, {}, &routine::resetDialogState);
    add("SetGoodEvilValue", R_VOID, {R_OBJECT, R_INT}, &routine::setGoodEvilValue);
    add("GetIsPoisoned", R_INT, {R_OBJECT}, &routine::getIsPoisoned);
    add("GetSpellTarget", R_OBJECT, {R_OBJECT}, &routine::getSpellTarget);
    add("SetSoloMode", R_VOID, {R_INT}, &routine::setSoloMode);
    add("EffectCutSceneHorrified", R_EFFECT, {}, &routine::effectCutSceneHorrified);
    add("EffectCutSceneParalyze", R_EFFECT, {}, &routine::effectCutSceneParalyze);
    add("EffectCutSceneStunned", R_EFFECT, {}, &routine::effectCutSceneStunned);
    add("CancelPostDialogCharacterSwitch", R_VOID, {}, &routine::cancelPostDialogCharacterSwitch);
    add("SetMaxHitPoints", R_VOID, {R_OBJECT, R_INT}, &routine::setMaxHitPoints);
    add("NoClicksFor", R_VOID, {R_FLOAT}, &routine::noClicksFor);
    add("HoldWorldFadeInForDialog", R_VOID, {}, &routine::holdWorldFadeInForDialog);
    add("ShipBuild", R_INT, {}, &routine::shipBuild);
    add("SurrenderRetainBuffs", R_VOID, {}, &routine::surrenderRetainBuffs);
    add("SuppressStatusSummaryEntry", R_VOID, {R_INT}, &routine::suppressStatusSummaryEntry);
    add("GetCheatCode", R_INT, {R_INT}, &routine::getCheatCode);
    add("SetMusicVolume", R_VOID, {R_FLOAT}, &routine::setMusicVolume);
    add("CreateItemOnFloor", R_OBJECT, {R_STRING, R_LOCATION, R_INT}, &routine::createItemOnFloor);
    add("SetAvailableNPCId", R_VOID, {R_INT, R_OBJECT}, &routine::setAvailableNPCId);
    add("IsMoviePlaying", R_INT, {}, &routine::isMoviePlaying);
    add("QueueMovie", R_VOID, {R_STRING, R_INT}, &routine::queueMovie);
    add("PlayMovieQueue", R_VOID, {R_INT}, &routine::playMovieQueue);
    add("YavinHackCloseDoor", R_VOID, {R_OBJECT}, &routine::yavinHackCloseDoor);
}

void Routines::initForTSL() {
    add("Random", R_INT, {R_INT}, &routine::random);
    add("PrintString", R_VOID, {R_STRING}, &routine::printString);
    add("PrintFloat", R_VOID, {R_FLOAT, R_INT, R_INT}, &routine::printFloat);
    add("FloatToString", R_STRING, {R_FLOAT, R_INT, R_INT}, &routine::floatToString);
    add("PrintInteger", R_VOID, {R_INT}, &routine::printInteger);
    add("PrintObject", R_VOID, {R_OBJECT}, &routine::printObject);
    add("AssignCommand", R_VOID, {R_OBJECT, R_ACTION}, &routine::assignCommand);
    add("DelayCommand", R_VOID, {R_FLOAT, R_ACTION}, &routine::delayCommand);
    add("ExecuteScript", R_VOID, {R_STRING, R_OBJECT, R_INT}, &routine::executeScript);
    add("ClearAllActions", R_VOID, {}, &routine::clearAllActions);
    add("SetFacing", R_VOID, {R_FLOAT}, &routine::setFacing);
    add("SwitchPlayerCharacter", R_INT, {R_INT}, &routine::switchPlayerCharacter);
    add("SetTime", R_VOID, {R_INT, R_INT, R_INT, R_INT}, &routine::setTime);
    add("SetPartyLeader", R_INT, {R_INT}, &routine::setPartyLeader);
    add("SetAreaUnescapable", R_VOID, {R_INT}, &routine::setAreaUnescapable);
    add("GetAreaUnescapable", R_INT, {}, &routine::getAreaUnescapable);
    add("GetTimeHour", R_INT, {}, &routine::getTimeHour);
    add("GetTimeMinute", R_INT, {}, &routine::getTimeMinute);
    add("GetTimeSecond", R_INT, {}, &routine::getTimeSecond);
    add("GetTimeMillisecond", R_INT, {}, &routine::getTimeMillisecond);
    add("ActionRandomWalk", R_VOID, {}, &routine::actionRandomWalk);
    add("ActionMoveToLocation", R_VOID, {R_LOCATION, R_INT}, &routine::actionMoveToLocation);
    add("ActionMoveToObject", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::actionMoveToObject);
    add("ActionMoveAwayFromObject", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::actionMoveAwayFromObject);
    add("GetArea", R_OBJECT, {R_OBJECT}, &routine::getArea);
    add("GetEnteringObject", R_OBJECT, {}, &routine::getEnteringObject);
    add("GetExitingObject", R_OBJECT, {}, &routine::getExitingObject);
    add("GetPosition", R_VECTOR, {R_OBJECT}, &routine::getPosition);
    add("GetFacing", R_FLOAT, {R_OBJECT}, &routine::getFacing);
    add("GetItemPossessor", R_OBJECT, {R_OBJECT}, &routine::getItemPossessor);
    add("GetItemPossessedBy", R_OBJECT, {R_OBJECT, R_STRING}, &routine::getItemPossessedBy);
    add("CreateItemOnObject", R_OBJECT, {R_STRING, R_OBJECT, R_INT, R_INT}, &routine::createItemOnObject);
    add("ActionEquipItem", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::actionEquipItem);
    add("ActionUnequipItem", R_VOID, {R_OBJECT, R_INT}, &routine::actionUnequipItem);
    add("ActionPickUpItem", R_VOID, {R_OBJECT}, &routine::actionPickUpItem);
    add("ActionPutDownItem", R_VOID, {R_OBJECT}, &routine::actionPutDownItem);
    add("GetLastAttacker", R_OBJECT, {R_OBJECT}, &routine::getLastAttacker);
    add("ActionAttack", R_VOID, {R_OBJECT, R_INT}, &routine::actionAttack);
    add("GetNearestCreature", R_OBJECT, {R_INT, R_INT, R_OBJECT, R_INT, R_INT, R_INT, R_INT, R_INT}, &routine::getNearestCreature);
    add("ActionSpeakString", R_VOID, {R_STRING, R_INT}, &routine::actionSpeakString);
    add("ActionPlayAnimation", R_VOID, {R_INT, R_FLOAT, R_FLOAT}, &routine::actionPlayAnimation);
    add("GetDistanceToObject", R_FLOAT, {R_OBJECT}, &routine::getDistanceToObject);
    add("GetIsObjectValid", R_INT, {R_OBJECT}, &routine::getIsObjectValid);
    add("ActionOpenDoor", R_VOID, {R_OBJECT}, &routine::actionOpenDoor);
    add("ActionCloseDoor", R_VOID, {R_OBJECT}, &routine::actionCloseDoor);
    add("SetCameraFacing", R_VOID, {R_FLOAT}, &routine::setCameraFacing);
    add("PlaySound", R_VOID, {R_STRING}, &routine::playSound);
    add("GetSpellTargetObject", R_OBJECT, {}, &routine::getSpellTargetObject);
    add("ActionCastSpellAtObject", R_VOID, {R_INT, R_OBJECT, R_INT, R_INT, R_INT, R_INT, R_INT}, &routine::actionCastSpellAtObject);
    add("GetCurrentHitPoints", R_INT, {R_OBJECT}, &routine::getCurrentHitPoints);
    add("GetMaxHitPoints", R_INT, {R_OBJECT}, &routine::getMaxHitPoints);
    add("EffectAssuredHit", R_EFFECT, {}, &routine::effectAssuredHit);
    add("GetLastItemEquipped", R_OBJECT, {}, &routine::getLastItemEquipped);
    add("GetSubScreenID", R_INT, {}, &routine::getSubScreenID);
    add("CancelCombat", R_VOID, {R_OBJECT}, &routine::cancelCombat);
    add("GetCurrentForcePoints", R_INT, {R_OBJECT}, &routine::getCurrentForcePoints);
    add("GetMaxForcePoints", R_INT, {R_OBJECT}, &routine::getMaxForcePoints);
    add("PauseGame", R_VOID, {R_INT}, &routine::pauseGame);
    add("SetPlayerRestrictMode", R_VOID, {R_INT}, &routine::setPlayerRestrictMode);
    add("GetStringLength", R_INT, {R_STRING}, &routine::getStringLength);
    add("GetStringUpperCase", R_STRING, {R_STRING}, &routine::getStringUpperCase);
    add("GetStringLowerCase", R_STRING, {R_STRING}, &routine::getStringLowerCase);
    add("GetStringRight", R_STRING, {R_STRING, R_INT}, &routine::getStringRight);
    add("GetStringLeft", R_STRING, {R_STRING, R_INT}, &routine::getStringLeft);
    add("InsertString", R_STRING, {R_STRING, R_STRING, R_INT}, &routine::insertString);
    add("GetSubString", R_STRING, {R_STRING, R_INT, R_INT}, &routine::getSubString);
    add("FindSubString", R_INT, {R_STRING, R_STRING}, &routine::findSubString);
    add("fabs", R_FLOAT, {R_FLOAT}, &routine::fabs);
    add("cos", R_FLOAT, {R_FLOAT}, &routine::cos);
    add("sin", R_FLOAT, {R_FLOAT}, &routine::sin);
    add("tan", R_FLOAT, {R_FLOAT}, &routine::tan);
    add("acos", R_FLOAT, {R_FLOAT}, &routine::acos);
    add("asin", R_FLOAT, {R_FLOAT}, &routine::asin);
    add("atan", R_FLOAT, {R_FLOAT}, &routine::atan);
    add("log", R_FLOAT, {R_FLOAT}, &routine::log);
    add("pow", R_FLOAT, {R_FLOAT, R_FLOAT}, &routine::pow);
    add("sqrt", R_FLOAT, {R_FLOAT}, &routine::sqrt);
    add("abs", R_INT, {R_INT}, &routine::abs);
    add("EffectHeal", R_EFFECT, {R_INT}, &routine::effectHeal);
    add("EffectDamage", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamage);
    add("EffectAbilityIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAbilityIncrease);
    add("EffectDamageResistance", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamageResistance);
    add("EffectResurrection", R_EFFECT, {R_INT}, &routine::effectResurrection);
    add("GetPlayerRestrictMode", R_INT, {R_OBJECT}, &routine::getPlayerRestrictMode);
    add("GetCasterLevel", R_INT, {R_OBJECT}, &routine::getCasterLevel);
    add("GetFirstEffect", R_EFFECT, {R_OBJECT}, &routine::getFirstEffect);
    add("GetNextEffect", R_EFFECT, {R_OBJECT}, &routine::getNextEffect);
    add("RemoveEffect", R_VOID, {R_OBJECT, R_EFFECT}, &routine::removeEffect);
    add("GetIsEffectValid", R_INT, {R_EFFECT}, &routine::getIsEffectValid);
    add("GetEffectDurationType", R_INT, {R_EFFECT}, &routine::getEffectDurationType);
    add("GetEffectSubType", R_INT, {R_EFFECT}, &routine::getEffectSubType);
    add("GetEffectCreator", R_OBJECT, {R_EFFECT}, &routine::getEffectCreator);
    add("IntToString", R_STRING, {R_INT}, &routine::intToString);
    add("GetFirstObjectInArea", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFirstObjectInArea);
    add("GetNextObjectInArea", R_OBJECT, {R_OBJECT, R_INT}, &routine::getNextObjectInArea);
    add("d2", R_INT, {R_INT}, &routine::d2);
    add("d3", R_INT, {R_INT}, &routine::d3);
    add("d4", R_INT, {R_INT}, &routine::d4);
    add("d6", R_INT, {R_INT}, &routine::d6);
    add("d8", R_INT, {R_INT}, &routine::d8);
    add("d10", R_INT, {R_INT}, &routine::d10);
    add("d12", R_INT, {R_INT}, &routine::d12);
    add("d20", R_INT, {R_INT}, &routine::d20);
    add("d100", R_INT, {R_INT}, &routine::d100);
    add("VectorMagnitude", R_FLOAT, {R_VECTOR}, &routine::vectorMagnitude);
    add("GetMetaMagicFeat", R_INT, {}, &routine::getMetaMagicFeat);
    add("GetObjectType", R_INT, {R_OBJECT}, &routine::getObjectType);
    add("GetRacialType", R_INT, {R_OBJECT}, &routine::getRacialType);
    add("FortitudeSave", R_INT, {R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::fortitudeSave);
    add("ReflexSave", R_INT, {R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::reflexSave);
    add("WillSave", R_INT, {R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::willSave);
    add("GetSpellSaveDC", R_INT, {}, &routine::getSpellSaveDC);
    add("MagicalEffect", R_EFFECT, {R_EFFECT}, &routine::magicalEffect);
    add("SupernaturalEffect", R_EFFECT, {R_EFFECT}, &routine::supernaturalEffect);
    add("ExtraordinaryEffect", R_EFFECT, {R_EFFECT}, &routine::extraordinaryEffect);
    add("EffectACIncrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectACIncrease);
    add("GetAC", R_INT, {R_OBJECT, R_INT}, &routine::getAC);
    add("EffectSavingThrowIncrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectSavingThrowIncrease);
    add("EffectAttackIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAttackIncrease);
    add("EffectDamageReduction", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamageReduction);
    add("EffectDamageIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageIncrease);
    add("RoundsToSeconds", R_FLOAT, {R_INT}, &routine::roundsToSeconds);
    add("HoursToSeconds", R_FLOAT, {R_INT}, &routine::hoursToSeconds);
    add("TurnsToSeconds", R_FLOAT, {R_INT}, &routine::turnsToSeconds);
    add("SoundObjectSetFixedVariance", R_VOID, {R_OBJECT, R_FLOAT}, &routine::soundObjectSetFixedVariance);
    add("GetGoodEvilValue", R_INT, {R_OBJECT}, &routine::getGoodEvilValue);
    add("GetPartyMemberCount", R_INT, {}, &routine::getPartyMemberCount);
    add("GetAlignmentGoodEvil", R_INT, {R_OBJECT}, &routine::getAlignmentGoodEvil);
    add("GetFirstObjectInShape", R_OBJECT, {R_INT, R_FLOAT, R_LOCATION, R_INT, R_INT, R_VECTOR}, &routine::getFirstObjectInShape);
    add("GetNextObjectInShape", R_OBJECT, {R_INT, R_FLOAT, R_LOCATION, R_INT, R_INT, R_VECTOR}, &routine::getNextObjectInShape);
    add("EffectEntangle", R_EFFECT, {}, &routine::effectEntangle);
    add("SignalEvent", R_VOID, {R_OBJECT, R_EVENT}, &routine::signalEvent);
    add("EventUserDefined", R_EVENT, {R_INT}, &routine::eventUserDefined);
    add("EffectDeath", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDeath);
    add("EffectKnockdown", R_EFFECT, {}, &routine::effectKnockdown);
    add("ActionGiveItem", R_VOID, {R_OBJECT, R_OBJECT}, &routine::actionGiveItem);
    add("ActionTakeItem", R_VOID, {R_OBJECT, R_OBJECT}, &routine::actionTakeItem);
    add("VectorNormalize", R_VECTOR, {R_VECTOR}, &routine::vectorNormalize);
    add("GetItemStackSize", R_INT, {R_OBJECT}, &routine::getItemStackSize);
    add("GetAbilityScore", R_INT, {R_OBJECT, R_INT}, &routine::getAbilityScore);
    add("GetIsDead", R_INT, {R_OBJECT}, &routine::getIsDead);
    add("PrintVector", R_VOID, {R_VECTOR, R_INT}, &routine::printVector);
    add("Vector", R_VECTOR, {R_FLOAT, R_FLOAT, R_FLOAT}, &routine::vectorCreate);
    add("SetFacingPoint", R_VOID, {R_VECTOR}, &routine::setFacingPoint);
    add("AngleToVector", R_VECTOR, {R_FLOAT}, &routine::angleToVector);
    add("VectorToAngle", R_FLOAT, {R_VECTOR}, &routine::vectorToAngle);
    add("TouchAttackMelee", R_INT, {R_OBJECT, R_INT}, &routine::touchAttackMelee);
    add("TouchAttackRanged", R_INT, {R_OBJECT, R_INT}, &routine::touchAttackRanged);
    add("EffectParalyze", R_EFFECT, {}, &routine::effectParalyze);
    add("EffectSpellImmunity", R_EFFECT, {R_INT}, &routine::effectSpellImmunity);
    add("SetItemStackSize", R_VOID, {R_OBJECT, R_INT}, &routine::setItemStackSize);
    add("GetDistanceBetween", R_FLOAT, {R_OBJECT, R_OBJECT}, &routine::getDistanceBetween);
    add("SetReturnStrref", R_VOID, {R_INT, R_INT, R_INT}, &routine::setReturnStrref);
    add("EffectForceJump", R_EFFECT, {R_OBJECT, R_INT}, &routine::effectForceJump);
    add("EffectSleep", R_EFFECT, {}, &routine::effectSleep);
    add("GetItemInSlot", R_OBJECT, {R_INT, R_OBJECT}, &routine::getItemInSlot);
    add("EffectTemporaryForcePoints", R_EFFECT, {R_INT}, &routine::effectTemporaryForcePoints);
    add("EffectConfused", R_EFFECT, {}, &routine::effectConfused);
    add("EffectFrightened", R_EFFECT, {}, &routine::effectFrightened);
    add("EffectChoke", R_EFFECT, {}, &routine::effectChoke);
    add("SetGlobalString", R_VOID, {R_STRING, R_STRING}, &routine::setGlobalString);
    add("EffectStunned", R_EFFECT, {}, &routine::effectStunned);
    add("SetCommandable", R_VOID, {R_INT, R_OBJECT}, &routine::setCommandable);
    add("GetCommandable", R_INT, {R_OBJECT}, &routine::getCommandable);
    add("EffectRegenerate", R_EFFECT, {R_INT, R_FLOAT}, &routine::effectRegenerate);
    add("EffectMovementSpeedIncrease", R_EFFECT, {R_INT}, &routine::effectMovementSpeedIncrease);
    add("GetHitDice", R_INT, {R_OBJECT}, &routine::getHitDice);
    add("ActionForceFollowObject", R_VOID, {R_OBJECT, R_FLOAT}, &routine::actionForceFollowObject);
    add("GetTag", R_STRING, {R_OBJECT}, &routine::getTag);
    add("ResistForce", R_INT, {R_OBJECT, R_OBJECT}, &routine::resistForce);
    add("GetEffectType", R_INT, {R_EFFECT}, &routine::getEffectType);
    add("EffectAreaOfEffect", R_EFFECT, {R_INT, R_STRING, R_STRING, R_STRING}, &routine::effectAreaOfEffect);
    add("GetFactionEqual", R_INT, {R_OBJECT, R_OBJECT}, &routine::getFactionEqual);
    add("ChangeFaction", R_VOID, {R_OBJECT, R_OBJECT}, &routine::changeFaction);
    add("GetIsListening", R_INT, {R_OBJECT}, &routine::getIsListening);
    add("SetListening", R_VOID, {R_OBJECT, R_INT}, &routine::setListening);
    add("SetListenPattern", R_VOID, {R_OBJECT, R_STRING, R_INT}, &routine::setListenPattern);
    add("TestStringAgainstPattern", R_INT, {R_STRING, R_STRING}, &routine::testStringAgainstPattern);
    add("GetMatchedSubstring", R_STRING, {R_INT}, &routine::getMatchedSubstring);
    add("GetMatchedSubstringsCount", R_INT, {}, &routine::getMatchedSubstringsCount);
    add("EffectVisualEffect", R_EFFECT, {R_INT, R_INT}, &routine::effectVisualEffect);
    add("GetFactionWeakestMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionWeakestMember);
    add("GetFactionStrongestMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionStrongestMember);
    add("GetFactionMostDamagedMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionMostDamagedMember);
    add("GetFactionLeastDamagedMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionLeastDamagedMember);
    add("GetFactionGold", R_INT, {R_OBJECT}, &routine::getFactionGold);
    add("GetFactionAverageReputation", R_INT, {R_OBJECT, R_OBJECT}, &routine::getFactionAverageReputation);
    add("GetFactionAverageGoodEvilAlignment", R_INT, {R_OBJECT}, &routine::getFactionAverageGoodEvilAlignment);
    add("SoundObjectGetFixedVariance", R_FLOAT, {R_OBJECT}, &routine::soundObjectGetFixedVariance);
    add("GetFactionAverageLevel", R_INT, {R_OBJECT}, &routine::getFactionAverageLevel);
    add("GetFactionAverageXP", R_INT, {R_OBJECT}, &routine::getFactionAverageXP);
    add("GetFactionMostFrequentClass", R_INT, {R_OBJECT}, &routine::getFactionMostFrequentClass);
    add("GetFactionWorstAC", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionWorstAC);
    add("GetFactionBestAC", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFactionBestAC);
    add("GetGlobalString", R_STRING, {R_STRING}, &routine::getGlobalString);
    add("GetListenPatternNumber", R_INT, {}, &routine::getListenPatternNumber);
    add("ActionJumpToObject", R_VOID, {R_OBJECT, R_INT}, &routine::actionJumpToObject);
    add("GetWaypointByTag", R_OBJECT, {R_STRING}, &routine::getWaypointByTag);
    add("GetTransitionTarget", R_OBJECT, {R_OBJECT}, &routine::getTransitionTarget);
    add("EffectLinkEffects", R_EFFECT, {R_EFFECT, R_EFFECT}, &routine::effectLinkEffects);
    add("GetObjectByTag", R_OBJECT, {R_STRING, R_INT}, &routine::getObjectByTag);
    add("AdjustAlignment", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT}, &routine::adjustAlignment);
    add("ActionWait", R_VOID, {R_FLOAT}, &routine::actionWait);
    add("SetAreaTransitionBMP", R_VOID, {R_INT, R_STRING}, &routine::setAreaTransitionBMP);
    add("ActionStartConversation", R_VOID, {R_OBJECT, R_STRING, R_INT, R_INT, R_INT, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_INT, R_INT, R_INT, R_INT}, &routine::actionStartConversation);
    add("ActionPauseConversation", R_VOID, {}, &routine::actionPauseConversation);
    add("ActionResumeConversation", R_VOID, {}, &routine::actionResumeConversation);
    add("EffectBeam", R_EFFECT, {R_INT, R_OBJECT, R_INT, R_INT}, &routine::effectBeam);
    add("GetReputation", R_INT, {R_OBJECT, R_OBJECT}, &routine::getReputation);
    add("AdjustReputation", R_VOID, {R_OBJECT, R_OBJECT, R_INT}, &routine::adjustReputation);
    add("GetModuleFileName", R_STRING, {}, &routine::getModuleFileName);
    add("GetGoingToBeAttackedBy", R_OBJECT, {R_OBJECT}, &routine::getGoingToBeAttackedBy);
    add("EffectForceResistanceIncrease", R_EFFECT, {R_INT}, &routine::effectForceResistanceIncrease);
    add("GetLocation", R_LOCATION, {R_OBJECT}, &routine::getLocation);
    add("ActionJumpToLocation", R_VOID, {R_LOCATION}, &routine::actionJumpToLocation);
    add("Location", R_LOCATION, {R_VECTOR, R_FLOAT}, &routine::location);
    add("ApplyEffectAtLocation", R_VOID, {R_INT, R_EFFECT, R_LOCATION, R_FLOAT}, &routine::applyEffectAtLocation);
    add("GetIsPC", R_INT, {R_OBJECT}, &routine::getIsPC);
    add("FeetToMeters", R_FLOAT, {R_FLOAT}, &routine::feetToMeters);
    add("YardsToMeters", R_FLOAT, {R_FLOAT}, &routine::yardsToMeters);
    add("ApplyEffectToObject", R_VOID, {R_INT, R_EFFECT, R_OBJECT, R_FLOAT}, &routine::applyEffectToObject);
    add("SpeakString", R_VOID, {R_STRING, R_INT}, &routine::speakString);
    add("GetSpellTargetLocation", R_LOCATION, {}, &routine::getSpellTargetLocation);
    add("GetPositionFromLocation", R_VECTOR, {R_LOCATION}, &routine::getPositionFromLocation);
    add("EffectBodyFuel", R_EFFECT, {}, &routine::effectBodyFuel);
    add("GetFacingFromLocation", R_FLOAT, {R_LOCATION}, &routine::getFacingFromLocation);
    add("GetNearestCreatureToLocation", R_OBJECT, {R_INT, R_INT, R_LOCATION, R_INT, R_INT, R_INT, R_INT, R_INT}, &routine::getNearestCreatureToLocation);
    add("GetNearestObject", R_OBJECT, {R_INT, R_OBJECT, R_INT}, &routine::getNearestObject);
    add("GetNearestObjectToLocation", R_OBJECT, {R_INT, R_LOCATION, R_INT}, &routine::getNearestObjectToLocation);
    add("GetNearestObjectByTag", R_OBJECT, {R_STRING, R_OBJECT, R_INT}, &routine::getNearestObjectByTag);
    add("IntToFloat", R_FLOAT, {R_INT}, &routine::intToFloat);
    add("FloatToInt", R_INT, {R_FLOAT}, &routine::floatToInt);
    add("StringToInt", R_INT, {R_STRING}, &routine::stringToInt);
    add("StringToFloat", R_FLOAT, {R_STRING}, &routine::stringToFloat);
    add("ActionCastSpellAtLocation", R_VOID, {R_INT, R_LOCATION, R_INT, R_INT, R_INT, R_INT}, &routine::actionCastSpellAtLocation);
    add("GetIsEnemy", R_INT, {R_OBJECT, R_OBJECT}, &routine::getIsEnemy);
    add("GetIsFriend", R_INT, {R_OBJECT, R_OBJECT}, &routine::getIsFriend);
    add("GetIsNeutral", R_INT, {R_OBJECT, R_OBJECT}, &routine::getIsNeutral);
    add("GetPCSpeaker", R_OBJECT, {}, &routine::getPCSpeaker);
    add("GetStringByStrRef", R_STRING, {R_INT}, &routine::getStringByStrRef);
    add("ActionSpeakStringByStrRef", R_VOID, {R_INT, R_INT}, &routine::actionSpeakStringByStrRef);
    add("DestroyObject", R_VOID, {R_OBJECT, R_FLOAT, R_INT, R_FLOAT, R_INT}, &routine::destroyObject);
    add("GetModule", R_OBJECT, {}, &routine::getModule);
    add("CreateObject", R_OBJECT, {R_INT, R_STRING, R_LOCATION, R_INT}, &routine::createObject);
    add("EventSpellCastAt", R_EVENT, {R_OBJECT, R_INT, R_INT}, &routine::eventSpellCastAt);
    add("GetLastSpellCaster", R_OBJECT, {}, &routine::getLastSpellCaster);
    add("GetLastSpell", R_INT, {}, &routine::getLastSpell);
    add("GetUserDefinedEventNumber", R_INT, {}, &routine::getUserDefinedEventNumber);
    add("GetSpellId", R_INT, {}, &routine::getSpellId);
    add("RandomName", R_STRING, {}, &routine::randomName);
    add("EffectPoison", R_EFFECT, {R_INT}, &routine::effectPoison);
    add("GetLoadFromSaveGame", R_INT, {}, &routine::getLoadFromSaveGame);
    add("EffectAssuredDeflection", R_EFFECT, {R_INT}, &routine::effectAssuredDeflection);
    add("GetName", R_STRING, {R_OBJECT}, &routine::getName);
    add("GetLastSpeaker", R_OBJECT, {}, &routine::getLastSpeaker);
    add("BeginConversation", R_INT, {R_STRING, R_OBJECT}, &routine::beginConversation);
    add("GetLastPerceived", R_OBJECT, {}, &routine::getLastPerceived);
    add("GetLastPerceptionHeard", R_INT, {}, &routine::getLastPerceptionHeard);
    add("GetLastPerceptionInaudible", R_INT, {}, &routine::getLastPerceptionInaudible);
    add("GetLastPerceptionSeen", R_INT, {}, &routine::getLastPerceptionSeen);
    add("GetLastClosedBy", R_OBJECT, {}, &routine::getLastClosedBy);
    add("GetLastPerceptionVanished", R_INT, {}, &routine::getLastPerceptionVanished);
    add("GetFirstInPersistentObject", R_OBJECT, {R_OBJECT, R_INT, R_INT}, &routine::getFirstInPersistentObject);
    add("GetNextInPersistentObject", R_OBJECT, {R_OBJECT, R_INT, R_INT}, &routine::getNextInPersistentObject);
    add("GetAreaOfEffectCreator", R_OBJECT, {R_OBJECT}, &routine::getAreaOfEffectCreator);
    add("ShowLevelUpGUI", R_INT, {}, &routine::showLevelUpGUI);
    add("SetItemNonEquippable", R_VOID, {R_OBJECT, R_INT}, &routine::setItemNonEquippable);
    add("GetButtonMashCheck", R_INT, {}, &routine::getButtonMashCheck);
    add("SetButtonMashCheck", R_VOID, {R_INT}, &routine::setButtonMashCheck);
    add("EffectForcePushTargeted", R_EFFECT, {R_LOCATION, R_INT}, &routine::effectForcePushTargeted);
    add("EffectHaste", R_EFFECT, {}, &routine::effectHaste);
    add("GiveItem", R_VOID, {R_OBJECT, R_OBJECT}, &routine::giveItem);
    add("ObjectToString", R_STRING, {R_OBJECT}, &routine::objectToString);
    add("EffectImmunity", R_EFFECT, {R_INT}, &routine::effectImmunity);
    add("GetIsImmune", R_INT, {R_OBJECT, R_INT, R_OBJECT}, &routine::getIsImmune);
    add("EffectDamageImmunityIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageImmunityIncrease);
    add("GetEncounterActive", R_INT, {R_OBJECT}, &routine::getEncounterActive);
    add("SetEncounterActive", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterActive);
    add("GetEncounterSpawnsMax", R_INT, {R_OBJECT}, &routine::getEncounterSpawnsMax);
    add("SetEncounterSpawnsMax", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterSpawnsMax);
    add("GetEncounterSpawnsCurrent", R_INT, {R_OBJECT}, &routine::getEncounterSpawnsCurrent);
    add("SetEncounterSpawnsCurrent", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterSpawnsCurrent);
    add("GetModuleItemAcquired", R_OBJECT, {}, &routine::getModuleItemAcquired);
    add("GetModuleItemAcquiredFrom", R_OBJECT, {}, &routine::getModuleItemAcquiredFrom);
    add("SetCustomToken", R_VOID, {R_INT, R_STRING}, &routine::setCustomToken);
    add("GetHasFeat", R_INT, {R_INT, R_OBJECT}, &routine::getHasFeat);
    add("GetHasSkill", R_INT, {R_INT, R_OBJECT}, &routine::getHasSkill);
    add("ActionUseFeat", R_VOID, {R_INT, R_OBJECT}, &routine::actionUseFeat);
    add("ActionUseSkill", R_VOID, {R_INT, R_OBJECT, R_INT, R_OBJECT}, &routine::actionUseSkill);
    add("GetObjectSeen", R_INT, {R_OBJECT, R_OBJECT}, &routine::getObjectSeen);
    add("GetObjectHeard", R_INT, {R_OBJECT, R_OBJECT}, &routine::getObjectHeard);
    add("GetLastPlayerDied", R_OBJECT, {}, &routine::getLastPlayerDied);
    add("GetModuleItemLost", R_OBJECT, {}, &routine::getModuleItemLost);
    add("GetModuleItemLostBy", R_OBJECT, {}, &routine::getModuleItemLostBy);
    add("ActionDoCommand", R_VOID, {R_ACTION}, &routine::actionDoCommand);
    add("EventConversation", R_EVENT, {}, &routine::eventConversation);
    add("SetEncounterDifficulty", R_VOID, {R_INT, R_OBJECT}, &routine::setEncounterDifficulty);
    add("GetEncounterDifficulty", R_INT, {R_OBJECT}, &routine::getEncounterDifficulty);
    add("GetDistanceBetweenLocations", R_FLOAT, {R_LOCATION, R_LOCATION}, &routine::getDistanceBetweenLocations);
    add("GetReflexAdjustedDamage", R_INT, {R_INT, R_OBJECT, R_INT, R_INT, R_OBJECT}, &routine::getReflexAdjustedDamage);
    add("PlayAnimation", R_VOID, {R_INT, R_FLOAT, R_FLOAT}, &routine::playAnimation);
    add("TalentSpell", R_TALENT, {R_INT}, &routine::talentSpell);
    add("TalentFeat", R_TALENT, {R_INT}, &routine::talentFeat);
    add("TalentSkill", R_TALENT, {R_INT}, &routine::talentSkill);
    add("GetHasSpellEffect", R_INT, {R_INT, R_OBJECT}, &routine::getHasSpellEffect);
    add("GetEffectSpellId", R_INT, {R_EFFECT}, &routine::getEffectSpellId);
    add("GetCreatureHasTalent", R_INT, {R_TALENT, R_OBJECT}, &routine::getCreatureHasTalent);
    add("GetCreatureTalentRandom", R_TALENT, {R_INT, R_OBJECT, R_INT}, &routine::getCreatureTalentRandom);
    add("GetCreatureTalentBest", R_TALENT, {R_INT, R_INT, R_OBJECT, R_INT, R_INT, R_INT}, &routine::getCreatureTalentBest);
    add("ActionUseTalentOnObject", R_VOID, {R_TALENT, R_OBJECT}, &routine::actionUseTalentOnObject);
    add("ActionUseTalentAtLocation", R_VOID, {R_TALENT, R_LOCATION}, &routine::actionUseTalentAtLocation);
    add("GetGoldPieceValue", R_INT, {R_OBJECT}, &routine::getGoldPieceValue);
    add("GetIsPlayableRacialType", R_INT, {R_OBJECT}, &routine::getIsPlayableRacialType);
    add("JumpToLocation", R_VOID, {R_LOCATION}, &routine::jumpToLocation);
    add("EffectTemporaryHitpoints", R_EFFECT, {R_INT}, &routine::effectTemporaryHitpoints);
    add("GetSkillRank", R_INT, {R_INT, R_OBJECT}, &routine::getSkillRank);
    add("GetAttackTarget", R_OBJECT, {R_OBJECT}, &routine::getAttackTarget);
    add("GetLastAttackType", R_INT, {R_OBJECT}, &routine::getLastAttackType);
    add("GetLastAttackMode", R_INT, {R_OBJECT}, &routine::getLastAttackMode);
    add("GetDistanceBetween2D", R_FLOAT, {R_OBJECT, R_OBJECT}, &routine::getDistanceBetween2D);
    add("GetIsInCombat", R_INT, {R_OBJECT, R_INT}, &routine::getIsInCombat);
    add("GetLastAssociateCommand", R_INT, {R_OBJECT}, &routine::getLastAssociateCommand);
    add("GiveGoldToCreature", R_VOID, {R_OBJECT, R_INT}, &routine::giveGoldToCreature);
    add("SetIsDestroyable", R_VOID, {R_INT, R_INT, R_INT}, &routine::setIsDestroyable);
    add("SetLocked", R_VOID, {R_OBJECT, R_INT}, &routine::setLocked);
    add("GetLocked", R_INT, {R_OBJECT}, &routine::getLocked);
    add("GetClickingObject", R_OBJECT, {}, &routine::getClickingObject);
    add("SetAssociateListenPatterns", R_VOID, {R_OBJECT}, &routine::setAssociateListenPatterns);
    add("GetLastWeaponUsed", R_OBJECT, {R_OBJECT}, &routine::getLastWeaponUsed);
    add("ActionInteractObject", R_VOID, {R_OBJECT}, &routine::actionInteractObject);
    add("GetLastUsedBy", R_OBJECT, {}, &routine::getLastUsedBy);
    add("GetAbilityModifier", R_INT, {R_INT, R_OBJECT}, &routine::getAbilityModifier);
    add("GetIdentified", R_INT, {R_OBJECT}, &routine::getIdentified);
    add("SetIdentified", R_VOID, {R_OBJECT, R_INT}, &routine::setIdentified);
    add("GetDistanceBetweenLocations2D", R_FLOAT, {R_LOCATION, R_LOCATION}, &routine::getDistanceBetweenLocations2D);
    add("GetDistanceToObject2D", R_FLOAT, {R_OBJECT}, &routine::getDistanceToObject2D);
    add("GetBlockingDoor", R_OBJECT, {}, &routine::getBlockingDoor);
    add("GetIsDoorActionPossible", R_INT, {R_OBJECT, R_INT}, &routine::getIsDoorActionPossible);
    add("DoDoorAction", R_VOID, {R_OBJECT, R_INT}, &routine::doDoorAction);
    add("GetFirstItemInInventory", R_OBJECT, {R_OBJECT}, &routine::getFirstItemInInventory);
    add("GetNextItemInInventory", R_OBJECT, {R_OBJECT}, &routine::getNextItemInInventory);
    add("GetClassByPosition", R_INT, {R_INT, R_OBJECT}, &routine::getClassByPosition);
    add("GetLevelByPosition", R_INT, {R_INT, R_OBJECT}, &routine::getLevelByPosition);
    add("GetLevelByClass", R_INT, {R_INT, R_OBJECT}, &routine::getLevelByClass);
    add("GetDamageDealtByType", R_INT, {R_INT}, &routine::getDamageDealtByType);
    add("GetTotalDamageDealt", R_INT, {}, &routine::getTotalDamageDealt);
    add("GetLastDamager", R_OBJECT, {}, &routine::getLastDamager);
    add("GetLastDisarmed", R_OBJECT, {}, &routine::getLastDisarmed);
    add("GetLastDisturbed", R_OBJECT, {}, &routine::getLastDisturbed);
    add("GetLastLocked", R_OBJECT, {}, &routine::getLastLocked);
    add("GetLastUnlocked", R_OBJECT, {}, &routine::getLastUnlocked);
    add("EffectSkillIncrease", R_EFFECT, {R_INT, R_INT}, &routine::effectSkillIncrease);
    add("GetInventoryDisturbType", R_INT, {}, &routine::getInventoryDisturbType);
    add("GetInventoryDisturbItem", R_OBJECT, {}, &routine::getInventoryDisturbItem);
    add("ShowUpgradeScreen", R_VOID, {R_OBJECT, R_OBJECT, R_INT, R_INT, R_STRING}, &routine::showUpgradeScreen);
    add("VersusAlignmentEffect", R_EFFECT, {R_EFFECT, R_INT, R_INT}, &routine::versusAlignmentEffect);
    add("VersusRacialTypeEffect", R_EFFECT, {R_EFFECT, R_INT}, &routine::versusRacialTypeEffect);
    add("VersusTrapEffect", R_EFFECT, {R_EFFECT}, &routine::versusTrapEffect);
    add("GetGender", R_INT, {R_OBJECT}, &routine::getGender);
    add("GetIsTalentValid", R_INT, {R_TALENT}, &routine::getIsTalentValid);
    add("ActionMoveAwayFromLocation", R_VOID, {R_LOCATION, R_INT, R_FLOAT}, &routine::actionMoveAwayFromLocation);
    add("GetAttemptedAttackTarget", R_OBJECT, {}, &routine::getAttemptedAttackTarget);
    add("GetTypeFromTalent", R_INT, {R_TALENT}, &routine::getTypeFromTalent);
    add("GetIdFromTalent", R_INT, {R_TALENT}, &routine::getIdFromTalent);
    add("PlayPazaak", R_VOID, {R_INT, R_STRING, R_INT, R_INT, R_OBJECT}, &routine::playPazaak);
    add("GetLastPazaakResult", R_INT, {}, &routine::getLastPazaakResult);
    add("DisplayFeedBackText", R_VOID, {R_OBJECT, R_INT}, &routine::displayFeedBackText);
    add("AddJournalQuestEntry", R_VOID, {R_STRING, R_INT, R_INT}, &routine::addJournalQuestEntry);
    add("RemoveJournalQuestEntry", R_VOID, {R_STRING}, &routine::removeJournalQuestEntry);
    add("GetJournalEntry", R_INT, {R_STRING}, &routine::getJournalEntry);
    add("PlayRumblePattern", R_INT, {R_INT}, &routine::playRumblePattern);
    add("StopRumblePattern", R_INT, {R_INT}, &routine::stopRumblePattern);
    add("EffectDamageForcePoints", R_EFFECT, {R_INT}, &routine::effectDamageForcePoints);
    add("EffectHealForcePoints", R_EFFECT, {R_INT}, &routine::effectHealForcePoints);
    add("SendMessageToPC", R_VOID, {R_OBJECT, R_STRING}, &routine::sendMessageToPC);
    add("GetAttemptedSpellTarget", R_OBJECT, {}, &routine::getAttemptedSpellTarget);
    add("GetLastOpenedBy", R_OBJECT, {}, &routine::getLastOpenedBy);
    add("GetHasSpell", R_INT, {R_INT, R_OBJECT}, &routine::getHasSpell);
    add("OpenStore", R_VOID, {R_OBJECT, R_OBJECT, R_INT, R_INT}, &routine::openStore);
    add("ActionSurrenderToEnemies", R_VOID, {}, &routine::actionSurrenderToEnemies);
    add("GetFirstFactionMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getFirstFactionMember);
    add("GetNextFactionMember", R_OBJECT, {R_OBJECT, R_INT}, &routine::getNextFactionMember);
    add("ActionForceMoveToLocation", R_VOID, {R_LOCATION, R_INT, R_FLOAT}, &routine::actionForceMoveToLocation);
    add("ActionForceMoveToObject", R_VOID, {R_OBJECT, R_INT, R_FLOAT, R_FLOAT}, &routine::actionForceMoveToObject);
    add("GetJournalQuestExperience", R_INT, {R_STRING}, &routine::getJournalQuestExperience);
    add("JumpToObject", R_VOID, {R_OBJECT, R_INT}, &routine::jumpToObject);
    add("SetMapPinEnabled", R_VOID, {R_OBJECT, R_INT}, &routine::setMapPinEnabled);
    add("EffectHitPointChangeWhenDying", R_EFFECT, {R_FLOAT}, &routine::effectHitPointChangeWhenDying);
    add("PopUpGUIPanel", R_VOID, {R_OBJECT, R_INT}, &routine::popUpGUIPanel);
    add("AddMultiClass", R_VOID, {R_INT, R_OBJECT}, &routine::addMultiClass);
    add("GetIsLinkImmune", R_INT, {R_OBJECT, R_EFFECT}, &routine::getIsLinkImmune);
    add("EffectDroidStun", R_EFFECT, {}, &routine::effectDroidStun);
    add("EffectForcePushed", R_EFFECT, {}, &routine::effectForcePushed);
    add("GiveXPToCreature", R_VOID, {R_OBJECT, R_INT}, &routine::giveXPToCreature);
    add("SetXP", R_VOID, {R_OBJECT, R_INT}, &routine::setXP);
    add("GetXP", R_INT, {R_OBJECT}, &routine::getXP);
    add("IntToHexString", R_STRING, {R_INT}, &routine::intToHexString);
    add("GetBaseItemType", R_INT, {R_OBJECT}, &routine::getBaseItemType);
    add("GetItemHasItemProperty", R_INT, {R_OBJECT, R_INT}, &routine::getItemHasItemProperty);
    add("ActionEquipMostDamagingMelee", R_VOID, {R_OBJECT, R_INT}, &routine::actionEquipMostDamagingMelee);
    add("ActionEquipMostDamagingRanged", R_VOID, {R_OBJECT}, &routine::actionEquipMostDamagingRanged);
    add("GetItemACValue", R_INT, {R_OBJECT}, &routine::getItemACValue);
    add("EffectForceResisted", R_EFFECT, {R_OBJECT}, &routine::effectForceResisted);
    add("ExploreAreaForPlayer", R_VOID, {R_OBJECT, R_OBJECT}, &routine::exploreAreaForPlayer);
    add("ActionEquipMostEffectiveArmor", R_VOID, {}, &routine::actionEquipMostEffectiveArmor);
    add("GetIsDay", R_INT, {}, &routine::getIsDay);
    add("GetIsNight", R_INT, {}, &routine::getIsNight);
    add("GetIsDawn", R_INT, {}, &routine::getIsDawn);
    add("GetIsDusk", R_INT, {}, &routine::getIsDusk);
    add("GetIsEncounterCreature", R_INT, {R_OBJECT}, &routine::getIsEncounterCreature);
    add("GetLastPlayerDying", R_OBJECT, {}, &routine::getLastPlayerDying);
    add("GetStartingLocation", R_LOCATION, {}, &routine::getStartingLocation);
    add("ChangeToStandardFaction", R_VOID, {R_OBJECT, R_INT}, &routine::changeToStandardFaction);
    add("SoundObjectPlay", R_VOID, {R_OBJECT}, &routine::soundObjectPlay);
    add("SoundObjectStop", R_VOID, {R_OBJECT}, &routine::soundObjectStop);
    add("SoundObjectSetVolume", R_VOID, {R_OBJECT, R_INT}, &routine::soundObjectSetVolume);
    add("SoundObjectSetPosition", R_VOID, {R_OBJECT, R_VECTOR}, &routine::soundObjectSetPosition);
    add("SpeakOneLinerConversation", R_VOID, {R_STRING, R_OBJECT}, &routine::speakOneLinerConversation);
    add("GetGold", R_INT, {R_OBJECT}, &routine::getGold);
    add("GetLastRespawnButtonPresser", R_OBJECT, {}, &routine::getLastRespawnButtonPresser);
    add("EffectForceFizzle", R_EFFECT, {}, &routine::effectForceFizzle);
    add("SetLightsaberPowered", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT}, &routine::setLightsaberPowered);
    add("GetIsWeaponEffective", R_INT, {R_OBJECT, R_INT}, &routine::getIsWeaponEffective);
    add("GetLastSpellHarmful", R_INT, {}, &routine::getLastSpellHarmful);
    add("EventActivateItem", R_EVENT, {R_OBJECT, R_LOCATION, R_OBJECT}, &routine::eventActivateItem);
    add("MusicBackgroundPlay", R_VOID, {R_OBJECT}, &routine::musicBackgroundPlay);
    add("MusicBackgroundStop", R_VOID, {R_OBJECT}, &routine::musicBackgroundStop);
    add("MusicBackgroundSetDelay", R_VOID, {R_OBJECT, R_INT}, &routine::musicBackgroundSetDelay);
    add("MusicBackgroundChangeDay", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::musicBackgroundChangeDay);
    add("MusicBackgroundChangeNight", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::musicBackgroundChangeNight);
    add("MusicBattlePlay", R_VOID, {R_OBJECT}, &routine::musicBattlePlay);
    add("MusicBattleStop", R_VOID, {R_OBJECT}, &routine::musicBattleStop);
    add("MusicBattleChange", R_VOID, {R_OBJECT, R_INT}, &routine::musicBattleChange);
    add("AmbientSoundPlay", R_VOID, {R_OBJECT}, &routine::ambientSoundPlay);
    add("AmbientSoundStop", R_VOID, {R_OBJECT}, &routine::ambientSoundStop);
    add("AmbientSoundChangeDay", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundChangeDay);
    add("AmbientSoundChangeNight", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundChangeNight);
    add("GetLastKiller", R_OBJECT, {}, &routine::getLastKiller);
    add("GetSpellCastItem", R_OBJECT, {}, &routine::getSpellCastItem);
    add("GetItemActivated", R_OBJECT, {}, &routine::getItemActivated);
    add("GetItemActivator", R_OBJECT, {}, &routine::getItemActivator);
    add("GetItemActivatedTargetLocation", R_LOCATION, {}, &routine::getItemActivatedTargetLocation);
    add("GetItemActivatedTarget", R_OBJECT, {}, &routine::getItemActivatedTarget);
    add("GetIsOpen", R_INT, {R_OBJECT}, &routine::getIsOpen);
    add("TakeGoldFromCreature", R_VOID, {R_INT, R_OBJECT, R_INT}, &routine::takeGoldFromCreature);
    add("GetIsInConversation", R_INT, {R_OBJECT}, &routine::getIsInConversation);
    add("EffectAbilityDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAbilityDecrease);
    add("EffectAttackDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectAttackDecrease);
    add("EffectDamageDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageDecrease);
    add("EffectDamageImmunityDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectDamageImmunityDecrease);
    add("EffectACDecrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectACDecrease);
    add("EffectMovementSpeedDecrease", R_EFFECT, {R_INT}, &routine::effectMovementSpeedDecrease);
    add("EffectSavingThrowDecrease", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectSavingThrowDecrease);
    add("EffectSkillDecrease", R_EFFECT, {R_INT, R_INT}, &routine::effectSkillDecrease);
    add("EffectForceResistanceDecrease", R_EFFECT, {R_INT}, &routine::effectForceResistanceDecrease);
    add("GetPlotFlag", R_INT, {R_OBJECT}, &routine::getPlotFlag);
    add("SetPlotFlag", R_VOID, {R_OBJECT, R_INT}, &routine::setPlotFlag);
    add("EffectInvisibility", R_EFFECT, {R_INT}, &routine::effectInvisibility);
    add("EffectConcealment", R_EFFECT, {R_INT}, &routine::effectConcealment);
    add("EffectForceShield", R_EFFECT, {R_INT}, &routine::effectForceShield);
    add("EffectDispelMagicAll", R_EFFECT, {R_INT}, &routine::effectDispelMagicAll);
    add("SetDialogPlaceableCamera", R_VOID, {R_INT}, &routine::setDialogPlaceableCamera);
    add("GetSoloMode", R_INT, {}, &routine::getSoloMode);
    add("EffectDisguise", R_EFFECT, {R_INT}, &routine::effectDisguise);
    add("GetMaxStealthXP", R_INT, {}, &routine::getMaxStealthXP);
    add("EffectTrueSeeing", R_EFFECT, {}, &routine::effectTrueSeeing);
    add("EffectSeeInvisible", R_EFFECT, {}, &routine::effectSeeInvisible);
    add("EffectTimeStop", R_EFFECT, {}, &routine::effectTimeStop);
    add("SetMaxStealthXP", R_VOID, {R_INT}, &routine::setMaxStealthXP);
    add("EffectBlasterDeflectionIncrease", R_EFFECT, {R_INT}, &routine::effectBlasterDeflectionIncrease);
    add("EffectBlasterDeflectionDecrease", R_EFFECT, {R_INT}, &routine::effectBlasterDeflectionDecrease);
    add("EffectHorrified", R_EFFECT, {}, &routine::effectHorrified);
    add("EffectSpellLevelAbsorption", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectSpellLevelAbsorption);
    add("EffectDispelMagicBest", R_EFFECT, {R_INT}, &routine::effectDispelMagicBest);
    add("GetCurrentStealthXP", R_INT, {}, &routine::getCurrentStealthXP);
    add("GetNumStackedItems", R_INT, {R_OBJECT}, &routine::getNumStackedItems);
    add("SurrenderToEnemies", R_VOID, {}, &routine::surrenderToEnemies);
    add("EffectMissChance", R_EFFECT, {R_INT}, &routine::effectMissChance);
    add("SetCurrentStealthXP", R_VOID, {R_INT}, &routine::setCurrentStealthXP);
    add("GetCreatureSize", R_INT, {R_OBJECT}, &routine::getCreatureSize);
    add("AwardStealthXP", R_VOID, {R_OBJECT}, &routine::awardStealthXP);
    add("GetStealthXPEnabled", R_INT, {}, &routine::getStealthXPEnabled);
    add("SetStealthXPEnabled", R_VOID, {R_INT}, &routine::setStealthXPEnabled);
    add("ActionUnlockObject", R_VOID, {R_OBJECT}, &routine::actionUnlockObject);
    add("ActionLockObject", R_VOID, {R_OBJECT}, &routine::actionLockObject);
    add("EffectModifyAttacks", R_EFFECT, {R_INT}, &routine::effectModifyAttacks);
    add("GetLastTrapDetected", R_OBJECT, {R_OBJECT}, &routine::getLastTrapDetected);
    add("EffectDamageShield", R_EFFECT, {R_INT, R_INT, R_INT}, &routine::effectDamageShield);
    add("GetNearestTrapToObject", R_OBJECT, {R_OBJECT, R_INT}, &routine::getNearestTrapToObject);
    add("GetAttemptedMovementTarget", R_OBJECT, {}, &routine::getAttemptedMovementTarget);
    add("GetBlockingCreature", R_OBJECT, {R_OBJECT}, &routine::getBlockingCreature);
    add("GetFortitudeSavingThrow", R_INT, {R_OBJECT}, &routine::getFortitudeSavingThrow);
    add("GetWillSavingThrow", R_INT, {R_OBJECT}, &routine::getWillSavingThrow);
    add("GetReflexSavingThrow", R_INT, {R_OBJECT}, &routine::getReflexSavingThrow);
    add("GetChallengeRating", R_FLOAT, {R_OBJECT}, &routine::getChallengeRating);
    add("GetFoundEnemyCreature", R_OBJECT, {R_OBJECT}, &routine::getFoundEnemyCreature);
    add("GetMovementRate", R_INT, {R_OBJECT}, &routine::getMovementRate);
    add("GetSubRace", R_INT, {R_OBJECT}, &routine::getSubRace);
    add("GetStealthXPDecrement", R_INT, {}, &routine::getStealthXPDecrement);
    add("SetStealthXPDecrement", R_VOID, {R_INT}, &routine::setStealthXPDecrement);
    add("DuplicateHeadAppearance", R_VOID, {R_OBJECT, R_OBJECT}, &routine::duplicateHeadAppearance);
    add("ActionCastFakeSpellAtObject", R_VOID, {R_INT, R_OBJECT, R_INT}, &routine::actionCastFakeSpellAtObject);
    add("ActionCastFakeSpellAtLocation", R_VOID, {R_INT, R_LOCATION, R_INT}, &routine::actionCastFakeSpellAtLocation);
    add("CutsceneAttack", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT}, &routine::cutsceneAttack);
    add("SetCameraMode", R_VOID, {R_OBJECT, R_INT}, &routine::setCameraMode);
    add("SetLockOrientationInDialog", R_VOID, {R_OBJECT, R_INT}, &routine::setLockOrientationInDialog);
    add("SetLockHeadFollowInDialog", R_VOID, {R_OBJECT, R_INT}, &routine::setLockHeadFollowInDialog);
    add("CutsceneMove", R_VOID, {R_OBJECT, R_VECTOR, R_INT}, &routine::cutsceneMove);
    add("EnableVideoEffect", R_VOID, {R_INT}, &routine::enableVideoEffect);
    add("StartNewModule", R_VOID, {R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING, R_STRING}, &routine::startNewModule);
    add("DisableVideoEffect", R_VOID, {}, &routine::disableVideoEffect);
    add("GetWeaponRanged", R_INT, {R_OBJECT}, &routine::getWeaponRanged);
    add("DoSinglePlayerAutoSave", R_VOID, {}, &routine::doSinglePlayerAutoSave);
    add("GetGameDifficulty", R_INT, {}, &routine::getGameDifficulty);
    add("GetUserActionsPending", R_INT, {}, &routine::getUserActionsPending);
    add("RevealMap", R_VOID, {R_VECTOR, R_INT}, &routine::revealMap);
    add("SetTutorialWindowsEnabled", R_VOID, {R_INT}, &routine::setTutorialWindowsEnabled);
    add("ShowTutorialWindow", R_VOID, {R_INT}, &routine::showTutorialWindow);
    add("StartCreditSequence", R_VOID, {R_INT}, &routine::startCreditSequence);
    add("IsCreditSequenceInProgress", R_INT, {}, &routine::isCreditSequenceInProgress);

    add("SWMG_SetLateralAccelerationPerSecond", R_VOID, {R_FLOAT}, &routine::minigame::setLateralAccelerationPerSecond);
    add("SWMG_GetLateralAccelerationPerSecond", R_FLOAT, {}, &routine::minigame::getLateralAccelerationPerSecond);

    add("GetCurrentAction", R_INT, {R_OBJECT}, &routine::getCurrentAction);
    add("GetDifficultyModifier", R_FLOAT, {}, &routine::getDifficultyModifier);
    add("GetAppearanceType", R_INT, {R_OBJECT}, &routine::getAppearanceType);
    add("FloatingTextStrRefOnCreature", R_VOID, {R_INT, R_OBJECT, R_INT}, &routine::floatingTextStrRefOnCreature);
    add("FloatingTextStringOnCreature", R_VOID, {R_STRING, R_OBJECT, R_INT}, &routine::floatingTextStringOnCreature);
    add("GetTrapDisarmable", R_INT, {R_OBJECT}, &routine::getTrapDisarmable);
    add("GetTrapDetectable", R_INT, {R_OBJECT}, &routine::getTrapDetectable);
    add("GetTrapDetectedBy", R_INT, {R_OBJECT, R_OBJECT}, &routine::getTrapDetectedBy);
    add("GetTrapFlagged", R_INT, {R_OBJECT}, &routine::getTrapFlagged);
    add("GetTrapBaseType", R_INT, {R_OBJECT}, &routine::getTrapBaseType);
    add("GetTrapOneShot", R_INT, {R_OBJECT}, &routine::getTrapOneShot);
    add("GetTrapCreator", R_OBJECT, {R_OBJECT}, &routine::getTrapCreator);
    add("GetTrapKeyTag", R_STRING, {R_OBJECT}, &routine::getTrapKeyTag);
    add("GetTrapDisarmDC", R_INT, {R_OBJECT}, &routine::getTrapDisarmDC);
    add("GetTrapDetectDC", R_INT, {R_OBJECT}, &routine::getTrapDetectDC);
    add("GetLockKeyRequired", R_INT, {R_OBJECT}, &routine::getLockKeyRequired);
    add("GetLockKeyTag", R_INT, {R_OBJECT}, &routine::getLockKeyTag);
    add("GetLockLockable", R_INT, {R_OBJECT}, &routine::getLockLockable);
    add("GetLockUnlockDC", R_INT, {R_OBJECT}, &routine::getLockUnlockDC);
    add("GetLockLockDC", R_INT, {R_OBJECT}, &routine::getLockLockDC);
    add("GetPCLevellingUp", R_OBJECT, {}, &routine::getPCLevellingUp);
    add("GetHasFeatEffect", R_INT, {R_INT, R_OBJECT}, &routine::getHasFeatEffect);
    add("SetPlaceableIllumination", R_VOID, {R_OBJECT, R_INT}, &routine::setPlaceableIllumination);
    add("GetPlaceableIllumination", R_INT, {R_OBJECT}, &routine::getPlaceableIllumination);
    add("GetIsPlaceableObjectActionPossible", R_INT, {R_OBJECT, R_INT}, &routine::getIsPlaceableObjectActionPossible);
    add("DoPlaceableObjectAction", R_VOID, {R_OBJECT, R_INT}, &routine::doPlaceableObjectAction);
    add("GetFirstPC", R_OBJECT, {}, &routine::getFirstPC);
    add("GetNextPC", R_OBJECT, {}, &routine::getNextPC);
    add("SetTrapDetectedBy", R_INT, {R_OBJECT, R_OBJECT}, &routine::setTrapDetectedBy);
    add("GetIsTrapped", R_INT, {R_OBJECT}, &routine::getIsTrapped);
    add("SetEffectIcon", R_EFFECT, {R_EFFECT, R_INT}, &routine::setEffectIcon);
    add("FaceObjectAwayFromObject", R_VOID, {R_OBJECT, R_OBJECT}, &routine::faceObjectAwayFromObject);
    add("PopUpDeathGUIPanel", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT, R_STRING}, &routine::popUpDeathGUIPanel);
    add("SetTrapDisabled", R_VOID, {R_OBJECT}, &routine::setTrapDisabled);
    add("GetLastHostileActor", R_OBJECT, {R_OBJECT}, &routine::getLastHostileActor);
    add("ExportAllCharacters", R_VOID, {}, &routine::exportAllCharacters);
    add("MusicBackgroundGetDayTrack", R_INT, {R_OBJECT}, &routine::musicBackgroundGetDayTrack);
    add("MusicBackgroundGetNightTrack", R_INT, {R_OBJECT}, &routine::musicBackgroundGetNightTrack);
    add("WriteTimestampedLogEntry", R_VOID, {R_STRING}, &routine::writeTimestampedLogEntry);
    add("GetModuleName", R_STRING, {}, &routine::getModuleName);
    add("GetFactionLeader", R_OBJECT, {R_OBJECT}, &routine::getFactionLeader);

    add("SWMG_SetSpeedBlurEffect", R_VOID, {R_INT, R_FLOAT}, &routine::minigame::setSpeedBlurEffect);

    add("EndGame", R_VOID, {R_INT}, &routine::endGame);
    add("GetRunScriptVar", R_INT, {}, &routine::getRunScriptVar);
    add("GetCreatureMovmentType", R_INT, {R_OBJECT}, &routine::getCreatureMovmentType);
    add("AmbientSoundSetDayVolume", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundSetDayVolume);
    add("AmbientSoundSetNightVolume", R_VOID, {R_OBJECT, R_INT}, &routine::ambientSoundSetNightVolume);
    add("MusicBackgroundGetBattleTrack", R_INT, {R_OBJECT}, &routine::musicBackgroundGetBattleTrack);
    add("GetHasInventory", R_INT, {R_OBJECT}, &routine::getHasInventory);
    add("GetStrRefSoundDuration", R_FLOAT, {R_INT}, &routine::getStrRefSoundDuration);
    add("AddToParty", R_VOID, {R_OBJECT, R_OBJECT}, &routine::addToParty);
    add("RemoveFromParty", R_VOID, {R_OBJECT}, &routine::removeFromParty);
    add("AddPartyMember", R_INT, {R_INT, R_OBJECT}, &routine::addPartyMember);
    add("RemovePartyMember", R_INT, {R_INT}, &routine::removePartyMember);
    add("IsObjectPartyMember", R_INT, {R_OBJECT}, &routine::isObjectPartyMember);
    add("GetPartyMemberByIndex", R_OBJECT, {R_INT}, &routine::getPartyMemberByIndex);
    add("GetGlobalBoolean", R_INT, {R_STRING}, &routine::getGlobalBoolean);
    add("SetGlobalBoolean", R_VOID, {R_STRING, R_INT}, &routine::setGlobalBoolean);
    add("GetGlobalNumber", R_INT, {R_STRING}, &routine::getGlobalNumber);
    add("SetGlobalNumber", R_VOID, {R_STRING, R_INT}, &routine::setGlobalNumber);
    add("AurPostString", R_VOID, {R_STRING, R_INT, R_INT, R_FLOAT}, &routine::aurPostString);

    add("SWMG_GetLastEvent", R_STRING, {}, &routine::minigame::getLastEvent);
    add("SWMG_GetLastEventModelName", R_STRING, {}, &routine::minigame::getLastEventModelName);
    add("SWMG_GetObjectByName", R_OBJECT, {R_STRING}, &routine::minigame::getObjectByName);
    add("SWMG_PlayAnimation", R_VOID, {R_OBJECT, R_STRING, R_INT, R_INT, R_INT}, &routine::minigame::playAnimation);
    add("SWMG_GetLastBulletHitDamage", R_INT, {}, &routine::minigame::getLastBulletHitDamage);
    add("SWMG_GetLastBulletHitTarget", R_INT, {}, &routine::minigame::getLastBulletHitTarget);
    add("SWMG_GetLastBulletHitShooter", R_OBJECT, {}, &routine::minigame::getLastBulletHitShooter);
    add("SWMG_AdjustFollowerHitPoints", R_INT, {R_OBJECT, R_INT, R_INT}, &routine::minigame::adjustFollowerHitPoints);
    add("SWMG_OnBulletHit", R_VOID, {}, &routine::minigame::onBulletHit);
    add("SWMG_OnObstacleHit", R_VOID, {}, &routine::minigame::onObstacleHit);
    add("SWMG_GetLastFollowerHit", R_OBJECT, {}, &routine::minigame::getLastFollowerHit);
    add("SWMG_GetLastObstacleHit", R_OBJECT, {}, &routine::minigame::getLastObstacleHit);
    add("SWMG_GetLastBulletFiredDamage", R_INT, {}, &routine::minigame::getLastBulletFiredDamage);
    add("SWMG_GetLastBulletFiredTarget", R_INT, {}, &routine::minigame::getLastBulletFiredTarget);
    add("SWMG_GetObjectName", R_STRING, {R_OBJECT}, &routine::minigame::getObjectName);
    add("SWMG_OnDeath", R_VOID, {}, &routine::minigame::onDeath);
    add("SWMG_IsFollower", R_INT, {R_OBJECT}, &routine::minigame::isFollower);
    add("SWMG_IsPlayer", R_INT, {R_OBJECT}, &routine::minigame::isPlayer);
    add("SWMG_IsEnemy", R_INT, {R_OBJECT}, &routine::minigame::isEnemy);
    add("SWMG_IsTrigger", R_INT, {R_OBJECT}, &routine::minigame::isTrigger);
    add("SWMG_IsObstacle", R_INT, {R_OBJECT}, &routine::minigame::isObstacle);
    add("SWMG_SetFollowerHitPoints", R_VOID, {R_OBJECT, R_INT}, &routine::minigame::setFollowerHitPoints);
    add("SWMG_OnDamage", R_VOID, {}, &routine::minigame::onDamage);
    add("SWMG_GetLastHPChange", R_INT, {}, &routine::minigame::getLastHPChange);
    add("SWMG_RemoveAnimation", R_VOID, {R_OBJECT, R_STRING}, &routine::minigame::removeAnimation);
    add("SWMG_GetCameraNearClip", R_FLOAT, {}, &routine::minigame::getCameraNearClip);
    add("SWMG_GetCameraFarClip", R_FLOAT, {}, &routine::minigame::getCameraFarClip);
    add("SWMG_SetCameraClip", R_VOID, {R_FLOAT, R_FLOAT}, &routine::minigame::setCameraClip);
    add("SWMG_GetPlayer", R_OBJECT, {}, &routine::minigame::getPlayer);
    add("SWMG_GetEnemyCount", R_INT, {}, &routine::minigame::getEnemyCount);
    add("SWMG_GetEnemy", R_OBJECT, {R_INT}, &routine::minigame::getEnemy);
    add("SWMG_GetObstacleCount", R_INT, {}, &routine::minigame::testWalkCount);
    add("SWMG_GetObstacle", R_OBJECT, {R_INT}, &routine::minigame::testWalk);
    add("SWMG_GetHitPoints", R_INT, {R_OBJECT}, &routine::minigame::getHitPoints);
    add("SWMG_GetMaxHitPoints", R_INT, {R_OBJECT}, &routine::minigame::getMaxHitPoints);
    add("SWMG_SetMaxHitPoints", R_VOID, {R_OBJECT, R_INT}, &routine::minigame::setMaxHitPoints);
    add("SWMG_GetSphereRadius", R_FLOAT, {R_OBJECT}, &routine::minigame::getSphereRadius);
    add("SWMG_SetSphereRadius", R_VOID, {R_OBJECT, R_FLOAT}, &routine::minigame::setSphereRadius);
    add("SWMG_GetNumLoops", R_INT, {R_OBJECT}, &routine::minigame::getNumLoops);
    add("SWMG_SetNumLoops", R_VOID, {R_OBJECT, R_INT}, &routine::minigame::setNumLoops);
    add("SWMG_GetPosition", R_VECTOR, {R_OBJECT}, &routine::minigame::getPosition);
    add("SWMG_GetGunBankCount", R_INT, {R_OBJECT}, &routine::minigame::getGunBankCount);
    add("SWMG_GetGunBankBulletModel", R_STRING, {R_OBJECT, R_INT}, &routine::minigame::getGunBankBulletModel);
    add("SWMG_GetGunBankGunModel", R_STRING, {R_OBJECT, R_INT}, &routine::minigame::getGunBankGunModel);
    add("SWMG_GetGunBankDamage", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankDamage);
    add("SWMG_GetGunBankTimeBetweenShots", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankTimeBetweenShots);
    add("SWMG_GetGunBankLifespan", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankLifespan);
    add("SWMG_GetGunBankSpeed", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankSpeed);
    add("SWMG_GetGunBankTarget", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankTarget);
    add("SWMG_SetGunBankBulletModel", R_VOID, {R_OBJECT, R_INT, R_STRING}, &routine::minigame::setGunBankBulletModel);
    add("SWMG_SetGunBankGunModel", R_VOID, {R_OBJECT, R_INT, R_STRING}, &routine::minigame::setGunBankGunModel);
    add("SWMG_SetGunBankDamage", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setGunBankDamage);
    add("SWMG_SetGunBankTimeBetweenShots", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankTimeBetweenShots);
    add("SWMG_SetGunBankLifespan", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankLifespan);
    add("SWMG_SetGunBankSpeed", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankSpeed);
    add("SWMG_SetGunBankTarget", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setGunBankTarget);
    add("SWMG_GetLastBulletHitPart", R_STRING, {}, &routine::minigame::getLastBulletHitPart);
    add("SWMG_IsGunBankTargetting", R_INT, {R_OBJECT, R_INT}, &routine::minigame::isGunBankTargetting);
    add("SWMG_GetPlayerOffset", R_VECTOR, {}, &routine::minigame::getPlayerOffset);
    add("SWMG_GetPlayerInvincibility", R_FLOAT, {}, &routine::minigame::getPlayerInvincibility);
    add("SWMG_GetPlayerSpeed", R_FLOAT, {}, &routine::minigame::getPlayerSpeed);
    add("SWMG_GetPlayerMinSpeed", R_FLOAT, {}, &routine::minigame::getPlayerMinSpeed);
    add("SWMG_GetPlayerAccelerationPerSecond", R_FLOAT, {}, &routine::minigame::getPlayerAccelerationPerSecond);
    add("SWMG_GetPlayerTunnelPos", R_VECTOR, {}, &routine::minigame::getPlayerTunnelPos);
    add("SWMG_SetPlayerOffset", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerOffset);
    add("SWMG_SetPlayerInvincibility", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerInvincibility);
    add("SWMG_SetPlayerSpeed", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerSpeed);
    add("SWMG_SetPlayerMinSpeed", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerMinSpeed);
    add("SWMG_SetPlayerAccelerationPerSecond", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerAccelerationPerSecond);
    add("SWMG_SetPlayerTunnelPos", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerTunnelPos);
    add("SWMG_GetPlayerTunnelNeg", R_VECTOR, {}, &routine::minigame::getPlayerTunnelNeg);
    add("SWMG_SetPlayerTunnelNeg", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerTunnelNeg);
    add("SWMG_GetPlayerOrigin", R_VECTOR, {}, &routine::minigame::getPlayerOrigin);
    add("SWMG_SetPlayerOrigin", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerOrigin);
    add("SWMG_GetGunBankHorizontalSpread", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankHorizontalSpread);
    add("SWMG_GetGunBankVerticalSpread", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankVerticalSpread);
    add("SWMG_GetGunBankSensingRadius", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankSensingRadius);
    add("SWMG_GetGunBankInaccuracy", R_FLOAT, {R_OBJECT, R_INT}, &routine::minigame::getGunBankInaccuracy);
    add("SWMG_SetGunBankHorizontalSpread", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankHorizontalSpread);
    add("SWMG_SetGunBankVerticalSpread", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankVerticalSpread);
    add("SWMG_SetGunBankSensingRadius", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankSensingRadius);
    add("SWMG_SetGunBankInaccuracy", R_VOID, {R_OBJECT, R_INT, R_FLOAT}, &routine::minigame::setGunBankInaccuracy);
    add("SWMG_GetIsInvulnerable", R_INT, {R_OBJECT}, &routine::minigame::getIsInvulnerable);
    add("SWMG_StartInvulnerability", R_VOID, {R_OBJECT}, &routine::minigame::startInvulnerability);
    add("SWMG_GetPlayerMaxSpeed", R_FLOAT, {}, &routine::minigame::getPlayerMaxSpeed);
    add("SWMG_SetPlayerMaxSpeed", R_VOID, {R_FLOAT}, &routine::minigame::setPlayerMaxSpeed);

    add("AddJournalWorldEntry", R_VOID, {R_INT, R_STRING, R_STRING}, &routine::addJournalWorldEntry);
    add("AddJournalWorldEntryStrref", R_VOID, {R_INT, R_INT}, &routine::addJournalWorldEntryStrref);
    add("BarkString", R_VOID, {R_OBJECT, R_INT, R_INT, R_INT}, &routine::barkString);
    add("DeleteJournalWorldAllEntries", R_VOID, {}, &routine::deleteJournalWorldAllEntries);
    add("DeleteJournalWorldEntry", R_VOID, {R_INT}, &routine::deleteJournalWorldEntry);
    add("DeleteJournalWorldEntryStrref", R_VOID, {R_INT}, &routine::deleteJournalWorldEntryStrref);
    add("EffectForceDrain", R_EFFECT, {R_INT}, &routine::effectForceDrain);
    add("EffectPsychicStatic", R_EFFECT, {}, &routine::effectPsychicStatic);
    add("PlayVisualAreaEffect", R_VOID, {R_INT, R_LOCATION}, &routine::playVisualAreaEffect);
    add("SetJournalQuestEntryPicture", R_VOID, {R_STRING, R_OBJECT, R_INT, R_INT, R_INT}, &routine::setJournalQuestEntryPicture);
    add("GetLocalBoolean", R_INT, {R_OBJECT, R_INT}, &routine::getLocalBoolean);
    add("SetLocalBoolean", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::setLocalBoolean);
    add("GetLocalNumber", R_INT, {R_OBJECT, R_INT}, &routine::getLocalNumber);
    add("SetLocalNumber", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::setLocalNumber);

    add("SWMG_GetSoundFrequency", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getSoundFrequency);
    add("SWMG_SetSoundFrequency", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setSoundFrequency);
    add("SWMG_GetSoundFrequencyIsRandom", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getSoundFrequencyIsRandom);
    add("SWMG_SetSoundFrequencyIsRandom", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setSoundFrequencyIsRandom);
    add("SWMG_GetSoundVolume", R_INT, {R_OBJECT, R_INT}, &routine::minigame::getSoundVolume);
    add("SWMG_SetSoundVolume", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::minigame::setSoundVolume);

    add("SoundObjectGetPitchVariance", R_FLOAT, {R_OBJECT}, &routine::soundObjectGetPitchVariance);
    add("SoundObjectSetPitchVariance", R_VOID, {R_OBJECT, R_FLOAT}, &routine::soundObjectSetPitchVariance);
    add("SoundObjectGetVolume", R_INT, {R_OBJECT}, &routine::soundObjectGetVolume);
    add("GetGlobalLocation", R_LOCATION, {R_STRING}, &routine::getGlobalLocation);
    add("SetGlobalLocation", R_VOID, {R_STRING, R_LOCATION}, &routine::setGlobalLocation);
    add("AddAvailableNPCByObject", R_INT, {R_INT, R_OBJECT}, &routine::addAvailableNPCByObject);
    add("RemoveAvailableNPC", R_INT, {R_INT}, &routine::removeAvailableNPC);
    add("IsAvailableCreature", R_INT, {R_INT}, &routine::isAvailableCreature);
    add("AddAvailableNPCByTemplate", R_INT, {R_INT, R_STRING}, &routine::addAvailableNPCByTemplate);
    add("SpawnAvailableNPC", R_OBJECT, {R_INT, R_LOCATION}, &routine::spawnAvailableNPC);
    add("IsNPCPartyMember", R_INT, {R_INT}, &routine::isNPCPartyMember);
    add("ActionBarkString", R_VOID, {R_INT}, &routine::actionBarkString);
    add("GetIsConversationActive", R_INT, {}, &routine::getIsConversationActive);
    add("EffectLightsaberThrow", R_EFFECT, {R_OBJECT, R_OBJECT, R_OBJECT, R_INT}, &routine::effectLightsaberThrow);
    add("EffectWhirlWind", R_EFFECT, {}, &routine::effectWhirlWind);
    add("GetPartyAIStyle", R_INT, {}, &routine::getPartyAIStyle);
    add("GetNPCAIStyle", R_INT, {R_OBJECT}, &routine::getNPCAIStyle);
    add("SetPartyAIStyle", R_VOID, {R_INT}, &routine::setPartyAIStyle);
    add("SetNPCAIStyle", R_VOID, {R_OBJECT, R_INT}, &routine::setNPCAIStyle);
    add("SetNPCSelectability", R_VOID, {R_INT, R_INT}, &routine::setNPCSelectability);
    add("GetNPCSelectability", R_INT, {R_INT}, &routine::getNPCSelectability);
    add("ClearAllEffects", R_VOID, {}, &routine::clearAllEffects);
    add("GetLastConversation", R_STRING, {}, &routine::getLastConversation);
    add("ShowPartySelectionGUI", R_VOID, {R_STRING, R_INT, R_INT, R_INT}, &routine::showPartySelectionGUI);
    add("GetStandardFaction", R_INT, {R_OBJECT}, &routine::getStandardFaction);
    add("GivePlotXP", R_VOID, {R_STRING, R_INT}, &routine::givePlotXP);
    add("GetMinOneHP", R_INT, {R_OBJECT}, &routine::getMinOneHP);
    add("SetMinOneHP", R_VOID, {R_OBJECT, R_INT}, &routine::setMinOneHP);

    add("SWMG_GetPlayerTunnelInfinite", R_VECTOR, {}, &routine::minigame::getPlayerTunnelInfinite);
    add("SWMG_SetPlayerTunnelInfinite", R_VOID, {R_VECTOR}, &routine::minigame::setPlayerTunnelInfinite);

    add("SetGlobalFadeIn", R_VOID, {R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT}, &routine::setGlobalFadeIn);
    add("SetGlobalFadeOut", R_VOID, {R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT, R_FLOAT}, &routine::setGlobalFadeOut);
    add("GetLastHostileTarget", R_OBJECT, {R_OBJECT}, &routine::getLastHostileTarget);
    add("GetLastAttackAction", R_INT, {R_OBJECT}, &routine::getLastAttackAction);
    add("GetLastForcePowerUsed", R_INT, {R_OBJECT}, &routine::getLastForcePowerUsed);
    add("GetLastCombatFeatUsed", R_INT, {R_OBJECT}, &routine::getLastCombatFeatUsed);
    add("GetLastAttackResult", R_INT, {R_OBJECT}, &routine::getLastAttackResult);
    add("GetWasForcePowerSuccessful", R_INT, {R_OBJECT}, &routine::getWasForcePowerSuccessful);
    add("GetFirstAttacker", R_OBJECT, {R_OBJECT}, &routine::getFirstAttacker);
    add("GetNextAttacker", R_OBJECT, {R_OBJECT}, &routine::getNextAttacker);
    add("SetFormation", R_VOID, {R_OBJECT, R_OBJECT, R_INT, R_INT}, &routine::setFormation);
    add("ActionFollowLeader", R_VOID, {}, &routine::actionFollowLeader);
    add("SetForcePowerUnsuccessful", R_VOID, {R_INT, R_OBJECT}, &routine::setForcePowerUnsuccessful);
    add("GetIsDebilitated", R_INT, {R_OBJECT}, &routine::getIsDebilitated);
    add("PlayMovie", R_VOID, {R_STRING, R_INT}, &routine::playMovie);
    add("SaveNPCState", R_VOID, {R_INT}, &routine::saveNPCState);
    add("GetCategoryFromTalent", R_INT, {R_TALENT}, &routine::getCategoryFromTalent);
    add("SurrenderByFaction", R_VOID, {R_INT, R_INT}, &routine::surrenderByFaction);
    add("ChangeFactionByFaction", R_VOID, {R_INT, R_INT}, &routine::changeFactionByFaction);
    add("PlayRoomAnimation", R_VOID, {R_STRING, R_INT}, &routine::playRoomAnimation);
    add("ShowGalaxyMap", R_VOID, {R_INT}, &routine::showGalaxyMap);
    add("SetPlanetSelectable", R_VOID, {R_INT, R_INT}, &routine::setPlanetSelectable);
    add("GetPlanetSelectable", R_INT, {R_INT}, &routine::getPlanetSelectable);
    add("SetPlanetAvailable", R_VOID, {R_INT, R_INT}, &routine::setPlanetAvailable);
    add("GetPlanetAvailable", R_INT, {R_INT}, &routine::getPlanetAvailable);
    add("GetSelectedPlanet", R_INT, {}, &routine::getSelectedPlanet);
    add("SoundObjectFadeAndStop", R_VOID, {R_OBJECT, R_FLOAT}, &routine::soundObjectFadeAndStop);
    add("SetAreaFogColor", R_VOID, {R_OBJECT, R_FLOAT, R_FLOAT, R_FLOAT}, &routine::setAreaFogColor);
    add("ChangeItemCost", R_VOID, {R_STRING, R_FLOAT}, &routine::changeItemCost);
    add("GetIsLiveContentAvailable", R_INT, {R_INT}, &routine::getIsLiveContentAvailable);
    add("ResetDialogState", R_VOID, {}, &routine::resetDialogState);
    add("SetGoodEvilValue", R_VOID, {R_OBJECT, R_INT}, &routine::setGoodEvilValue);
    add("GetIsPoisoned", R_INT, {R_OBJECT}, &routine::getIsPoisoned);
    add("GetSpellTarget", R_OBJECT, {R_OBJECT}, &routine::getSpellTarget);
    add("SetSoloMode", R_VOID, {R_INT}, &routine::setSoloMode);
    add("EffectCutSceneHorrified", R_EFFECT, {}, &routine::effectCutSceneHorrified);
    add("EffectCutSceneParalyze", R_EFFECT, {}, &routine::effectCutSceneParalyze);
    add("EffectCutSceneStunned", R_EFFECT, {}, &routine::effectCutSceneStunned);
    add("CancelPostDialogCharacterSwitch", R_VOID, {}, &routine::cancelPostDialogCharacterSwitch);
    add("SetMaxHitPoints", R_VOID, {R_OBJECT, R_INT}, &routine::setMaxHitPoints);
    add("NoClicksFor", R_VOID, {R_FLOAT}, &routine::noClicksFor);
    add("HoldWorldFadeInForDialog", R_VOID, {}, &routine::holdWorldFadeInForDialog);
    add("ShipBuild", R_INT, {}, &routine::shipBuild);
    add("SurrenderRetainBuffs", R_VOID, {}, &routine::surrenderRetainBuffs);
    add("SuppressStatusSummaryEntry", R_VOID, {R_INT}, &routine::suppressStatusSummaryEntry);
    add("GetCheatCode", R_INT, {R_INT}, &routine::getCheatCode);
    add("SetMusicVolume", R_VOID, {R_FLOAT}, &routine::setMusicVolume);
    add("CreateItemOnFloor", R_OBJECT, {R_STRING, R_LOCATION, R_INT}, &routine::createItemOnFloor);
    add("SetAvailableNPCId", R_VOID, {R_INT, R_OBJECT}, &routine::setAvailableNPCId);
    add("GetScriptParameter", R_INT, {R_INT}, &routine::getScriptParameter);
    add("SetFadeUntilScript", R_VOID, {}, &routine::setFadeUntilScript);
    add("EffectForceBody", R_EFFECT, {R_INT}, &routine::effectForceBody);
    add("GetItemComponent", R_INT, {}, &routine::getItemComponent);
    add("GetItemComponentPieceValue", R_INT, {}, &routine::getItemComponentPieceValue);
    add("ShowChemicalUpgradeScreen", R_VOID, {R_OBJECT}, &routine::showChemicalUpgradeScreen);
    add("GetChemicals", R_INT, {}, &routine::getChemicals);
    add("GetChemicalPieceValue", R_INT, {}, &routine::getChemicalPieceValue);
    add("GetSpellForcePointCost", R_INT, {}, &routine::getSpellForcePointCost);
    add("EffectFury", R_EFFECT, {}, &routine::effectFury);
    add("EffectBlind", R_EFFECT, {}, &routine::effectBlind);
    add("EffectFPRegenModifier", R_EFFECT, {R_INT}, &routine::effectFPRegenModifier);
    add("EffectVPRegenModifier", R_EFFECT, {R_INT}, &routine::effectVPRegenModifier);
    add("EffectCrush", R_EFFECT, {}, &routine::effectCrush);

    add("SWMG_GetSwoopUpgrade", R_INT, {R_INT}, &routine::minigame::getSwoopUpgrade);

    add("GetFeatAcquired", R_INT, {R_INT, R_OBJECT}, &routine::getFeatAcquired);
    add("GetSpellAcquired", R_INT, {R_INT, R_OBJECT}, &routine::getSpellAcquired);
    add("ShowSwoopUpgradeScreen", R_VOID, {}, &routine::showSwoopUpgradeScreen);
    add("GrantFeat", R_VOID, {R_INT, R_OBJECT}, &routine::grantFeat);
    add("GrantSpell", R_VOID, {R_INT, R_OBJECT}, &routine::grantSpell);
    add("SpawnMine", R_VOID, {R_INT, R_LOCATION, R_INT, R_INT, R_OBJECT}, &routine::spawnMine);

    add("SWMG_GetTrackPosition", R_VECTOR, {R_OBJECT}, &routine::minigame::getTrackPosition);
    add("SWMG_SetFollowerPosition", R_VECTOR, {R_VECTOR}, &routine::minigame::setFollowerPosition);

    add("SetFakeCombatState", R_VOID, {R_OBJECT, R_INT}, &routine::setFakeCombatState);

    add("SWMG_DestroyMiniGameObject", R_VOID, {R_OBJECT}, &routine::minigame::destroyMiniGameObject);

    add("GetOwnerDemolitionsSkill", R_INT, {R_OBJECT}, &routine::getOwnerDemolitionsSkill);
    add("SetOrientOnClick", R_VOID, {R_OBJECT, R_INT}, &routine::setOrientOnClick);
    add("GetInfluence", R_INT, {R_INT}, &routine::getInfluence);
    add("SetInfluence", R_VOID, {R_INT, R_INT}, &routine::setInfluence);
    add("ModifyInfluence", R_VOID, {R_INT, R_INT}, &routine::modifyInfluence);
    add("GetRacialSubType", R_INT, {R_OBJECT}, &routine::getRacialSubType);
    add("IncrementGlobalNumber", R_VOID, {R_STRING, R_INT}, &routine::incrementGlobalNumber);
    add("DecrementGlobalNumber", R_VOID, {R_STRING, R_INT}, &routine::decrementGlobalNumber);
    add("SetBonusForcePoints", R_VOID, {R_OBJECT, R_INT}, &routine::setBonusForcePoints);
    add("AddBonusForcePoints", R_VOID, {R_OBJECT, R_INT}, &routine::addBonusForcePoints);
    add("GetBonusForcePoints", R_VOID, {R_OBJECT}, &routine::getBonusForcePoints);

    add("SWMG_SetJumpSpeed", R_VOID, {R_FLOAT}, &routine::minigame::setJumpSpeed);

    add("IsMoviePlaying", R_INT, {}, &routine::isMoviePlaying);
    add("QueueMovie", R_VOID, {R_STRING, R_INT}, &routine::queueMovie);
    add("PlayMovieQueue", R_VOID, {R_INT}, &routine::playMovieQueue);
    add("YavinHackDoorClose", R_VOID, {R_OBJECT}, &routine::yavinHackCloseDoor);
    add("EffectDroidConfused", R_EFFECT, {}, &routine::effectDroidConfused);
    add("IsStealthed", R_INT, {R_OBJECT}, &routine::isStealthed);
    add("IsMeditating", R_INT, {R_OBJECT}, &routine::isMeditating);
    add("IsInTotalDefense", R_INT, {R_OBJECT}, &routine::isInTotalDefense);
    add("SetHealTarget", R_VOID, {R_OBJECT, R_OBJECT}, &routine::setHealTarget);
    add("GetHealTarget", R_OBJECT, {R_OBJECT}, &routine::getHealTarget);
    add("GetRandomDestination", R_VECTOR, {R_OBJECT, R_INT}, &routine::getRandomDestination);
    add("IsFormActive", R_INT, {R_OBJECT, R_INT}, &routine::isFormActive);
    add("GetSpellFormMask", R_INT, {R_INT}, &routine::getSpellFormMask);
    add("GetSpellBaseForcePointCost", R_INT, {R_INT}, &routine::getSpellBaseForcePointCost);
    add("SetKeepStealthInDialog", R_VOID, {R_INT}, &routine::setKeepStealthInDialog);
    add("HasLineOfSight", R_INT, {R_VECTOR, R_VECTOR, R_OBJECT, R_OBJECT}, &routine::hasLineOfSight);
    add("ShowDemoScreen", R_INT, {R_STRING, R_INT, R_INT, R_INT, R_INT}, &routine::showDemoScreen);
    add("ForceHeartbeat", R_VOID, {R_OBJECT}, &routine::forceHeartbeat);
    add("EffectForceSight", R_EFFECT, {}, &routine::effectForceSight);
    add("IsRunning", R_INT, {R_OBJECT}, &routine::isRunning);

    add("SWMG_PlayerApplyForce", R_VOID, {R_VECTOR}, &routine::minigame::playerApplyForce);

    add("SetForfeitConditions", R_VOID, {R_INT}, &routine::setForfeitConditions);
    add("GetLastForfeitViolation", R_INT, {}, &routine::getLastForfeitViolation);
    add("ModifyReflexSavingThrowBase", R_VOID, {R_OBJECT, R_INT}, &routine::modifyReflexSavingThrowBase);
    add("ModifyFortitudeSavingThrowBase", R_VOID, {R_OBJECT, R_INT}, &routine::modifyFortitudeSavingThrowBase);
    add("ModifyWillSavingThrowBase", R_VOID, {R_OBJECT, R_INT}, &routine::modifyWillSavingThrowBase);
    add("GetScriptStringParameter", R_STRING, {}, &routine::getScriptStringParameter);
    add("GetObjectPersonalSpace", R_FLOAT, {R_OBJECT}, &routine::getObjectPersonalSpace);
    add("AdjustCreatureAttributes", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::adjustCreatureAttributes);
    add("SetCreatureAILevel", R_VOID, {R_OBJECT, R_INT}, &routine::setCreatureAILevel);
    add("ResetCreatureAILevel", R_VOID, {R_OBJECT}, &routine::resetCreatureAILevel);
    add("AddAvailablePUPByTemplate", R_INT, {R_INT, R_STRING}, &routine::addAvailablePUPByTemplate);
    add("AddAvailablePUPByObject", R_INT, {R_INT, R_OBJECT}, &routine::addAvailablePUPByObject);
    add("AssignPUP", R_INT, {R_INT, R_INT}, &routine::assignPUP);
    add("SpawnAvailablePUP", R_OBJECT, {R_INT, R_LOCATION}, &routine::spawnAvailablePUP);
    add("AddPartyPuppet", R_INT, {R_INT, R_OBJECT}, &routine::addPartyPuppet);
    add("GetPUPOwner", R_OBJECT, {R_OBJECT}, &routine::getPUPOwner);
    add("GetIsPuppet", R_INT, {R_OBJECT}, &routine::getIsPuppet);
    add("ActionFollowOwner", R_VOID, {R_FLOAT}, &routine::actionFollowOwner);
    add("GetIsPartyLeader", R_INT, {R_OBJECT}, &routine::getIsPartyLeader);
    add("GetPartyLeader", R_OBJECT, {}, &routine::getPartyLeader);
    add("RemoveNPCFromPartyToBase", R_INT, {R_INT}, &routine::removeNPCFromPartyToBase);
    add("CreatureFlourishWeapon", R_VOID, {R_OBJECT}, &routine::creatureFlourishWeapon);
    add("EffectMindTrick", R_EFFECT, {}, &routine::effectMindTrick);
    add("EffectFactionModifier", R_EFFECT, {R_INT}, &routine::effectFactionModifier);
    add("ChangeObjectAppearance", R_VOID, {R_OBJECT, R_INT}, &routine::changeObjectAppearance);
    add("GetIsXBox", R_INT, {}, &routine::getIsXBox);
    add("EffectDroidScramble", R_EFFECT, {}, &routine::effectDroidScramble);
    add("ActionSwitchWeapons", R_VOID, {}, &routine::actionSwitchWeapons);
    add("PlayOverlayAnimation", R_VOID, {R_OBJECT, R_INT}, &routine::playOverlayAnimation);
    add("UnlockAllSongs", R_VOID, {}, &routine::unlockAllSongs);
    add("DisableMap", R_VOID, {R_INT}, &routine::disableMap);
    add("DetonateMine", R_VOID, {R_OBJECT}, &routine::detonateMine);
    add("DisableHealthRegen", R_VOID, {R_INT}, &routine::disableHealthRegen);
    add("SetCurrentForm", R_VOID, {R_OBJECT, R_INT}, &routine::setCurrentForm);
    add("SetDisableTransit", R_VOID, {R_INT}, &routine::setDisableTransit);
    add("SetInputClass", R_VOID, {R_INT}, &routine::setInputClass);
    add("SetForceAlwaysUpdate", R_VOID, {R_OBJECT, R_INT}, &routine::setForceAlwaysUpdate);
    add("EnableRain", R_VOID, {R_INT}, &routine::enableRain);
    add("DisplayMessageBox", R_VOID, {R_INT, R_STRING}, &routine::displayMessageBox);
    add("DisplayDatapad", R_VOID, {R_OBJECT}, &routine::displayDatapad);
    add("RemoveHeartbeat", R_VOID, {R_OBJECT}, &routine::removeHeartbeat);
    add("RemoveEffectByID", R_VOID, {R_OBJECT, R_INT}, &routine::removeEffectByID);
    add("RemoveEffectByExactMatch", R_VOID, {R_OBJECT, R_EFFECT}, &routine::removeEffectByExactMatch);
    add("AdjustCreatureSkills", R_VOID, {R_OBJECT, R_INT, R_INT}, &routine::adjustCreatureSkills);
    add("GetSkillRankBase", R_INT, {R_INT, R_OBJECT}, &routine::getSkillRankBase);
    add("EnableRendering", R_VOID, {R_OBJECT, R_INT}, &routine::enableRendering);
    add("GetCombatActionsPending", R_INT, {R_OBJECT}, &routine::getCombatActionsPending);
    add("SaveNPCByObject", R_VOID, {R_INT, R_OBJECT}, &routine::saveNPCByObject);
    add("SavePUPByObject", R_VOID, {R_INT, R_OBJECT}, &routine::savePUPByObject);
    add("GetIsPlayerMadeCharacter", R_INT, {R_OBJECT}, &routine::getIsPlayerMadeCharacter);
    add("RebuildPartyTable", R_VOID, {}, &routine::rebuildPartyTable);
}

const Routine &Routines::get(int index) const {
    if (isOutOfRange(_routines, index)) {
        throw out_of_range("index is out of range");
    }
    return _routines[index];
}

int Routines::getIndexByName(const string &name) const {
    for (size_t i = 0; i < _routines.size(); ++i) {
        if (_routines[i].name() == name) {
            return static_cast<int>(i);
        }
    }
    return -1;
}

void Routines::add(
    string name,
    VariableType retType,
    vector<VariableType> argTypes,
    Variable (*fn)(const vector<Variable> &args, const RoutineContext &ctx)) {
    _routines.emplace_back(
        move(name),
        retType,
        move(argTypes),
        [this, fn](auto &args, auto &execution) {
            RoutineContext ctx(*_game, *_services, execution);
            return fn(args, std::move(ctx));
        });
}

} // namespace kotor

} // namespace reone
