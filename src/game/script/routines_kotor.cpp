/*
 * Copyright (c) 2020-2021 The reone project contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "routines.h"

using namespace std;

using namespace reone::script;

namespace reone {

namespace game {

#define Void VariableType::Void
#define Int VariableType::Int
#define Float VariableType::Float
#define Object VariableType::Object
#define String VariableType::String
#define Effect VariableType::Effect
#define Event VariableType::Event
#define Location VariableType::Location
#define Talent VariableType::Talent
#define TVector VariableType::Vector
#define Action VariableType::Action

void Routines::addKotorRoutines() {
    add("Random", Int, { Int }, &Routines::random);
    add("PrintString", Void, { String }, &Routines::printString);
    add("PrintFloat", Void, { Float, Int, Int }, &Routines::printFloat);
    add("FloatToString", String, { Float, Int, Int }, &Routines::floatToString);
    add("PrintInteger", Void, { Int }, &Routines::printInteger);
    add("PrintObject", Void, { Object }, &Routines::printObject);
    add("AssignCommand", Void, { Object, Action }, &Routines::assignCommand);
    add("DelayCommand", Void, { Float, Action }, &Routines::delayCommand);
    add("ExecuteScript", Void, { String, Object, Int }, &Routines::executeScript);
    add("ClearAllActions", Void, { }, &Routines::clearAllActions);
    add("SetFacing", Void, { Float }, &Routines::setFacing);
    add("SwitchPlayerCharacter", Int, { Int });
    add("SetTime", Void, { Int, Int, Int, Int }, &Routines::setTime);
    add("SetPartyLeader", Int, { Int }, &Routines::setPartyLeader);
    add("SetAreaUnescapable", Void, { Int }, &Routines::setAreaUnescapable);
    add("GetAreaUnescapable", Int, { }, &Routines::getAreaUnescapable);
    add("GetTimeHour", Int, { }, &Routines::getTimeHour);
    add("GetTimeMinute", Int, { }, &Routines::getTimeMinute);
    add("GetTimeSecond", Int, { }, &Routines::getTimeSecond);
    add("GetTimeMillisecond", Int, { }, &Routines::getTimeMillisecond);
    add("ActionRandomWalk", Void, { }, &Routines::actionRandomWalk);
    add("ActionMoveToLocation", Void, { Location, Int }, &Routines::actionMoveToLocation);
    add("ActionMoveToObject", Void, { Object, Int, Float }, &Routines::actionMoveToObject);
    add("ActionMoveAwayFromObject", Void, { Object, Int, Float }, &Routines::actionMoveAwayFromObject);
    add("GetArea", Object, { Object }, &Routines::getArea);
    add("GetEnteringObject", Object, { }, &Routines::getEnteringObject);
    add("GetExitingObject", Object, { }, &Routines::getExitingObject);
    add("GetPosition", TVector, { Object }, &Routines::getPosition);
    add("GetFacing", Float, { Object }, &Routines::getFacing);
    add("GetItemPossessor", Object, { Object });
    add("GetItemPossessedBy", Object, { Object, String }, &Routines::getItemPossessedBy);
    add("CreateItemOnObject", Object, { String, Object, Int }, &Routines::createItemOnObject);
    add("ActionEquipItem", Void, { Object, Int, Int }, &Routines::actionEquipItem);
    add("ActionUnequipItem", Void, { Object, Int }, &Routines::actionUnequipItem);
    add("ActionPickUpItem", Void, { Object }, &Routines::actionPickUpItem);
    add("ActionPutDownItem", Void, { Object }, &Routines::actionPutDownItem);
    add("GetLastAttacker", Object, { Object });
    add("ActionAttack", Void, { Object, Int }, &Routines::actionAttack);
    add("GetNearestCreature", Object, { Int, Int, Object, Int, Int, Int, Int, Int }, &Routines::getNearestCreature);
    add("ActionSpeakString", Void, { String, Int }, &Routines::actionSpeakString);
    add("ActionPlayAnimation", Void, { Int, Float, Float }, &Routines::actionPlayAnimation);
    add("GetDistanceToObject", Float, { Object }, &Routines::getDistanceToObject);
    add("GetIsObjectValid", Int, { Object }, &Routines::getIsObjectValid);
    add("ActionOpenDoor", Void, { Object }, &Routines::actionOpenDoor);
    add("ActionCloseDoor", Void, { Object }, &Routines::actionCloseDoor);
    add("SetCameraFacing", Void, { Float });
    add("PlaySound", Void, { String });
    add("GetSpellTargetObject", Object, { });
    add("ActionCastSpellAtObject", Void, { Int, Object, Int, Int, Int, Int, Int }, &Routines::actionCastSpellAtObject);
    add("GetCurrentHitPoints", Int, { Object }, &Routines::getCurrentHitPoints);
    add("GetMaxHitPoints", Int, { Object }, &Routines::getMaxHitPoints);
    add("EffectAssuredHit", Effect, { }, &Routines::effectAssuredHit);
    add("GetLastItemEquipped", Object, { });
    add("GetSubScreenID", Int, { });
    add("CancelCombat", Void, { Object });
    add("GetCurrentForcePoints", Int, { Object });
    add("GetMaxForcePoints", Int, { Object });
    add("PauseGame", Void, { Int });
    add("SetPlayerRestrictMode", Void, { Int });
    add("GetStringLength", Int, { String }, &Routines::getStringLength);
    add("GetStringUpperCase", String, { String }, &Routines::getStringUpperCase);
    add("GetStringLowerCase", String, { String }, &Routines::getStringLowerCase);
    add("GetStringRight", String, { String, Int }, &Routines::getStringRight);
    add("GetStringLeft", String, { String, Int }, &Routines::getStringLeft);
    add("InsertString", String, { String, String, Int }, &Routines::insertString);
    add("GetSubString", String, { String, Int, Int }, &Routines::getSubString);
    add("FindSubString", Int, { String, String }, &Routines::findSubString);
    add("fabs", Float, { Float }, &Routines::fabs);
    add("cos", Float, { Float }, &Routines::cos);
    add("sin", Float, { Float }, &Routines::sin);
    add("tan", Float, { Float }, &Routines::tan);
    add("acos", Float, { Float }, &Routines::acos);
    add("asin", Float, { Float }, &Routines::asin);
    add("atan", Float, { Float }, &Routines::atan);
    add("log", Float, { Float }, &Routines::log);
    add("pow", Float, { Float, Float }, &Routines::pow);
    add("sqrt", Float, { Float }, &Routines::sqrt);
    add("abs", Int, { Int }, &Routines::abs);
    add("EffectHeal", Effect, { Int }, &Routines::effectHeal);
    add("EffectDamage", Effect, { Int, Int, Int }, &Routines::effectDamage);
    add("EffectAbilityIncrease", Effect, { Int, Int }, &Routines::effectAbilityIncrease);
    add("EffectDamageResistance", Effect, { Int, Int, Int }, &Routines::effectDamageResistance);
    add("EffectResurrection", Effect, { }, &Routines::effectResurrection);
    add("GetPlayerRestrictMode", Int, { Object });
    add("GetCasterLevel", Int, { Object });
    add("GetFirstEffect", Effect, { Object });
    add("GetNextEffect", Effect, { Object });
    add("RemoveEffect", Void, { Object, Effect });
    add("GetIsEffectValid", Int, { Effect });
    add("GetEffectDurationType", Int, { Effect });
    add("GetEffectSubType", Int, { Effect });
    add("GetEffectCreator", Object, { Effect });
    add("IntToString", String, { Int }, &Routines::intToString);
    add("GetFirstObjectInArea", Object, { Object, Int });
    add("GetNextObjectInArea", Object, { Object, Int });
    add("d2", Int, { Int }, &Routines::d2);
    add("d3", Int, { Int }, &Routines::d3);
    add("d4", Int, { Int }, &Routines::d4);
    add("d6", Int, { Int }, &Routines::d6);
    add("d8", Int, { Int }, &Routines::d8);
    add("d10", Int, { Int }, &Routines::d10);
    add("d12", Int, { Int }, &Routines::d12);
    add("d20", Int, { Int }, &Routines::d20);
    add("d100", Int, { Int }, &Routines::d100);
    add("VectorMagnitude", Float, { TVector }, &Routines::vectorMagnitude);
    add("GetMetaMagicFeat", Int, { });
    add("GetObjectType", Int, { Object }, &Routines::getObjectType);
    add("GetRacialType", Int, { Object });
    add("FortitudeSave", Int, { Object, Int, Int, Object });
    add("ReflexSave", Int, { Object, Int, Int, Object });
    add("WillSave", Int, { Object, Int, Int, Object });
    add("GetSpellSaveDC", Int, { });
    add("MagicalEffect", Effect, { Effect });
    add("SupernaturalEffect", Effect, { Effect });
    add("ExtraordinaryEffect", Effect, { Effect });
    add("EffectACIncrease", Effect, { Int, Int, Int }, &Routines::effectACIncrease);
    add("GetAC", Int, { Object, Int });
    add("EffectSavingThrowIncrease", Effect, { Int, Int, Int }, &Routines::effectSavingThrowIncrease);
    add("EffectAttackIncrease", Effect, { Int, Int }, &Routines::effectAttackIncrease);
    add("EffectDamageReduction", Effect, { Int, Int, Int }, &Routines::effectDamageReduction);
    add("EffectDamageIncrease", Effect, { Int, Int }, &Routines::effectDamageIncrease);
    add("RoundsToSeconds", Float, { Int }, &Routines::roundsToSeconds);
    add("HoursToSeconds", Float, { Int }, &Routines::hoursToSeconds);
    add("TurnsToSeconds", Float, { Int }, &Routines::turnsToSeconds);
    add("SoundObjectSetFixedVariance", Void, { Object, Float });
    add("GetGoodEvilValue", Int, { Object });
    add("GetPartyMemberCount", Int, { }, &Routines::getPartyMemberCount);
    add("GetAlignmentGoodEvil", Int, { Object });
    add("GetFirstObjectInShape", Object, { Int, Float, Location, Int, Int, TVector });
    add("GetNextObjectInShape", Object, { Int, Float, Location, Int, Int, TVector });
    add("EffectEntangle", Effect, { }, &Routines::effectEntangle);
    add("SignalEvent", Void, { Object, Event }, &Routines::signalEvent);
    add("EventUserDefined", Event, { Int }, &Routines::eventUserDefined);
    add("EffectDeath", Effect, { Int, Int }, &Routines::effectDeath);
    add("EffectKnockdown", Effect, { }, &Routines::effectKnockdown);
    add("ActionGiveItem", Void, { Object, Object }, &Routines::actionGiveItem);
    add("ActionTakeItem", Void, { Object, Object }, &Routines::actionTakeItem);
    add("VectorNormalize", TVector, { TVector }, &Routines::vectorNormalize);
    add("GetItemStackSize", Int, { Object }, &Routines::getItemStackSize);
    add("GetAbilityScore", Int, { Object, Int }, &Routines::getAbilityScore);
    add("GetIsDead", Int, { Object }, &Routines::getIsDead);
    add("PrintVector", Void, { TVector, Int }, &Routines::printVector);
    add("Vector", TVector, { Float, Float, Float }, &Routines::vectorCreate);
    add("SetFacingPoint", Void, { TVector }, &Routines::setFacingPoint);
    add("AngleToVector", TVector, { Float });
    add("VectorToAngle", Float, { TVector });
    add("TouchAttackMelee", Int, { Object, Int });
    add("TouchAttackRanged", Int, { Object, Int });
    add("EffectParalyze", Effect, { }, &Routines::effectParalyze);
    add("EffectSpellImmunity", Effect, { Int }, &Routines::effectSpellImmunity);
    add("SetItemStackSize", Void, { Object, Int }, &Routines::setItemStackSize);
    add("GetDistanceBetween", Float, { Object, Object }, &Routines::getDistanceBetween);
    add("SetReturnStrref", Void, { Int, Int, Int });
    add("EffectForceJump", Effect, { Object, Int }, &Routines::effectForceJump);
    add("EffectSleep", Effect, { }, &Routines::effectSleep);
    add("GetItemInSlot", Object, { Int, Object }, &Routines::getItemInSlot);
    add("EffectTemporaryForcePoints", Effect, { Int }, &Routines::effectTemporaryForcePoints);
    add("EffectConfused", Effect, { }, &Routines::effectConfused);
    add("EffectFrightened", Effect, { }, &Routines::effectFrightened);
    add("EffectChoke", Effect, { }, &Routines::effectChoke);
    add("SetGlobalString", Void, { String, String }, &Routines::setGlobalString);
    add("EffectStunned", Effect, { }, &Routines::effectStunned);
    add("SetCommandable", Void, { Int, Object }, &Routines::setCommandable);
    add("GetCommandable", Int, { Object }, &Routines::getCommandable);
    add("EffectRegenerate", Effect, { Int, Float }, &Routines::effectRegenerate);
    add("EffectMovementSpeedIncrease", Effect, { Int }, &Routines::effectMovementSpeedIncrease);
    add("GetHitDice", Int, { Object }, &Routines::getHitDice);
    add("ActionForceFollowObject", Void, { Object, Float }, &Routines::actionForceFollowObject);
    add("GetTag", String, { Object }, &Routines::getTag);
    add("ResistForce", Int, { Object, Object });
    add("GetEffectType", Int, { Effect });
    add("EffectAreaOfEffect", Effect, { Int, String, String, String }, &Routines::effectAreaOfEffect);
    add("GetFactionEqual", Int, { Object, Object }, &Routines::getFactionEqual);
    add("ChangeFaction", Void, { Object, Object }, &Routines::changeFaction);
    add("GetIsListening", Int, { Object });
    add("SetListening", Void, { Object, Int });
    add("SetListenPattern", Void, { Object, String, Int });
    add("TestStringAgainstPattern", Int, { String, String });
    add("GetMatchedSubstring", String, { Int });
    add("GetMatchedSubstringsCount", Int, { });
    add("EffectVisualEffect", Effect, { Int, Int }, &Routines::effectVisualEffect);
    add("GetFactionWeakestMember", Object, { Object, Int });
    add("GetFactionStrongestMember", Object, { Object, Int });
    add("GetFactionMostDamagedMember", Object, { Object, Int });
    add("GetFactionLeastDamagedMember", Object, { Object, Int });
    add("GetFactionGold", Int, { Object });
    add("GetFactionAverageReputation", Int, { Object, Object });
    add("GetFactionAverageGoodEvilAlignment", Int, { Object });
    add("SoundObjectGetFixedVariance", Float, { Object });
    add("GetFactionAverageLevel", Int, { Object });
    add("GetFactionAverageXP", Int, { Object });
    add("GetFactionMostFrequentClass", Int, { Object });
    add("GetFactionWorstAC", Object, { Object, Int });
    add("GetFactionBestAC", Object, { Object, Int });
    add("GetGlobalString", String, { String }, &Routines::getGlobalString);
    add("GetListenPatternNumber", Int, { });
    add("ActionJumpToObject", Void, { Object, Int }, &Routines::actionJumpToObject);
    add("GetWaypointByTag", Object, { String }, &Routines::getWaypointByTag);
    add("GetTransitionTarget", Object, { Object });
    add("EffectLinkEffects", Effect, { Effect, Effect }, &Routines::effectLinkEffects);
    add("GetObjectByTag", Object, { String, Int }, &Routines::getObjectByTag);
    add("AdjustAlignment", Void, { Object, Int, Int });
    add("ActionWait", Void, { Float }, &Routines::actionWait);
    add("SetAreaTransitionBMP", Void, { Int, String });
    add("ActionStartConversation", Void, { Object, String, Int, Int, Int, String, String, String, String, String, String, Int }, &Routines::actionStartConversation);
    add("ActionPauseConversation", Void, { }), &Routines::actionPauseConversation;
    add("ActionResumeConversation", Void, { }, &Routines::actionResumeConversation);
    add("EffectBeam", Effect, { Int, Object, Int, Int }, &Routines::effectBeam);
    add("GetReputation", Int, { Object, Object });
    add("AdjustReputation", Void, { Object, Object, Int });
    add("GetModuleFileName", String, { });
    add("GetGoingToBeAttackedBy", Object, { Object });
    add("EffectForceResistanceIncrease", Effect, { Int }, &Routines::effectForceResistanceIncrease);
    add("GetLocation", Location, { Object }, &Routines::getLocation);
    add("ActionJumpToLocation", Void, { Location }, &Routines::actionJumpToLocation);
    add("Location", Location, { TVector, Float }, &Routines::location);
    add("ApplyEffectAtLocation", Void, { Int, Effect, Location, Float });
    add("GetIsPC", Int, { Object }, &Routines::getIsPC);
    add("FeetToMeters", Float, { Float }, &Routines::feetToMeters);
    add("YardsToMeters", Float, { Float }, &Routines::yardsToMeters);
    add("ApplyEffectToObject", Void, { Int, Effect, Object, Float }, &Routines::applyEffectToObject);
    add("SpeakString", Void, { String, Int });
    add("GetSpellTargetLocation", Location, { });
    add("GetPositionFromLocation", TVector, { Location }, &Routines::getPositionFromLocation);
    add("EffectBodyFuel", Effect, { }, &Routines::effectBodyFuel);
    add("GetFacingFromLocation", Float, { Location }, &Routines::getFacingFromLocation);
    add("GetNearestCreatureToLocation", Object, { Int, Int, Location, Int, Int, Int, Int, Int }, &Routines::getNearestCreatureToLocation);
    add("GetNearestObject", Object, { Int, Object, Int }, &Routines::getNearestObject);
    add("GetNearestObjectToLocation", Object, { Int, Location, Int }, &Routines::getNearestObjectToLocation);
    add("GetNearestObjectByTag", Object, { String, Object, Int }, &Routines::getNearestObjectByTag);
    add("IntToFloat", Float, { Int }, &Routines::intToFloat);
    add("FloatToInt", Int, { Float }, &Routines::floatToInt);
    add("StringToInt", Int, { String }, &Routines::stringToInt);
    add("StringToFloat", Float, { String }, &Routines::stringToFloat);
    add("ActionCastSpellAtLocation", Void, { Int, Location, Int, Int, Int, Int }, &Routines::actionCastSpellAtLocation);
    add("GetIsEnemy", Int, { Object, Object }, &Routines::getIsEnemy);
    add("GetIsFriend", Int, { Object, Object }, &Routines::getIsFriend);
    add("GetIsNeutral", Int, { Object, Object }, &Routines::getIsNeutral);
    add("GetPCSpeaker", Object, { }, &Routines::getPCSpeaker);
    add("GetStringByStrRef", String, { Int }, &Routines::getStringByStrRef);
    add("ActionSpeakStringByStrRef", Void, { Int, Int }, &Routines::actionSpeakStringByStrRef);
    add("DestroyObject", Void, { Object, Float, Int, Float }, &Routines::destroyObject);
    add("GetModule", Object, { }, &Routines::getModule);
    add("CreateObject", Object, { Int, String, Location, Int }, &Routines::createObject);
    add("EventSpellCastAt", Event, { Object, Int, Int });
    add("GetLastSpellCaster", Object, { });
    add("GetLastSpell", Int, { });
    add("GetUserDefinedEventNumber", Int, { }, &Routines::getUserDefinedEventNumber);
    add("GetSpellId", Int, { });
    add("RandomName", String, { });
    add("EffectPoison", Effect, { Int }, &Routines::effectPoison);
    add("GetLoadFromSaveGame", Int, { }, &Routines::getLoadFromSaveGame);
    add("EffectAssuredDeflection", Effect, { Int }, &Routines::effectAssuredDeflection);
    add("GetName", String, { Object }, &Routines::getName);
    add("GetLastSpeaker", Object, { });
    add("BeginConversation", Int, { String, Object });
    add("GetLastPerceived", Object, { });
    add("GetLastPerceptionHeard", Int, { });
    add("GetLastPerceptionInaudible", Int, { });
    add("GetLastPerceptionSeen", Int, { });
    add("GetLastClosedBy", Object, { });
    add("GetLastPerceptionVanished", Int, { });
    add("GetFirstInPersistentObject", Object, { Object, Int, Int });
    add("GetNextInPersistentObject", Object, { Object, Int, Int });
    add("GetAreaOfEffectCreator", Object, { Object });
    add("ShowLevelUpGUI", Int, { });
    add("SetItemNonEquippable", Void, { Object, Int });
    add("GetButtonMashCheck", Int, { });
    add("SetButtonMashCheck", Void, { Int });
    add("EffectForcePushTargeted", Effect, { Location, Int }, &Routines::effectForcePushTargeted);
    add("EffectHaste", Effect, { }, &Routines::effectHaste);
    add("GiveItem", Void, { Object, Object });
    add("ObjectToString", String, { Object });
    add("EffectImmunity", Effect, { Int }, &Routines::effectImmunity);
    add("GetIsImmune", Int, { Object, Int, Object });
    add("EffectDamageImmunityIncrease", Effect, { Int, Int }, &Routines::effectDamageImmunityIncrease);
    add("GetEncounterActive", Int, { Object });
    add("SetEncounterActive", Void, { Int, Object });
    add("GetEncounterSpawnsMax", Int, { Object });
    add("SetEncounterSpawnsMax", Void, { Int, Object });
    add("GetEncounterSpawnsCurrent", Int, { Object });
    add("SetEncounterSpawnsCurrent", Void, { Int, Object });
    add("GetModuleItemAcquired", Object, { });
    add("GetModuleItemAcquiredFrom", Object, { });
    add("SetCustomToken", Void, { Int, String });
    add("GetHasFeat", Int, { Int, Object });
    add("GetHasSkill", Int, { Int, Object }, &Routines::getHasSkill);
    add("ActionUseFeat", Void, { Int, Object }, &Routines::actionUseFeat);
    add("ActionUseSkill", Void, { Int, Object, Int, Object }, &Routines::actionUseSkill);
    add("GetObjectSeen", Int, { Object, Object });
    add("GetObjectHeard", Int, { Object, Object });
    add("GetLastPlayerDied", Object, { });
    add("GetModuleItemLost", Object, { });
    add("GetModuleItemLostBy", Object, { });
    add("ActionDoCommand", Void, { Action }, &Routines::actionDoCommand);
    add("EventConversation", Event, { });
    add("SetEncounterDifficulty", Void, { Int, Object });
    add("GetEncounterDifficulty", Int, { Object });
    add("GetDistanceBetweenLocations", Float, { Location, Location }, &Routines::getDistanceBetweenLocations);
    add("GetReflexAdjustedDamage", Int, { Int, Object, Int, Int, Object });
    add("PlayAnimation", Void, { Int, Float, Float }, &Routines::playAnimation);
    add("TalentSpell", Talent, { Int });
    add("TalentFeat", Talent, { Int });
    add("TalentSkill", Talent, { Int });
    add("GetHasSpellEffect", Int, { Int, Object });
    add("GetEffectSpellId", Int, { Effect });
    add("GetCreatureHasTalent", Int, { Talent, Object });
    add("GetCreatureTalentRandom", Talent, { Int, Object, Int });
    add("GetCreatureTalentBest", Talent, { Int, Int, Object, Int, Int, Int });
    add("ActionUseTalentOnObject", Void, { Talent, Object }, &Routines::actionUseTalentOnObject);
    add("ActionUseTalentAtLocation", Void, { Talent, Location }, &Routines::actionUseTalentAtLocation);
    add("GetGoldPieceValue", Int, { Object });
    add("GetIsPlayableRacialType", Int, { Object });
    add("JumpToLocation", Void, { Location }, &Routines::jumpToLocation);
    add("EffectTemporaryHitpoints", Effect, { Int }, &Routines::effectTemporaryHitpoints);
    add("GetSkillRank", Int, { Int, Object }, &Routines::getSkillRank);
    add("GetAttackTarget", Object, { Object });
    add("GetLastAttackType", Int, { Object });
    add("GetLastAttackMode", Int, { Object });
    add("GetDistanceBetween2D", Float, { Object, Object }, &Routines::getDistanceBetween2D);
    add("GetIsInCombat", Int, { Object }, &Routines::getIsInCombat);
    add("GetLastAssociateCommand", Int, { Object });
    add("GiveGoldToCreature", Void, { Object, Int });
    add("SetIsDestroyable", Void, { Int, Int, Int });
    add("SetLocked", Void, { Object, Int }, &Routines::setLocked);
    add("GetLocked", Int, { Object }, &Routines::getLocked);
    add("GetClickingObject", Object, { });
    add("SetAssociateListenPatterns", Void, { Object });
    add("GetLastWeaponUsed", Object, { Object });
    add("ActionInteractObject", Void, { Object }, &Routines::actionInteractObject);
    add("GetLastUsedBy", Object, { });
    add("GetAbilityModifier", Int, { Int, Object });
    add("GetIdentified", Int, { Object }, &Routines::getIdentified);
    add("SetIdentified", Void, { Object, Int }, &Routines::setIdentified);
    add("GetDistanceBetweenLocations2D", Float, { Location, Location }, &Routines::getDistanceBetweenLocations2D);
    add("GetDistanceToObject2D", Float, { Object }, &Routines::getDistanceToObject2D);
    add("GetBlockingDoor", Object, { });
    add("GetIsDoorActionPossible", Int, { Object, Int });
    add("DoDoorAction", Void, { Object, Int });
    add("GetFirstItemInInventory", Object, { Object }, &Routines::getFirstItemInInventory);
    add("GetNextItemInInventory", Object, { Object }, &Routines::getNextItemInInventory);
    add("GetClassByPosition", Int, { Int, Object }, &Routines::getClassByPosition);
    add("GetLevelByPosition", Int, { Int, Object }, &Routines::getLevelByPosition);
    add("GetLevelByClass", Int, { Int, Object }, &Routines::getLevelByClass);
    add("GetDamageDealtByType", Int, { Int });
    add("GetTotalDamageDealt", Int, { });
    add("GetLastDamager", Object, { });
    add("GetLastDisarmed", Object, { });
    add("GetLastDisturbed", Object, { });
    add("GetLastLocked", Object, { });
    add("GetLastUnlocked", Object, { });
    add("EffectSkillIncrease", Effect, { Int, Int }, &Routines::effectSkillIncrease);
    add("GetInventoryDisturbType", Int, { });
    add("GetInventoryDisturbItem", Object, { });
    add("ShowUpgradeScreen", Void, { Object });
    add("VersusAlignmentEffect", Effect, { Effect, Int, Int });
    add("VersusRacialTypeEffect", Effect, { Effect, Int });
    add("VersusTrapEffect", Effect, { Effect });
    add("GetGender", Int, { Object }, &Routines::getGender);
    add("GetIsTalentValid", Int, { Talent });
    add("ActionMoveAwayFromLocation", Void, { Location, Int, Float }, &Routines::actionMoveAwayFromLocation);
    add("GetAttemptedAttackTarget", Object, { });
    add("GetTypeFromTalent", Int, { Talent });
    add("GetIdFromTalent", Int, { Talent });
    add("PlayPazaak", Void, { Int, String, Int, Int, Object });
    add("GetLastPazaakResult", Int, { });
    add("DisplayFeedBackText", Void, { Object, Int });
    add("AddJournalQuestEntry", Void, { String, Int, Int });
    add("RemoveJournalQuestEntry", Void, { String });
    add("GetJournalEntry", Int, { String });
    add("PlayRumblePattern", Int, { Int });
    add("StopRumblePattern", Int, { Int });
    add("EffectDamageForcePoints", Effect, { Int }, &Routines::effectDamageForcePoints);
    add("EffectHealForcePoints", Effect, { Int }, &Routines::effectHealForcePoints);
    add("SendMessageToPC", Void, { Object, String });
    add("GetAttemptedSpellTarget", Object, { });
    add("GetLastOpenedBy", Object, { }, &Routines::getLastOpenedBy);
    add("GetHasSpell", Int, { Int, Object });
    add("OpenStore", Void, { Object, Object, Int, Int });
    add("ActionSurrenderToEnemies", Void, { }, &Routines::actionSurrenderToEnemies);
    add("GetFirstFactionMember", Object, { Object, Int });
    add("GetNextFactionMember", Object, { Object, Int });
    add("ActionForceMoveToLocation", Void, { Location, Int, Float }, &Routines::actionForceMoveToLocation);
    add("ActionForceMoveToObject", Void, { Object, Int, Float, Float }, &Routines::actionForceMoveToObject);
    add("GetJournalQuestExperience", Int, { String });
    add("JumpToObject", Void, { Object, Int }, &Routines::jumpToObject);
    add("SetMapPinEnabled", Void, { Object, Int });
    add("EffectHitPointChangeWhenDying", Effect, { Float }, &Routines::effectHitPointChangeWhenDying);
    add("PopUpGUIPanel", Void, { Object, Int });
    add("AddMultiClass", Void, { Int, Object });
    add("GetIsLinkImmune", Int, { Object, Effect });
    add("EffectDroidStun", Effect, { }, &Routines::effectDroidStun);
    add("EffectForcePushed", Effect, { }, &Routines::effectForcePushed);
    add("GiveXPToCreature", Void, { Object, Int }, &Routines::giveXPToCreature);
    add("SetXP", Void, { Object, Int }, &Routines::setXP);
    add("GetXP", Int, { Object }, &Routines::getXP);
    add("IntToHexString", String, { Int }, &Routines::intToHexString);
    add("GetBaseItemType", Int, { Object });
    add("GetItemHasItemProperty", Int, { Object, Int });
    add("ActionEquipMostDamagingMelee", Void, { Object, Int }, &Routines::actionEquipMostDamagingMelee);
    add("ActionEquipMostDamagingRanged", Void, { Object }, &Routines::actionEquipMostDamagingRanged);
    add("GetItemACValue", Int, { Object });
    add("EffectForceResisted", Effect, { Object }, &Routines::effectForceResisted);
    add("ExploreAreaForPlayer", Void, { Object, Object });
    add("ActionEquipMostEffectiveArmor", Void, { }, &Routines::actionEquipMostEffectiveArmor);
    add("GetIsDay", Int, { }, &Routines::getIsDay);
    add("GetIsNight", Int, { }, &Routines::getIsNight);
    add("GetIsDawn", Int, { }, &Routines::getIsDawn);
    add("GetIsDusk", Int, { }, &Routines::getIsDusk);
    add("GetIsEncounterCreature", Int, { Object });
    add("GetLastPlayerDying", Object, { });
    add("GetStartingLocation", Location, { }, &Routines::getStartingLocation);
    add("ChangeToStandardFaction", Void, { Object, Int }, &Routines::changeToStandardFaction);
    add("SoundObjectPlay", Void, { Object }, &Routines::soundObjectPlay);
    add("SoundObjectStop", Void, { Object }, &Routines::soundObjectStop);
    add("SoundObjectSetVolume", Void, { Object, Int });
    add("SoundObjectSetPosition", Void, { Object, TVector });
    add("SpeakOneLinerConversation", Void, { String, Object });
    add("GetGold", Int, { Object });
    add("GetLastRespawnButtonPresser", Object, { });
    add("EffectForceFizzle", Effect, { }, &Routines::effectForceFizzle);
    add("SetLightsaberPowered", Void, { Object, Int, Int, Int });
    add("GetIsWeaponEffective", Int, { Object, Int });
    add("GetLastSpellHarmful", Int, { });
    add("EventActivateItem", Event, { Object, Location, Object });
    add("MusicBackgroundPlay", Void, { Object });
    add("MusicBackgroundStop", Void, { Object });
    add("MusicBackgroundSetDelay", Void, { Object, Int });
    add("MusicBackgroundChangeDay", Void, { Object, Int });
    add("MusicBackgroundChangeNight", Void, { Object, Int });
    add("MusicBattlePlay", Void, { Object });
    add("MusicBattleStop", Void, { Object });
    add("MusicBattleChange", Void, { Object, Int });
    add("AmbientSoundPlay", Void, { Object });
    add("AmbientSoundStop", Void, { Object });
    add("AmbientSoundChangeDay", Void, { Object, Int });
    add("AmbientSoundChangeNight", Void, { Object, Int });
    add("GetLastKiller", Object, { });
    add("GetSpellCastItem", Object, { });
    add("GetItemActivated", Object, { });
    add("GetItemActivator", Object, { });
    add("GetItemActivatedTargetLocation", Location, { });
    add("GetItemActivatedTarget", Object, { });
    add("GetIsOpen", Int, { Object }, &Routines::getIsOpen);
    add("TakeGoldFromCreature", Void, { Int, Object, Int });
    add("GetIsInConversation", Int, { Object });
    add("EffectAbilityDecrease", Effect, { Int, Int }, &Routines::effectAbilityDecrease);
    add("EffectAttackDecrease", Effect, { Int, Int }, &Routines::effectAttackDecrease);
    add("EffectDamageDecrease", Effect, { Int, Int }, &Routines::effectDamageDecrease);
    add("EffectDamageImmunityDecrease", Effect, { Int, Int }, &Routines::effectDamageImmunityDecrease);
    add("EffectACDecrease", Effect, { Int, Int, Int }, &Routines::effectACDecrease);
    add("EffectMovementSpeedDecrease", Effect, { Int }, &Routines::effectMovementSpeedDecrease);
    add("EffectSavingThrowDecrease", Effect, { Int, Int, Int }, &Routines::effectSavingThrowDecrease);
    add("EffectSkillDecrease", Effect, { Int, Int }, &Routines::effectSkillDecrease);
    add("EffectForceResistanceDecrease", Effect, { Int }, &Routines::effectForceResistanceDecrease);
    add("GetPlotFlag", Int, { Object }, &Routines::getPlotFlag);
    add("SetPlotFlag", Void, { Object, Int }, &Routines::setPlotFlag);
    add("EffectInvisibility", Effect, { Int }, &Routines::effectInvisibility);
    add("EffectConcealment", Effect, { Int }, &Routines::effectConcealment);
    add("EffectForceShield", Effect, { Int }, &Routines::effectForceShield);
    add("EffectDispelMagicAll", Effect, { Int }, &Routines::effectDispelMagicAll);
    add("SetDialogPlaceableCamera", Void, { Int });
    add("GetSoloMode", Int, { });
    add("EffectDisguise", Effect, { Int }, &Routines::effectDisguise);
    add("GetMaxStealthXP", Int, { }, &Routines::getMaxStealthXP);
    add("EffectTrueSeeing", Effect, { }, &Routines::effectTrueSeeing);
    add("EffectSeeInvisible", Effect, { }, &Routines::effectSeeInvisible);
    add("EffectTimeStop", Effect, { }, &Routines::effectTimeStop);
    add("SetMaxStealthXP", Void, { Int }, &Routines::setMaxStealthXP);
    add("EffectBlasterDeflectionIncrease", Effect, { Int }, &Routines::effectBlasterDeflectionIncrease);
    add("EffectBlasterDeflectionDecrease", Effect, { Int }, &Routines::effectBlasterDeflectionDecrease);
    add("EffectHorrified", Effect, { }, &Routines::effectHorrified);
    add("EffectSpellLevelAbsorption", Effect, { Int, Int, Int }, &Routines::effectSpellLevelAbsorption);
    add("EffectDispelMagicBest", Effect, { Int }, &Routines::effectDispelMagicBest);
    add("GetCurrentStealthXP", Int, { }, &Routines::getCurrentStealthXP);
    add("GetNumStackedItems", Int, { Object }, &Routines::getItemStackSize);
    add("SurrenderToEnemies", Void, { });
    add("EffectMissChance", Effect, { Int }, &Routines::effectMissChance);
    add("SetCurrentStealthXP", Void, { Int }, &Routines::setCurrentStealthXP);
    add("GetCreatureSize", Int, { Object });
    add("AwardStealthXP", Void, { Object });
    add("GetStealthXPEnabled", Int, { }, &Routines::getStealthXPEnabled);
    add("SetStealthXPEnabled", Void, { Int }, &Routines::setStealthXPEnabled);
    add("ActionUnlockObject", Void, { Object }, &Routines::actionUnlockObject);
    add("ActionLockObject", Void, { Object }, &Routines::actionLockObject);
    add("EffectModifyAttacks", Effect, { Int }, &Routines::effectModifyAttacks);
    add("GetLastTrapDetected", Object, { Object });
    add("EffectDamageShield", Effect, { Int, Int, Int }, &Routines::effectDamageShield);
    add("GetNearestTrapToObject", Object, { Object, Int });
    add("GetAttemptedMovementTarget", Object, { });
    add("GetBlockingCreature", Object, { Object });
    add("GetFortitudeSavingThrow", Int, { Object });
    add("GetWillSavingThrow", Int, { Object });
    add("GetReflexSavingThrow", Int, { Object });
    add("GetChallengeRating", Float, { Object });
    add("GetFoundEnemyCreature", Object, { Object });
    add("GetMovementRate", Int, { Object });
    add("GetSubRace", Int, { Object });
    add("GetStealthXPDecrement", Int, { }, &Routines::getStealthXPDecrement);
    add("SetStealthXPDecrement", Void, { Int }, &Routines::setStealthXPDecrement);
    add("DuplicateHeadAppearance", Void, { Object, Object });
    add("ActionCastFakeSpellAtObject", Void, { Int, Object, Int }, &Routines::actionCastFakeSpellAtObject);
    add("ActionCastFakeSpellAtLocation", Void, { Int, Location, Int }, &Routines::actionCastFakeSpellAtLocation);
    add("CutsceneAttack", Void, { Object, Int, Int, Int }, &Routines::cutsceneAttack);
    add("SetCameraMode", Void, { Object, Int });
    add("SetLockOrientationInDialog", Void, { Object, Int });
    add("SetLockHeadFollowInDialog", Void, { Object, Int });
    add("CutsceneMove", Void, { Object, TVector, Int });
    add("EnableVideoEffect", Void, { Int });
    add("StartNewModule", Void, { String, String, String, String, String, String, String, String }, &Routines::startNewModule);
    add("DisableVideoEffect", Void, { });
    add("GetWeaponRanged", Int, { Object });
    add("DoSinglePlayerAutoSave", Void, { });
    add("GetGameDifficulty", Int, { });
    add("GetUserActionsPending", Int, { });
    add("RevealMap", Void, { TVector, Int });
    add("SetTutorialWindowsEnabled", Void, { Int });
    add("ShowTutorialWindow", Void, { Int });
    add("StartCreditSequence", Void, { Int });
    add("IsCreditSequenceInProgress", Int, { });

    add("SWMG_SetLateralAccelerationPerSecond", Void, { Float });
    add("SWMG_GetLateralAccelerationPerSecond", Float, { });

    add("GetCurrentAction", Int, { Object });
    add("GetDifficultyModifier", Float, { });
    add("GetAppearanceType", Int, { Object });
    add("FloatingTextStrRefOnCreature", Void, { Int, Object, Int });
    add("FloatingTextStringOnCreature", Void, { String, Object, Int });
    add("GetTrapDisarmable", Int, { Object });
    add("GetTrapDetectable", Int, { Object });
    add("GetTrapDetectedBy", Int, { Object, Object });
    add("GetTrapFlagged", Int, { Object });
    add("GetTrapBaseType", Int, { Object });
    add("GetTrapOneShot", Int, { Object });
    add("GetTrapCreator", Object, { Object });
    add("GetTrapKeyTag", String, { Object });
    add("GetTrapDisarmDC", Int, { Object });
    add("GetTrapDetectDC", Int, { Object });
    add("GetLockKeyRequired", Int, { Object });
    add("GetLockKeyTag", Int, { Object });
    add("GetLockLockable", Int, { Object });
    add("GetLockUnlockDC", Int, { Object });
    add("GetLockLockDC", Int, { Object });
    add("GetPCLevellingUp", Object, { });
    add("GetHasFeatEffect", Int, { Int, Object });
    add("SetPlaceableIllumination", Void, { Object, Int });
    add("GetPlaceableIllumination", Int, { Object });
    add("GetIsPlaceableObjectActionPossible", Int, { Object, Int });
    add("DoPlaceableObjectAction", Void, { Object, Int });
    add("GetFirstPC", Object, { }, &Routines::getFirstPC);
    add("GetNextPC", Object, { }, &Routines::getFirstPC);
    add("SetTrapDetectedBy", Int, { Object, Object });
    add("GetIsTrapped", Int, { Object });
    add("SetEffectIcon", Effect, { Effect, Int });
    add("FaceObjectAwayFromObject", Void, { Object, Object }, &Routines::faceObjectAwayFromObject);
    add("PopUpDeathGUIPanel", Void, { Object, Int, Int, Int, String });
    add("SetTrapDisabled", Void, { Object });
    add("GetLastHostileActor", Object, { Object });
    add("ExportAllCharacters", Void, { });
    add("MusicBackgroundGetDayTrack", Int, { Object });
    add("MusicBackgroundGetNightTrack", Int, { Object });
    add("WriteTimestampedLogEntry", Void, { String });
    add("GetModuleName", String, { });
    add("GetFactionLeader", Object, { Object });

    add("SWMG_SetSpeedBlurEffect", Void, { Int, Float });

    add("EndGame", Void, { Int });
    add("GetRunScriptVar", Int, { }, &Routines::getRunScriptVar);
    add("GetCreatureMovmentType", Int, { Object });
    add("AmbientSoundSetDayVolume", Void, { Object, Int });
    add("AmbientSoundSetNightVolume", Void, { Object, Int });
    add("MusicBackgroundGetBattleTrack", Int, { Object });
    add("GetHasInventory", Int, { Object });
    add("GetStrRefSoundDuration", Float, { Int });
    add("AddToParty", Void, { Object, Object });
    add("RemoveFromParty", Void, { Object });
    add("AddPartyMember", Int, { Int, Object }, &Routines::addPartyMember);
    add("RemovePartyMember", Int, { Int }, &Routines::removePartyMember);
    add("IsObjectPartyMember", Int, { Object }, &Routines::isObjectPartyMember);
    add("GetPartyMemberByIndex", Object, { Int }, &Routines::getPartyMemberByIndex);
    add("GetGlobalBoolean", Int, { String }, &Routines::getGlobalBoolean);
    add("SetGlobalBoolean", Void, { String, Int }, &Routines::setGlobalBoolean);
    add("GetGlobalNumber", Int, { String }, &Routines::getGlobalNumber);
    add("SetGlobalNumber", Void, { String, Int }, &Routines::setGlobalNumber);
    add("AurPostString", Void, { String, Int, Int, Float });

    add("SWMG_GetLastEvent", String, { });
    add("SWMG_GetLastEventModelName", String, { });
    add("SWMG_GetObjectByName", Object, { String });
    add("SWMG_PlayAnimation", Void, { Object, String, Int, Int, Int });
    add("SWMG_GetLastBulletHitDamage", Int, { });
    add("SWMG_GetLastBulletHitTarget", Int, { });
    add("SWMG_GetLastBulletHitShooter", Object, { });
    add("SWMG_AdjustFollowerHitPoints", Int, { Object, Int, Int });
    add("SWMG_OnBulletHit", Void, { });
    add("SWMG_OnObstacleHit", Void, { });
    add("SWMG_GetLastFollowerHit", Object, { });
    add("SWMG_GetLastObstacleHit", Object, { });
    add("SWMG_GetLastBulletFiredDamage", Int, { });
    add("SWMG_GetLastBulletFiredTarget", Int, { });
    add("SWMG_GetObjectName", String, { Object });
    add("SWMG_OnDeath", Void, { });
    add("SWMG_IsFollower", Int, { Object });
    add("SWMG_IsPlayer", Int, { Object });
    add("SWMG_IsEnemy", Int, { Object });
    add("SWMG_IsTrigger", Int, { Object });
    add("SWMG_IsObstacle", Int, { Object });
    add("SWMG_SetFollowerHitPoints", Void, { Object, Int });
    add("SWMG_OnDamage", Void, { });
    add("SWMG_GetLastHPChange", Int, { });
    add("SWMG_RemoveAnimation", Void, { Object, String });
    add("SWMG_GetCameraNearClip", Float, { });
    add("SWMG_GetCameraFarClip", Float, { });
    add("SWMG_SetCameraClip", Void, { Float, Float });
    add("SWMG_GetPlayer", Object, { });
    add("SWMG_GetEnemyCount", Int, { });
    add("SWMG_GetEnemy", Object, { Int });
    add("SWMG_GetObstacleCount", Int, { });
    add("SWMG_GetObstacle", Object, { Int });
    add("SWMG_GetHitPoints", Int, { Object });
    add("SWMG_GetMaxHitPoints", Int, { Object });
    add("SWMG_SetMaxHitPoints", Void, { Object, Int });
    add("SWMG_GetSphereRadius", Float, { Object });
    add("SWMG_SetSphereRadius", Void, { Object, Float });
    add("SWMG_GetNumLoops", Int, { Object });
    add("SWMG_SetNumLoops", Void, { Object, Int });
    add("SWMG_GetPosition", TVector, { Object });
    add("SWMG_GetGunBankCount", Int, { Object });
    add("SWMG_GetGunBankBulletModel", String, { Object, Int });
    add("SWMG_GetGunBankGunModel", String, { Object, Int });
    add("SWMG_GetGunBankDamage", Int, { Object, Int });
    add("SWMG_GetGunBankTimeBetweenShots", Float, { Object, Int });
    add("SWMG_GetGunBankLifespan", Float, { Object, Int });
    add("SWMG_GetGunBankSpeed", Float, { Object, Int });
    add("SWMG_GetGunBankTarget", Int, { Object, Int });
    add("SWMG_SetGunBankBulletModel", Void, { Object, Int, String });
    add("SWMG_SetGunBankGunModel", Void, { Object, Int, String });
    add("SWMG_SetGunBankDamage", Void, { Object, Int, Int });
    add("SWMG_SetGunBankTimeBetweenShots", Void, { Object, Int, Float });
    add("SWMG_SetGunBankLifespan", Void, { Object, Int, Float });
    add("SWMG_SetGunBankSpeed", Void, { Object, Int, Float });
    add("SWMG_SetGunBankTarget", Void, { Object, Int, Int });
    add("SWMG_GetLastBulletHitPart", String, { });
    add("SWMG_IsGunBankTargetting", Int, { Object, Int });
    add("SWMG_GetPlayerOffset", TVector, { });
    add("SWMG_GetPlayerInvincibility", Float, { });
    add("SWMG_GetPlayerSpeed", Float, { });
    add("SWMG_GetPlayerMinSpeed", Float, { });
    add("SWMG_GetPlayerAccelerationPerSecond", Float, { });
    add("SWMG_GetPlayerTunnelPos", TVector, { });
    add("SWMG_SetPlayerOffset", Void, { TVector });
    add("SWMG_SetPlayerInvincibility", Void, { Float });
    add("SWMG_SetPlayerSpeed", Void, { Float });
    add("SWMG_SetPlayerMinSpeed", Void, { Float });
    add("SWMG_SetPlayerAccelerationPerSecond", Void, { Float });
    add("SWMG_SetPlayerTunnelPos", Void, { TVector });
    add("SWMG_GetPlayerTunnelNeg", TVector, { });
    add("SWMG_SetPlayerTunnelNeg", Void, { TVector });
    add("SWMG_GetPlayerOrigin", TVector, { });
    add("SWMG_SetPlayerOrigin", Void, { TVector });
    add("SWMG_GetGunBankHorizontalSpread", Float, { Object, Int });
    add("SWMG_GetGunBankVerticalSpread", Float, { Object, Int });
    add("SWMG_GetGunBankSensingRadius", Float, { Object, Int });
    add("SWMG_GetGunBankInaccuracy", Float, { Object, Int });
    add("SWMG_SetGunBankHorizontalSpread", Void, { Object, Int, Float });
    add("SWMG_SetGunBankVerticalSpread", Void, { Object, Int, Float });
    add("SWMG_SetGunBankSensingRadius", Void, { Object, Int, Float });
    add("SWMG_SetGunBankInaccuracy", Void, { Object, Int, Float });
    add("SWMG_GetIsInvulnerable", Int, { Object });
    add("SWMG_StartInvulnerability", Void, { Object });
    add("SWMG_GetPlayerMaxSpeed", Float, { });
    add("SWMG_SetPlayerMaxSpeed", Void, { Float });

    add("AddJournalWorldEntry", Void, { Int, String, String });
    add("AddJournalWorldEntryStrref", Void, { Int, Int });
    add("BarkString", Void, { Object, Int });
    add("DeleteJournalWorldAllEntries", Void, { });
    add("DeleteJournalWorldEntry", Void, { Int });
    add("DeleteJournalWorldEntryStrref", Void, { Int });
    add("EffectForceDrain", Effect, { Int }, &Routines::effectForceDrain);
    add("EffectPsychicStatic", Effect, { }, &Routines::effectPsychicStatic);
    add("PlayVisualAreaEffect", Void, { Int, Location });
    add("SetJournalQuestEntryPicture", Void, { String, Object, Int, Int, Int });
    add("GetLocalBoolean", Int, { Object, Int }, &Routines::getLocalBoolean);
    add("SetLocalBoolean", Void, { Object, Int, Int }, &Routines::setLocalBoolean);
    add("GetLocalNumber", Int, { Object, Int }, &Routines::getLocalNumber);
    add("SetLocalNumber", Void, { Object, Int, Int }, &Routines::setLocalNumber);

    add("SWMG_GetSoundFrequency", Int, { Object, Int });
    add("SWMG_SetSoundFrequency", Void, { Object, Int, Int });
    add("SWMG_GetSoundFrequencyIsRandom", Int, { Object, Int });
    add("SWMG_SetSoundFrequencyIsRandom", Void, { Object, Int, Int });
    add("SWMG_GetSoundVolume", Int, { Object, Int });
    add("SWMG_SetSoundVolume", Void, { Object, Int, Int });

    add("SoundObjectGetPitchVariance", Float, { Object });
    add("SoundObjectSetPitchVariance", Void, { Object, Float });
    add("SoundObjectGetVolume", Int, { Object });
    add("GetGlobalLocation", Location, { String }, &Routines::getGlobalLocation);
    add("SetGlobalLocation", Void, { String, Location }, &Routines::setGlobalLocation);
    add("AddAvailableNPCByObject", Int, { Int, Object });
    add("RemoveAvailableNPC", Int, { Int }, &Routines::removeAvailableNPC);
    add("IsAvailableCreature", Int, { Int }, &Routines::isAvailableCreature);
    add("AddAvailableNPCByTemplate", Int, { Int, String }, &Routines::addAvailableNPCByTemplate);
    add("SpawnAvailableNPC", Object, { Int, Location });
    add("IsNPCPartyMember", Int, { Int }, &Routines::isNPCPartyMember);
    add("ActionBarkString", Void, { Int }, &Routines::actionBarkString);
    add("GetIsConversationActive", Int, { });
    add("EffectLightsaberThrow", Effect, { Object, Object, Object, Int }, &Routines::effectLightsaberThrow);
    add("EffectWhirlWind", Effect, { }, &Routines::effectWhirlWind);
    add("GetPartyAIStyle", Int, { });
    add("GetNPCAIStyle", Int, { Object });
    add("SetPartyAIStyle", Void, { Int });
    add("SetNPCAIStyle", Void, { Object, Int });
    add("SetNPCSelectability", Void, { Int, Int });
    add("GetNPCSelectability", Int, { Int });
    add("ClearAllEffects", Void, { }, &Routines::clearAllEffects);
    add("GetLastConversation", String, { });
    add("ShowPartySelectionGUI", Void, { String, Int, Int }, &Routines::showPartySelectionGUI);
    add("GetStandardFaction", Int, { Object }, &Routines::getStandardFaction);
    add("GivePlotXP", Void, { String, Int });
    add("GetMinOneHP", Int, { Object }, &Routines::getMinOneHP);
    add("SetMinOneHP", Void, { Object, Int }, &Routines::setMinOneHP);

    add("SWMG_GetPlayerTunnelInfinite", TVector, { });
    add("SWMG_SetPlayerTunnelInfinite", Void, { TVector });

    add("SetGlobalFadeIn", Void, { Float, Float, Float, Float, Float });
    add("SetGlobalFadeOut", Void, { Float, Float, Float, Float, Float });
    add("GetLastHostileTarget", Object, { Object });
    add("GetLastAttackAction", Int, { Object });
    add("GetLastForcePowerUsed", Int, { Object });
    add("GetLastCombatFeatUsed", Int, { Object });
    add("GetLastAttackResult", Int, { Object });
    add("GetWasForcePowerSuccessful", Int, { Object });
    add("GetFirstAttacker", Object, { Object });
    add("GetNextAttacker", Object, { Object });
    add("SetFormation", Void, { Object, Object, Int, Int });
    add("ActionFollowLeader", Void, { }, &Routines::actionFollowLeader);
    add("SetForcePowerUnsuccessful", Void, { Int, Object });
    add("GetIsDebilitated", Int, { Object });
    add("PlayMovie", Void, { String }, &Routines::playMovie);
    add("SaveNPCState", Void, { Int });
    add("GetCategoryFromTalent", Int, { Talent });
    add("SurrenderByFaction", Void, { Int, Int });
    add("ChangeFactionByFaction", Void, { Int, Int });
    add("PlayRoomAnimation", Void, { String, Int });
    add("ShowGalaxyMap", Void, { Int });
    add("SetPlanetSelectable", Void, { Int, Int });
    add("GetPlanetSelectable", Int, { Int });
    add("SetPlanetAvailable", Void, { Int, Int });
    add("GetPlanetAvailable", Int, { Int });
    add("GetSelectedPlanet", Int, { });
    add("SoundObjectFadeAndStop", Void, { Object, Float });
    add("SetAreaFogColor", Void, { Object, Float, Float, Float });
    add("ChangeItemCost", Void, { String, Float });
    add("GetIsLiveContentAvailable", Int, { Int });
    add("ResetDialogState", Void, { });
    add("SetGoodEvilValue", Void, { Object, Int });
    add("GetIsPoisoned", Int, { Object });
    add("GetSpellTarget", Object, { Object });
    add("SetSoloMode", Void, { Int });
    add("EffectCutSceneHorrified", Effect, { }, &Routines::effectCutSceneHorrified);
    add("EffectCutSceneParalyze", Effect, { }, &Routines::effectCutSceneParalyze);
    add("EffectCutSceneStunned", Effect, { }, &Routines::effectCutSceneStunned);
    add("CancelPostDialogCharacterSwitch", Void, { });
    add("SetMaxHitPoints", Void, { Object, Int }, &Routines::setMaxHitPoints);
    add("NoClicksFor", Void, { Float });
    add("HoldWorldFadeInForDialog", Void, { });
    add("ShipBuild", Int, { }, &Routines::shipBuild);
    add("SurrenderRetainBuffs", Void, { });
    add("SuppressStatusSummaryEntry", Void, { Int });
    add("GetCheatCode", Int, { Int });
    add("SetMusicVolume", Void, { Float });
    add("CreateItemOnFloor", Object, { String, Location, Int });
    add("SetAvailableNPCId", Void, { Int, Object });
    add("IsMoviePlaying", Int, { });
    add("QueueMovie", Void, { String, Int });
    add("PlayMovieQueue", Void, { Int });
    add("YavinHackCloseDoor", Void, { Object });
}

} // namespace game

} // namespace reone
