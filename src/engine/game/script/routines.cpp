/*
 * Copyright (c) 2020-2021 The reone project contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "routines.h"

#include "../game.h"

#include "routine/impl/declarations.h"

using namespace std;

using namespace reone::script;

namespace reone {

namespace game {

#define VT_V VariableType::Void
#define VT_I VariableType::Int
#define VT_F VariableType::Float
#define VT_O VariableType::Object
#define VT_S VariableType::String
#define VT_EFFECT VariableType::Effect
#define VT_EVENT VariableType::Event
#define VT_LOCATION VariableType::Location
#define VT_TALENT VariableType::Talent
#define VT_VECTOR VariableType::Vector
#define VT_ACTION VariableType::Action

Routines::Routines(Game &game) : _game(game) {
}

void Routines::init() {
    if (_game.isTSL()) {
        addTslRoutines();
    } else {
        addKotorRoutines();
    }
}

Routines::~Routines() {
    deinit();
}

void Routines::deinit() {
    _routines.clear();
}

const Routine &Routines::get(int index) {
    return _routines[index];
}

void Routines::addKotorRoutines() {
    add("Random", VT_I, { VT_I }, routine::random);
    add("PrintString", VT_V, { VT_S }, routine::printString);
    add("PrintFloat", VT_V, { VT_F, VT_I, VT_I }, routine::printFloat);
    add("FloatToString", VT_S, { VT_F, VT_I, VT_I }, routine::floatToString);
    add("PrintInteger", VT_V, { VT_I }, routine::printInteger);
    add("PrintObject", VT_V, { VT_O }, routine::printObject);
    add("AssignCommand", VT_V, { VT_O, VT_ACTION }, routine::assignCommand);
    add("DelayCommand", VT_V, { VT_F, VT_ACTION }, routine::delayCommand);
    add("ExecuteScript", VT_V, { VT_S, VT_O, VT_I }, routine::executeScript);
    add("ClearAllActions", VT_V, { }, routine::clearAllActions);
    add("SetFacing", VT_V, { VT_F }, routine::setFacing);
    add("SwitchPlayerCharacter", VT_I, { VT_I }, routine::switchPlayerCharacter);
    add("SetTime", VT_V, { VT_I, VT_I, VT_I, VT_I }, routine::setTime);
    add("SetPartyLeader", VT_I, { VT_I }, routine::setPartyLeader);
    add("SetAreaUnescapable", VT_V, { VT_I }, routine::setAreaUnescapable);
    add("GetAreaUnescapable", VT_I, { }, routine::getAreaUnescapable);
    add("GetTimeHour", VT_I, { }, routine::getTimeHour);
    add("GetTimeMinute", VT_I, { }, routine::getTimeMinute);
    add("GetTimeSecond", VT_I, { }, routine::getTimeSecond);
    add("GetTimeMillisecond", VT_I, { }, routine::getTimeMillisecond);
    add("ActionRandomWalk", VT_V, { }, routine::actionRandomWalk);
    add("ActionMoveToLocation", VT_V, { VT_LOCATION, VT_I }, routine::actionMoveToLocation);
    add("ActionMoveToObject", VT_V, { VT_O, VT_I, VT_F }, routine::actionMoveToObject);
    add("ActionMoveAwayFromObject", VT_V, { VT_O, VT_I, VT_F }, routine::actionMoveAwayFromObject);
    add("GetArea", VT_O, { VT_O }, routine::getArea);
    add("GetEnteringObject", VT_O, { }, routine::getEnteringObject);
    add("GetExitingObject", VT_O, { }, routine::getExitingObject);
    add("GetPosition", VT_VECTOR, { VT_O }, routine::getPosition);
    add("GetFacing", VT_F, { VT_O }, routine::getFacing);
    add("GetItemPossessor", VT_O, { VT_O }, routine::getItemPossessor);
    add("GetItemPossessedBy", VT_O, { VT_O, VT_S }, routine::getItemPossessedBy);
    add("CreateItemOnObject", VT_O, { VT_S, VT_O, VT_I }, routine::createItemOnObject);
    add("ActionEquipItem", VT_V, { VT_O, VT_I, VT_I }, routine::actionEquipItem);
    add("ActionUnequipItem", VT_V, { VT_O, VT_I }, routine::actionUnequipItem);
    add("ActionPickUpItem", VT_V, { VT_O }, routine::actionPickUpItem);
    add("ActionPutDownItem", VT_V, { VT_O }, routine::actionPutDownItem);
    add("GetLastAttacker", VT_O, { VT_O }, routine::getLastAttacker);
    add("ActionAttack", VT_V, { VT_O, VT_I }, routine::actionAttack);
    add("GetNearestCreature", VT_O, { VT_I, VT_I, VT_O, VT_I, VT_I, VT_I, VT_I, VT_I }, routine::getNearestCreature);
    add("ActionSpeakString", VT_V, { VT_S, VT_I }, routine::actionSpeakString);
    add("ActionPlayAnimation", VT_V, { VT_I, VT_F, VT_F }, routine::actionPlayAnimation);
    add("GetDistanceToObject", VT_F, { VT_O }, routine::getDistanceToObject);
    add("GetIsObjectValid", VT_I, { VT_O }, routine::getIsObjectValid);
    add("ActionOpenDoor", VT_V, { VT_O }, routine::actionOpenDoor);
    add("ActionCloseDoor", VT_V, { VT_O }, routine::actionCloseDoor);
    add("SetCameraFacing", VT_V, { VT_F }, routine::setCameraFacing);
    add("PlaySound", VT_V, { VT_S }, routine::playSound);
    add("GetSpellTargetObject", VT_O, { }, routine::getSpellTargetObject);
    add("ActionCastSpellAtObject", VT_V, { VT_I, VT_O, VT_I, VT_I, VT_I, VT_I, VT_I }, routine::actionCastSpellAtObject);
    add("GetCurrentHitPoints", VT_I, { VT_O }, routine::getCurrentHitPoints);
    add("GetMaxHitPoints", VT_I, { VT_O }, routine::getMaxHitPoints);
    add("EffectAssuredHit", VT_EFFECT, { }, routine::effectAssuredHit);
    add("GetLastItemEquipped", VT_O, { }, routine::getLastItemEquipped);
    add("GetSubScreenID", VT_I, { }, routine::getSubScreenID);
    add("CancelCombat", VT_V, { VT_O }, routine::cancelCombat);
    add("GetCurrentForcePoints", VT_I, { VT_O }, routine::getCurrentForcePoints);
    add("GetMaxForcePoints", VT_I, { VT_O }, routine::getMaxForcePoints);
    add("PauseGame", VT_V, { VT_I }, routine::pauseGame);
    add("SetPlayerRestrictMode", VT_V, { VT_I }, routine::setPlayerRestrictMode);
    add("GetStringLength", VT_I, { VT_S }, routine::getStringLength);
    add("GetStringUpperCase", VT_S, { VT_S }, routine::getStringUpperCase);
    add("GetStringLowerCase", VT_S, { VT_S }, routine::getStringLowerCase);
    add("GetStringRight", VT_S, { VT_S, VT_I }, routine::getStringRight);
    add("GetStringLeft", VT_S, { VT_S, VT_I }, routine::getStringLeft);
    add("InsertString", VT_S, { VT_S, VT_S, VT_I }, routine::insertString);
    add("GetSubString", VT_S, { VT_S, VT_I, VT_I }, routine::getSubString);
    add("FindSubString", VT_I, { VT_S, VT_S }, routine::findSubString);
    add("fabs", VT_F, { VT_F }, routine::fabs);
    add("cos", VT_F, { VT_F }, routine::cos);
    add("sin", VT_F, { VT_F }, routine::sin);
    add("tan", VT_F, { VT_F }, routine::tan);
    add("acos", VT_F, { VT_F }, routine::acos);
    add("asin", VT_F, { VT_F }, routine::asin);
    add("atan", VT_F, { VT_F }, routine::atan);
    add("log", VT_F, { VT_F }, routine::log);
    add("pow", VT_F, { VT_F, VT_F }, routine::pow);
    add("sqrt", VT_F, { VT_F }, routine::sqrt);
    add("abs", VT_I, { VT_I }, routine::abs);
    add("EffectHeal", VT_EFFECT, { VT_I }, routine::effectHeal);
    add("EffectDamage", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamage);
    add("EffectAbilityIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAbilityIncrease);
    add("EffectDamageResistance", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamageResistance);
    add("EffectResurrection", VT_EFFECT, { }, routine::effectResurrection);
    add("GetPlayerRestrictMode", VT_I, { VT_O }, routine::getPlayerRestrictMode);
    add("GetCasterLevel", VT_I, { VT_O }, routine::getCasterLevel);
    add("GetFirstEffect", VT_EFFECT, { VT_O }, routine::getFirstEffect);
    add("GetNextEffect", VT_EFFECT, { VT_O }, routine::getNextEffect);
    add("RemoveEffect", VT_V, { VT_O, VT_EFFECT }, routine::removeEffect);
    add("GetIsEffectValid", VT_I, { VT_EFFECT }, routine::getIsEffectValid);
    add("GetEffectDurationType", VT_I, { VT_EFFECT }, routine::getEffectDurationType);
    add("GetEffectSubType", VT_I, { VT_EFFECT }, routine::getEffectSubType);
    add("GetEffectCreator", VT_O, { VT_EFFECT }, routine::getEffectCreator);
    add("IntToString", VT_S, { VT_I }, routine::intToString);
    add("GetFirstObjectInArea", VT_O, { VT_O, VT_I }, routine::getFirstObjectInArea);
    add("GetNextObjectInArea", VT_O, { VT_O, VT_I }, routine::getNextObjectInArea);
    add("d2", VT_I, { VT_I }, routine::d2);
    add("d3", VT_I, { VT_I }, routine::d3);
    add("d4", VT_I, { VT_I }, routine::d4);
    add("d6", VT_I, { VT_I }, routine::d6);
    add("d8", VT_I, { VT_I }, routine::d8);
    add("d10", VT_I, { VT_I }, routine::d10);
    add("d12", VT_I, { VT_I }, routine::d12);
    add("d20", VT_I, { VT_I }, routine::d20);
    add("d100", VT_I, { VT_I }, routine::d100);
    add("VectorMagnitude", VT_F, { VT_VECTOR }, routine::vectorMagnitude);
    add("GetMetaMagicFeat", VT_I, { }, routine::getMetaMagicFeat);
    add("GetObjectType", VT_I, { VT_O }, routine::getObjectType);
    add("GetRacialType", VT_I, { VT_O }, routine::getRacialType);
    add("FortitudeSave", VT_I, { VT_O, VT_I, VT_I, VT_O }, routine::fortitudeSave);
    add("ReflexSave", VT_I, { VT_O, VT_I, VT_I, VT_O }, routine::reflexSave);
    add("WillSave", VT_I, { VT_O, VT_I, VT_I, VT_O }, routine::willSave);
    add("GetSpellSaveDC", VT_I, { }, routine::getSpellSaveDC);
    add("MagicalEffect", VT_EFFECT, { VT_EFFECT }, routine::magicalEffect);
    add("SupernaturalEffect", VT_EFFECT, { VT_EFFECT }, routine::supernaturalEffect);
    add("ExtraordinaryEffect", VT_EFFECT, { VT_EFFECT }, routine::extraordinaryEffect);
    add("EffectACIncrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectACIncrease);
    add("GetAC", VT_I, { VT_O, VT_I }, routine::getAC);
    add("EffectSavingThrowIncrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectSavingThrowIncrease);
    add("EffectAttackIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAttackIncrease);
    add("EffectDamageReduction", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamageReduction);
    add("EffectDamageIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageIncrease);
    add("RoundsToSeconds", VT_F, { VT_I }, routine::roundsToSeconds);
    add("HoursToSeconds", VT_F, { VT_I }, routine::hoursToSeconds);
    add("TurnsToSeconds", VT_F, { VT_I }, routine::turnsToSeconds);
    add("SoundObjectSetFixedVariance", VT_V, { VT_O, VT_F }, routine::soundObjectSetFixedVariance);
    add("GetGoodEvilValue", VT_I, { VT_O }, routine::getGoodEvilValue);
    add("GetPartyMemberCount", VT_I, { }, routine::getPartyMemberCount);
    add("GetAlignmentGoodEvil", VT_I, { VT_O }, routine::getAlignmentGoodEvil);
    add("GetFirstObjectInShape", VT_O, { VT_I, VT_F, VT_LOCATION, VT_I, VT_I, VT_VECTOR }, routine::getFirstObjectInShape);
    add("GetNextObjectInShape", VT_O, { VT_I, VT_F, VT_LOCATION, VT_I, VT_I, VT_VECTOR }, routine::getNextObjectInShape);
    add("EffectEntangle", VT_EFFECT, { }, routine::effectEntangle);
    add("SignalEvent", VT_V, { VT_O, VT_EVENT }, routine::signalEvent);
    add("EventUserDefined", VT_EVENT, { VT_I }, routine::eventUserDefined);
    add("EffectDeath", VT_EFFECT, { VT_I, VT_I }, routine::effectDeath);
    add("EffectKnockdown", VT_EFFECT, { }, routine::effectKnockdown);
    add("ActionGiveItem", VT_V, { VT_O, VT_O }, routine::actionGiveItem);
    add("ActionTakeItem", VT_V, { VT_O, VT_O }, routine::actionTakeItem);
    add("VectorNormalize", VT_VECTOR, { VT_VECTOR }, routine::vectorNormalize);
    add("GetItemStackSize", VT_I, { VT_O }, routine::getItemStackSize);
    add("GetAbilityScore", VT_I, { VT_O, VT_I }, routine::getAbilityScore);
    add("GetIsDead", VT_I, { VT_O }, routine::getIsDead);
    add("PrintVector", VT_V, { VT_VECTOR, VT_I }, routine::printVector);
    add("Vector", VT_VECTOR, { VT_F, VT_F, VT_F }, routine::vectorCreate);
    add("SetFacingPoint", VT_V, { VT_VECTOR }, routine::setFacingPoint);
    add("AngleToVector", VT_VECTOR, { VT_F }, routine::angleToVector);
    add("VectorToAngle", VT_F, { VT_VECTOR }, routine::vectorToAngle);
    add("TouchAttackMelee", VT_I, { VT_O, VT_I }, routine::touchAttackMelee);
    add("TouchAttackRanged", VT_I, { VT_O, VT_I }, routine::touchAttackRanged);
    add("EffectParalyze", VT_EFFECT, { }, routine::effectParalyze);
    add("EffectSpellImmunity", VT_EFFECT, { VT_I }, routine::effectSpellImmunity);
    add("SetItemStackSize", VT_V, { VT_O, VT_I }, routine::setItemStackSize);
    add("GetDistanceBetween", VT_F, { VT_O, VT_O }, routine::getDistanceBetween);
    add("SetReturnStrref", VT_V, { VT_I, VT_I, VT_I }, routine::setReturnStrref);
    add("EffectForceJump", VT_EFFECT, { VT_O, VT_I }, routine::effectForceJump);
    add("EffectSleep", VT_EFFECT, { }, routine::effectSleep);
    add("GetItemInSlot", VT_O, { VT_I, VT_O }, routine::getItemInSlot);
    add("EffectTemporaryForcePoints", VT_EFFECT, { VT_I }, routine::effectTemporaryForcePoints);
    add("EffectConfused", VT_EFFECT, { }, routine::effectConfused);
    add("EffectFrightened", VT_EFFECT, { }, routine::effectFrightened);
    add("EffectChoke", VT_EFFECT, { }, routine::effectChoke);
    add("SetGlobalString", VT_V, { VT_S, VT_S }, routine::setGlobalString);
    add("EffectStunned", VT_EFFECT, { }, routine::effectStunned);
    add("SetCommandable", VT_V, { VT_I, VT_O }, routine::setCommandable);
    add("GetCommandable", VT_I, { VT_O }, routine::getCommandable);
    add("EffectRegenerate", VT_EFFECT, { VT_I, VT_F }, routine::effectRegenerate);
    add("EffectMovementSpeedIncrease", VT_EFFECT, { VT_I }, routine::effectMovementSpeedIncrease);
    add("GetHitDice", VT_I, { VT_O }, routine::getHitDice);
    add("ActionForceFollowObject", VT_V, { VT_O, VT_F }, routine::actionForceFollowObject);
    add("GetTag", VT_S, { VT_O }, routine::getTag);
    add("ResistForce", VT_I, { VT_O, VT_O }, routine::resistForce);
    add("GetEffectType", VT_I, { VT_EFFECT }, routine::getEffectType);
    add("EffectAreaOfEffect", VT_EFFECT, { VT_I, VT_S, VT_S, VT_S }, routine::effectAreaOfEffect);
    add("GetFactionEqual", VT_I, { VT_O, VT_O }, routine::getFactionEqual);
    add("ChangeFaction", VT_V, { VT_O, VT_O }, routine::changeFaction);
    add("GetIsListening", VT_I, { VT_O }, routine::getIsListening);
    add("SetListening", VT_V, { VT_O, VT_I }, routine::setListening);
    add("SetListenPattern", VT_V, { VT_O, VT_S, VT_I }, routine::setListenPattern);
    add("TestStringAgainstPattern", VT_I, { VT_S, VT_S }, routine::testStringAgainstPattern);
    add("GetMatchedSubstring", VT_S, { VT_I }, routine::getMatchedSubstring);
    add("GetMatchedSubstringsCount", VT_I, { }, routine::getMatchedSubstringsCount);
    add("EffectVisualEffect", VT_EFFECT, { VT_I, VT_I }, routine::effectVisualEffect);
    add("GetFactionWeakestMember", VT_O, { VT_O, VT_I }, routine::getFactionWeakestMember);
    add("GetFactionStrongestMember", VT_O, { VT_O, VT_I }, routine::getFactionStrongestMember);
    add("GetFactionMostDamagedMember", VT_O, { VT_O, VT_I }, routine::getFactionMostDamagedMember);
    add("GetFactionLeastDamagedMember", VT_O, { VT_O, VT_I }, routine::getFactionLeastDamagedMember);
    add("GetFactionGold", VT_I, { VT_O }, routine::getFactionGold);
    add("GetFactionAverageReputation", VT_I, { VT_O, VT_O }, routine::getFactionAverageReputation);
    add("GetFactionAverageGoodEvilAlignment", VT_I, { VT_O }, routine::getFactionAverageGoodEvilAlignment);
    add("SoundObjectGetFixedVariance", VT_F, { VT_O }, routine::soundObjectGetFixedVariance);
    add("GetFactionAverageLevel", VT_I, { VT_O }, routine::getFactionAverageLevel);
    add("GetFactionAverageXP", VT_I, { VT_O }, routine::getFactionAverageXP);
    add("GetFactionMostFrequentClass", VT_I, { VT_O }, routine::getFactionMostFrequentClass);
    add("GetFactionWorstAC", VT_O, { VT_O, VT_I }, routine::getFactionWorstAC);
    add("GetFactionBestAC", VT_O, { VT_O, VT_I }, routine::getFactionBestAC);
    add("GetGlobalString", VT_S, { VT_S }, routine::getGlobalString);
    add("GetListenPatternNumber", VT_I, { }, routine::getListenPatternNumber);
    add("ActionJumpToObject", VT_V, { VT_O, VT_I }, routine::actionJumpToObject);
    add("GetWaypointByTag", VT_O, { VT_S }, routine::getWaypointByTag);
    add("GetTransitionTarget", VT_O, { VT_O }, routine::getTransitionTarget);
    add("EffectLinkEffects", VT_EFFECT, { VT_EFFECT, VT_EFFECT }, routine::effectLinkEffects);
    add("GetObjectByTag", VT_O, { VT_S, VT_I }, routine::getObjectByTag);
    add("AdjustAlignment", VT_V, { VT_O, VT_I, VT_I }, routine::adjustAlignment);
    add("ActionWait", VT_V, { VT_F }, routine::actionWait);
    add("SetAreaTransitionBMP", VT_V, { VT_I, VT_S }, routine::setAreaTransitionBMP);
    add("ActionStartConversation", VT_V, { VT_O, VT_S, VT_I, VT_I, VT_I, VT_S, VT_S, VT_S, VT_S, VT_S, VT_S, VT_I }, routine::actionStartConversation);
    add("ActionPauseConversation", VT_V, { }, routine::actionPauseConversation);
    add("ActionResumeConversation", VT_V, { }, routine::actionResumeConversation);
    add("EffectBeam", VT_EFFECT, { VT_I, VT_O, VT_I, VT_I }, routine::effectBeam);
    add("GetReputation", VT_I, { VT_O, VT_O }, routine::getReputation);
    add("AdjustReputation", VT_V, { VT_O, VT_O, VT_I }, routine::adjustReputation);
    add("GetModuleFileName", VT_S, { }, routine::getModuleFileName);
    add("GetGoingToBeAttackedBy", VT_O, { VT_O }, routine::getGoingToBeAttackedBy);
    add("EffectForceResistanceIncrease", VT_EFFECT, { VT_I }, routine::effectForceResistanceIncrease);
    add("GetLocation", VT_LOCATION, { VT_O }, routine::getLocation);
    add("ActionJumpToLocation", VT_V, { VT_LOCATION }, routine::actionJumpToLocation);
    add("Location", VT_LOCATION, { VT_VECTOR, VT_F }, routine::location);
    add("ApplyEffectAtLocation", VT_V, { VT_I, VT_EFFECT, VT_LOCATION, VT_F }, routine::applyEffectAtLocation);
    add("GetIsPC", VT_I, { VT_O }, routine::getIsPC);
    add("FeetToMeters", VT_F, { VT_F }, routine::feetToMeters);
    add("YardsToMeters", VT_F, { VT_F }, routine::yardsToMeters);
    add("ApplyEffectToObject", VT_V, { VT_I, VT_EFFECT, VT_O, VT_F }, routine::applyEffectToObject);
    add("SpeakString", VT_V, { VT_S, VT_I }, routine::speakString);
    add("GetSpellTargetLocation", VT_LOCATION, { }, routine::getSpellTargetLocation);
    add("GetPositionFromLocation", VT_VECTOR, { VT_LOCATION }, routine::getPositionFromLocation);
    add("EffectBodyFuel", VT_EFFECT, { }, routine::effectBodyFuel);
    add("GetFacingFromLocation", VT_F, { VT_LOCATION }, routine::getFacingFromLocation);
    add("GetNearestCreatureToLocation", VT_O, { VT_I, VT_I, VT_LOCATION, VT_I, VT_I, VT_I, VT_I, VT_I }, routine::getNearestCreatureToLocation);
    add("GetNearestObject", VT_O, { VT_I, VT_O, VT_I }, routine::getNearestObject);
    add("GetNearestObjectToLocation", VT_O, { VT_I, VT_LOCATION, VT_I }, routine::getNearestObjectToLocation);
    add("GetNearestObjectByTag", VT_O, { VT_S, VT_O, VT_I }, routine::getNearestObjectByTag);
    add("IntToFloat", VT_F, { VT_I }, routine::intToFloat);
    add("FloatToInt", VT_I, { VT_F }, routine::floatToInt);
    add("StringToInt", VT_I, { VT_S }, routine::stringToInt);
    add("StringToFloat", VT_F, { VT_S }, routine::stringToFloat);
    add("ActionCastSpellAtLocation", VT_V, { VT_I, VT_LOCATION, VT_I, VT_I, VT_I, VT_I }, routine::actionCastSpellAtLocation);
    add("GetIsEnemy", VT_I, { VT_O, VT_O }, routine::getIsEnemy);
    add("GetIsFriend", VT_I, { VT_O, VT_O }, routine::getIsFriend);
    add("GetIsNeutral", VT_I, { VT_O, VT_O }, routine::getIsNeutral);
    add("GetPCSpeaker", VT_O, { }, routine::getPCSpeaker);
    add("GetStringByStrRef", VT_S, { VT_I }, routine::getStringByStrRef);
    add("ActionSpeakStringByStrRef", VT_V, { VT_I, VT_I }, routine::actionSpeakStringByStrRef);
    add("DestroyObject", VT_V, { VT_O, VT_F, VT_I, VT_F }, routine::destroyObject);
    add("GetModule", VT_O, { }, routine::getModule);
    add("CreateObject", VT_O, { VT_I, VT_S, VT_LOCATION, VT_I }, routine::createObject);
    add("EventSpellCastAt", VT_EVENT, { VT_O, VT_I, VT_I }, routine::eventSpellCastAt);
    add("GetLastSpellCaster", VT_O, { }, routine::getLastSpellCaster);
    add("GetLastSpell", VT_I, { }, routine::getLastSpell);
    add("GetUserDefinedEventNumber", VT_I, { }, routine::getUserDefinedEventNumber);
    add("GetSpellId", VT_I, { }, routine::getSpellId);
    add("RandomName", VT_S, { }, routine::randomName);
    add("EffectPoison", VT_EFFECT, { VT_I }, routine::effectPoison);
    add("GetLoadFromSaveGame", VT_I, { }, routine::getLoadFromSaveGame);
    add("EffectAssuredDeflection", VT_EFFECT, { VT_I }, routine::effectAssuredDeflection);
    add("GetName", VT_S, { VT_O }, routine::getName);
    add("GetLastSpeaker", VT_O, { }, routine::getLastSpeaker);
    add("BeginConversation", VT_I, { VT_S, VT_O }, routine::beginConversation);
    add("GetLastPerceived", VT_O, { }, routine::getLastPerceived);
    add("GetLastPerceptionHeard", VT_I, { }, routine::getLastPerceptionHeard);
    add("GetLastPerceptionInaudible", VT_I, { }, routine::getLastPerceptionInaudible);
    add("GetLastPerceptionSeen", VT_I, { }, routine::getLastPerceptionSeen);
    add("GetLastClosedBy", VT_O, { }, routine::getLastClosedBy);
    add("GetLastPerceptionVanished", VT_I, { }, routine::getLastPerceptionVanished);
    add("GetFirstInPersistentObject", VT_O, { VT_O, VT_I, VT_I }, routine::getFirstInPersistentObject);
    add("GetNextInPersistentObject", VT_O, { VT_O, VT_I, VT_I }, routine::getNextInPersistentObject);
    add("GetAreaOfEffectCreator", VT_O, { VT_O }, routine::getAreaOfEffectCreator);
    add("ShowLevelUpGUI", VT_I, { }, routine::showLevelUpGUI);
    add("SetItemNonEquippable", VT_V, { VT_O, VT_I }, routine::setItemNonEquippable);
    add("GetButtonMashCheck", VT_I, { }, routine::getButtonMashCheck);
    add("SetButtonMashCheck", VT_V, { VT_I }, routine::setButtonMashCheck);
    add("EffectForcePushTargeted", VT_EFFECT, { VT_LOCATION, VT_I }, routine::effectForcePushTargeted);
    add("EffectHaste", VT_EFFECT, { }, routine::effectHaste);
    add("GiveItem", VT_V, { VT_O, VT_O }, routine::giveItem);
    add("ObjectToString", VT_S, { VT_O }, routine::objectToString);
    add("EffectImmunity", VT_EFFECT, { VT_I }, routine::effectImmunity);
    add("GetIsImmune", VT_I, { VT_O, VT_I, VT_O }, routine::getIsImmune);
    add("EffectDamageImmunityIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageImmunityIncrease);
    add("GetEncounterActive", VT_I, { VT_O }, routine::getEncounterActive);
    add("SetEncounterActive", VT_V, { VT_I, VT_O }, routine::setEncounterActive);
    add("GetEncounterSpawnsMax", VT_I, { VT_O }, routine::getEncounterSpawnsMax);
    add("SetEncounterSpawnsMax", VT_V, { VT_I, VT_O }, routine::setEncounterSpawnsMax);
    add("GetEncounterSpawnsCurrent", VT_I, { VT_O }, routine::getEncounterSpawnsCurrent);
    add("SetEncounterSpawnsCurrent", VT_V, { VT_I, VT_O }, routine::setEncounterSpawnsCurrent);
    add("GetModuleItemAcquired", VT_O, { }, routine::getModuleItemAcquired);
    add("GetModuleItemAcquiredFrom", VT_O, { }, routine::getModuleItemAcquiredFrom);
    add("SetCustomToken", VT_V, { VT_I, VT_S }, routine::setCustomToken);
    add("GetHasFeat", VT_I, { VT_I, VT_O }, routine::getHasFeat);
    add("GetHasSkill", VT_I, { VT_I, VT_O }, routine::getHasSkill);
    add("ActionUseFeat", VT_V, { VT_I, VT_O }, routine::actionUseFeat);
    add("ActionUseSkill", VT_V, { VT_I, VT_O, VT_I, VT_O }, routine::actionUseSkill);
    add("GetObjectSeen", VT_I, { VT_O, VT_O }, routine::getObjectSeen);
    add("GetObjectHeard", VT_I, { VT_O, VT_O }, routine::getObjectHeard);
    add("GetLastPlayerDied", VT_O, { }, routine::getLastPlayerDied);
    add("GetModuleItemLost", VT_O, { }, routine::getModuleItemLost);
    add("GetModuleItemLostBy", VT_O, { }, routine::getModuleItemLostBy);
    add("ActionDoCommand", VT_V, { VT_ACTION }, routine::actionDoCommand);
    add("EventConversation", VT_EVENT, { }, routine::eventConversation);
    add("SetEncounterDifficulty", VT_V, { VT_I, VT_O }, routine::setEncounterDifficulty);
    add("GetEncounterDifficulty", VT_I, { VT_O }, routine::getEncounterDifficulty);
    add("GetDistanceBetweenLocations", VT_F, { VT_LOCATION, VT_LOCATION }, routine::getDistanceBetweenLocations);
    add("GetReflexAdjustedDamage", VT_I, { VT_I, VT_O, VT_I, VT_I, VT_O }, routine::getReflexAdjustedDamage);
    add("PlayAnimation", VT_V, { VT_I, VT_F, VT_F }, routine::playAnimation);
    add("TalentSpell", VT_TALENT, { VT_I }, routine::talentSpell);
    add("TalentFeat", VT_TALENT, { VT_I }, routine::talentFeat);
    add("TalentSkill", VT_TALENT, { VT_I }, routine::talentSkill);
    add("GetHasSpellEffect", VT_I, { VT_I, VT_O }, routine::getHasSpellEffect);
    add("GetEffectSpellId", VT_I, { VT_EFFECT }, routine::getEffectSpellId);
    add("GetCreatureHasTalent", VT_I, { VT_TALENT, VT_O }, routine::getCreatureHasTalent);
    add("GetCreatureTalentRandom", VT_TALENT, { VT_I, VT_O, VT_I }, routine::getCreatureTalentRandom);
    add("GetCreatureTalentBest", VT_TALENT, { VT_I, VT_I, VT_O, VT_I, VT_I, VT_I }, routine::getCreatureTalentBest);
    add("ActionUseTalentOnObject", VT_V, { VT_TALENT, VT_O }, routine::actionUseTalentOnObject);
    add("ActionUseTalentAtLocation", VT_V, { VT_TALENT, VT_LOCATION }, routine::actionUseTalentAtLocation);
    add("GetGoldPieceValue", VT_I, { VT_O }, routine::getGoldPieceValue);
    add("GetIsPlayableRacialType", VT_I, { VT_O }, routine::getIsPlayableRacialType);
    add("JumpToLocation", VT_V, { VT_LOCATION }, routine::jumpToLocation);
    add("EffectTemporaryHitpoints", VT_EFFECT, { VT_I }, routine::effectTemporaryHitpoints);
    add("GetSkillRank", VT_I, { VT_I, VT_O }, routine::getSkillRank);
    add("GetAttackTarget", VT_O, { VT_O }, routine::getAttackTarget);
    add("GetLastAttackType", VT_I, { VT_O }, routine::getLastAttackType);
    add("GetLastAttackMode", VT_I, { VT_O }, routine::getLastAttackMode);
    add("GetDistanceBetween2D", VT_F, { VT_O, VT_O }, routine::getDistanceBetween2D);
    add("GetIsInCombat", VT_I, { VT_O }, routine::getIsInCombat);
    add("GetLastAssociateCommand", VT_I, { VT_O }, routine::getLastAssociateCommand);
    add("GiveGoldToCreature", VT_V, { VT_O, VT_I }, routine::giveGoldToCreature);
    add("SetIsDestroyable", VT_V, { VT_I, VT_I, VT_I }, routine::setIsDestroyable);
    add("SetLocked", VT_V, { VT_O, VT_I }, routine::setLocked);
    add("GetLocked", VT_I, { VT_O }, routine::getLocked);
    add("GetClickingObject", VT_O, { }, routine::getClickingObject);
    add("SetAssociateListenPatterns", VT_V, { VT_O }, routine::setAssociateListenPatterns);
    add("GetLastWeaponUsed", VT_O, { VT_O }, routine::getLastWeaponUsed);
    add("ActionInteractObject", VT_V, { VT_O }, routine::actionInteractObject);
    add("GetLastUsedBy", VT_O, { }, routine::getLastUsedBy);
    add("GetAbilityModifier", VT_I, { VT_I, VT_O }, routine::getAbilityModifier);
    add("GetIdentified", VT_I, { VT_O }, routine::getIdentified);
    add("SetIdentified", VT_V, { VT_O, VT_I }, routine::setIdentified);
    add("GetDistanceBetweenLocations2D", VT_F, { VT_LOCATION, VT_LOCATION }, routine::getDistanceBetweenLocations2D);
    add("GetDistanceToObject2D", VT_F, { VT_O }, routine::getDistanceToObject2D);
    add("GetBlockingDoor", VT_O, { }, routine::getBlockingDoor);
    add("GetIsDoorActionPossible", VT_I, { VT_O, VT_I }, routine::getIsDoorActionPossible);
    add("DoDoorAction", VT_V, { VT_O, VT_I }, routine::doDoorAction);
    add("GetFirstItemInInventory", VT_O, { VT_O }, routine::getFirstItemInInventory);
    add("GetNextItemInInventory", VT_O, { VT_O }, routine::getNextItemInInventory);
    add("GetClassByPosition", VT_I, { VT_I, VT_O }, routine::getClassByPosition);
    add("GetLevelByPosition", VT_I, { VT_I, VT_O }, routine::getLevelByPosition);
    add("GetLevelByClass", VT_I, { VT_I, VT_O }, routine::getLevelByClass);
    add("GetDamageDealtByType", VT_I, { VT_I }, routine::getDamageDealtByType);
    add("GetTotalDamageDealt", VT_I, { }, routine::getTotalDamageDealt);
    add("GetLastDamager", VT_O, { }, routine::getLastDamager);
    add("GetLastDisarmed", VT_O, { }, routine::getLastDisarmed);
    add("GetLastDisturbed", VT_O, { }, routine::getLastDisturbed);
    add("GetLastLocked", VT_O, { }, routine::getLastLocked);
    add("GetLastUnlocked", VT_O, { }, routine::getLastUnlocked);
    add("EffectSkillIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectSkillIncrease);
    add("GetInventoryDisturbType", VT_I, { }, routine::getInventoryDisturbType);
    add("GetInventoryDisturbItem", VT_O, { }, routine::getInventoryDisturbItem);
    add("ShowUpgradeScreen", VT_V, { VT_O }, routine::showUpgradeScreen);
    add("VersusAlignmentEffect", VT_EFFECT, { VT_EFFECT, VT_I, VT_I }, routine::versusAlignmentEffect);
    add("VersusRacialTypeEffect", VT_EFFECT, { VT_EFFECT, VT_I }, routine::versusRacialTypeEffect);
    add("VersusTrapEffect", VT_EFFECT, { VT_EFFECT }, routine::versusTrapEffect);
    add("GetGender", VT_I, { VT_O }, routine::getGender);
    add("GetIsTalentValid", VT_I, { VT_TALENT }, routine::getIsTalentValid);
    add("ActionMoveAwayFromLocation", VT_V, { VT_LOCATION, VT_I, VT_F }, routine::actionMoveAwayFromLocation);
    add("GetAttemptedAttackTarget", VT_O, { }, routine::getAttemptedAttackTarget);
    add("GetTypeFromTalent", VT_I, { VT_TALENT }, routine::getTypeFromTalent);
    add("GetIdFromTalent", VT_I, { VT_TALENT }, routine::getIdFromTalent);
    add("PlayPazaak", VT_V, { VT_I, VT_S, VT_I, VT_I, VT_O }, routine::playPazaak);
    add("GetLastPazaakResult", VT_I, { }, routine::getLastPazaakResult);
    add("DisplayFeedBackText", VT_V, { VT_O, VT_I }, routine::displayFeedBackText);
    add("AddJournalQuestEntry", VT_V, { VT_S, VT_I, VT_I }, routine::addJournalQuestEntry);
    add("RemoveJournalQuestEntry", VT_V, { VT_S }, routine::removeJournalQuestEntry);
    add("GetJournalEntry", VT_I, { VT_S }, routine::getJournalEntry);
    add("PlayRumblePattern", VT_I, { VT_I }, routine::playRumblePattern);
    add("StopRumblePattern", VT_I, { VT_I }, routine::stopRumblePattern);
    add("EffectDamageForcePoints", VT_EFFECT, { VT_I }, routine::effectDamageForcePoints);
    add("EffectHealForcePoints", VT_EFFECT, { VT_I }, routine::effectHealForcePoints);
    add("SendMessageToPC", VT_V, { VT_O, VT_S }, routine::sendMessageToPC);
    add("GetAttemptedSpellTarget", VT_O, { }, routine::getAttemptedSpellTarget);
    add("GetLastOpenedBy", VT_O, { }, routine::getLastOpenedBy);
    add("GetHasSpell", VT_I, { VT_I, VT_O }, routine::getHasSpell);
    add("OpenStore", VT_V, { VT_O, VT_O, VT_I, VT_I }, routine::openStore);
    add("ActionSurrenderToEnemies", VT_V, { }, routine::actionSurrenderToEnemies);
    add("GetFirstFactionMember", VT_O, { VT_O, VT_I }, routine::getFirstFactionMember);
    add("GetNextFactionMember", VT_O, { VT_O, VT_I }, routine::getNextFactionMember);
    add("ActionForceMoveToLocation", VT_V, { VT_LOCATION, VT_I, VT_F }, routine::actionForceMoveToLocation);
    add("ActionForceMoveToObject", VT_V, { VT_O, VT_I, VT_F, VT_F }, routine::actionForceMoveToObject);
    add("GetJournalQuestExperience", VT_I, { VT_S }, routine::getJournalQuestExperience);
    add("JumpToObject", VT_V, { VT_O, VT_I }, routine::jumpToObject);
    add("SetMapPinEnabled", VT_V, { VT_O, VT_I }, routine::setMapPinEnabled);
    add("EffectHitPointChangeWhenDying", VT_EFFECT, { VT_F }, routine::effectHitPointChangeWhenDying);
    add("PopUpGUIPanel", VT_V, { VT_O, VT_I }, routine::popUpGUIPanel);
    add("AddMultiClass", VT_V, { VT_I, VT_O }, routine::addMultiClass);
    add("GetIsLinkImmune", VT_I, { VT_O, VT_EFFECT }, routine::getIsLinkImmune);
    add("EffectDroidStun", VT_EFFECT, { }, routine::effectDroidStun);
    add("EffectForcePushed", VT_EFFECT, { }, routine::effectForcePushed);
    add("GiveXPToCreature", VT_V, { VT_O, VT_I }, routine::giveXPToCreature);
    add("SetXP", VT_V, { VT_O, VT_I }, routine::setXP);
    add("GetXP", VT_I, { VT_O }, routine::getXP);
    add("IntToHexString", VT_S, { VT_I }, routine::intToHexString);
    add("GetBaseItemType", VT_I, { VT_O }, routine::getBaseItemType);
    add("GetItemHasItemProperty", VT_I, { VT_O, VT_I }, routine::getItemHasItemProperty);
    add("ActionEquipMostDamagingMelee", VT_V, { VT_O, VT_I }, routine::actionEquipMostDamagingMelee);
    add("ActionEquipMostDamagingRanged", VT_V, { VT_O }, routine::actionEquipMostDamagingRanged);
    add("GetItemACValue", VT_I, { VT_O }, routine::getItemACValue);
    add("EffectForceResisted", VT_EFFECT, { VT_O }, routine::effectForceResisted);
    add("ExploreAreaForPlayer", VT_V, { VT_O, VT_O }, routine::exploreAreaForPlayer);
    add("ActionEquipMostEffectiveArmor", VT_V, { }, routine::actionEquipMostEffectiveArmor);
    add("GetIsDay", VT_I, { }, routine::getIsDay);
    add("GetIsNight", VT_I, { }, routine::getIsNight);
    add("GetIsDawn", VT_I, { }, routine::getIsDawn);
    add("GetIsDusk", VT_I, { }, routine::getIsDusk);
    add("GetIsEncounterCreature", VT_I, { VT_O }, routine::getIsEncounterCreature);
    add("GetLastPlayerDying", VT_O, { }, routine::getLastPlayerDying);
    add("GetStartingLocation", VT_LOCATION, { }, routine::getStartingLocation);
    add("ChangeToStandardFaction", VT_V, { VT_O, VT_I }, routine::changeToStandardFaction);
    add("SoundObjectPlay", VT_V, { VT_O }, routine::soundObjectPlay);
    add("SoundObjectStop", VT_V, { VT_O }, routine::soundObjectStop);
    add("SoundObjectSetVolume", VT_V, { VT_O, VT_I }, routine::soundObjectSetVolume);
    add("SoundObjectSetPosition", VT_V, { VT_O, VT_VECTOR }, routine::soundObjectSetPosition);
    add("SpeakOneLinerConversation", VT_V, { VT_S, VT_O }, routine::speakOneLinerConversation);
    add("GetGold", VT_I, { VT_O }, routine::getGold);
    add("GetLastRespawnButtonPresser", VT_O, { }, routine::getLastRespawnButtonPresser);
    add("EffectForceFizzle", VT_EFFECT, { }, routine::effectForceFizzle);
    add("SetLightsaberPowered", VT_V, { VT_O, VT_I, VT_I, VT_I }, routine::setLightsaberPowered);
    add("GetIsWeaponEffective", VT_I, { VT_O, VT_I }, routine::getIsWeaponEffective);
    add("GetLastSpellHarmful", VT_I, { }, routine::getLastSpellHarmful);
    add("EventActivateItem", VT_EVENT, { VT_O, VT_LOCATION, VT_O }, routine::eventActivateItem);
    add("MusicBackgroundPlay", VT_V, { VT_O }, routine::musicBackgroundPlay);
    add("MusicBackgroundStop", VT_V, { VT_O }, routine::musicBackgroundStop);
    add("MusicBackgroundSetDelay", VT_V, { VT_O, VT_I }, routine::musicBackgroundSetDelay);
    add("MusicBackgroundChangeDay", VT_V, { VT_O, VT_I }, routine::musicBackgroundChangeDay);
    add("MusicBackgroundChangeNight", VT_V, { VT_O, VT_I }, routine::musicBackgroundChangeNight);
    add("MusicBattlePlay", VT_V, { VT_O }, routine::musicBattlePlay);
    add("MusicBattleStop", VT_V, { VT_O }, routine::musicBattleStop);
    add("MusicBattleChange", VT_V, { VT_O, VT_I }, routine::musicBattleChange);
    add("AmbientSoundPlay", VT_V, { VT_O }, routine::ambientSoundPlay);
    add("AmbientSoundStop", VT_V, { VT_O }, routine::ambientSoundStop);
    add("AmbientSoundChangeDay", VT_V, { VT_O, VT_I }, routine::ambientSoundChangeDay);
    add("AmbientSoundChangeNight", VT_V, { VT_O, VT_I }, routine::ambientSoundChangeNight);
    add("GetLastKiller", VT_O, { }, routine::getLastKiller);
    add("GetSpellCastItem", VT_O, { }, routine::getSpellCastItem);
    add("GetItemActivated", VT_O, { }, routine::getItemActivated);
    add("GetItemActivator", VT_O, { }, routine::getItemActivator);
    add("GetItemActivatedTargetLocation", VT_LOCATION, { }, routine::getItemActivatedTargetLocation);
    add("GetItemActivatedTarget", VT_O, { }, routine::getItemActivatedTarget);
    add("GetIsOpen", VT_I, { VT_O }, routine::getIsOpen);
    add("TakeGoldFromCreature", VT_V, { VT_I, VT_O, VT_I }, routine::takeGoldFromCreature);
    add("GetIsInConversation", VT_I, { VT_O }, routine::getIsInConversation);
    add("EffectAbilityDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAbilityDecrease);
    add("EffectAttackDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAttackDecrease);
    add("EffectDamageDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageDecrease);
    add("EffectDamageImmunityDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageImmunityDecrease);
    add("EffectACDecrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectACDecrease);
    add("EffectMovementSpeedDecrease", VT_EFFECT, { VT_I }, routine::effectMovementSpeedDecrease);
    add("EffectSavingThrowDecrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectSavingThrowDecrease);
    add("EffectSkillDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectSkillDecrease);
    add("EffectForceResistanceDecrease", VT_EFFECT, { VT_I }, routine::effectForceResistanceDecrease);
    add("GetPlotFlag", VT_I, { VT_O }, routine::getPlotFlag);
    add("SetPlotFlag", VT_V, { VT_O, VT_I }, routine::setPlotFlag);
    add("EffectInvisibility", VT_EFFECT, { VT_I }, routine::effectInvisibility);
    add("EffectConcealment", VT_EFFECT, { VT_I }, routine::effectConcealment);
    add("EffectForceShield", VT_EFFECT, { VT_I }, routine::effectForceShield);
    add("EffectDispelMagicAll", VT_EFFECT, { VT_I }, routine::effectDispelMagicAll);
    add("SetDialogPlaceableCamera", VT_V, { VT_I }, routine::setDialogPlaceableCamera);
    add("GetSoloMode", VT_I, { }, routine::getSoloMode);
    add("EffectDisguise", VT_EFFECT, { VT_I }, routine::effectDisguise);
    add("GetMaxStealthXP", VT_I, { }, routine::getMaxStealthXP);
    add("EffectTrueSeeing", VT_EFFECT, { }, routine::effectTrueSeeing);
    add("EffectSeeInvisible", VT_EFFECT, { }, routine::effectSeeInvisible);
    add("EffectTimeStop", VT_EFFECT, { }, routine::effectTimeStop);
    add("SetMaxStealthXP", VT_V, { VT_I }, routine::setMaxStealthXP);
    add("EffectBlasterDeflectionIncrease", VT_EFFECT, { VT_I }, routine::effectBlasterDeflectionIncrease);
    add("EffectBlasterDeflectionDecrease", VT_EFFECT, { VT_I }, routine::effectBlasterDeflectionDecrease);
    add("EffectHorrified", VT_EFFECT, { }, routine::effectHorrified);
    add("EffectSpellLevelAbsorption", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectSpellLevelAbsorption);
    add("EffectDispelMagicBest", VT_EFFECT, { VT_I }, routine::effectDispelMagicBest);
    add("GetCurrentStealthXP", VT_I, { }, routine::getCurrentStealthXP);
    add("GetNumStackedItems", VT_I, { VT_O }, routine::getNumStackedItems);
    add("SurrenderToEnemies", VT_V, { }, routine::surrenderToEnemies);
    add("EffectMissChance", VT_EFFECT, { VT_I }, routine::effectMissChance);
    add("SetCurrentStealthXP", VT_V, { VT_I }, routine::setCurrentStealthXP);
    add("GetCreatureSize", VT_I, { VT_O }, routine::getCreatureSize);
    add("AwardStealthXP", VT_V, { VT_O }, routine::awardStealthXP);
    add("GetStealthXPEnabled", VT_I, { }, routine::getStealthXPEnabled);
    add("SetStealthXPEnabled", VT_V, { VT_I }, routine::setStealthXPEnabled);
    add("ActionUnlockObject", VT_V, { VT_O }, routine::actionUnlockObject);
    add("ActionLockObject", VT_V, { VT_O }, routine::actionLockObject);
    add("EffectModifyAttacks", VT_EFFECT, { VT_I }, routine::effectModifyAttacks);
    add("GetLastTrapDetected", VT_O, { VT_O }, routine::getLastTrapDetected);
    add("EffectDamageShield", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamageShield);
    add("GetNearestTrapToObject", VT_O, { VT_O, VT_I }, routine::getNearestTrapToObject);
    add("GetAttemptedMovementTarget", VT_O, { }, routine::getAttemptedMovementTarget);
    add("GetBlockingCreature", VT_O, { VT_O }, routine::getBlockingCreature);
    add("GetFortitudeSavingThrow", VT_I, { VT_O }, routine::getFortitudeSavingThrow);
    add("GetWillSavingThrow", VT_I, { VT_O }, routine::getWillSavingThrow);
    add("GetReflexSavingThrow", VT_I, { VT_O }, routine::getReflexSavingThrow);
    add("GetChallengeRating", VT_F, { VT_O }, routine::getChallengeRating);
    add("GetFoundEnemyCreature", VT_O, { VT_O }, routine::getFoundEnemyCreature);
    add("GetMovementRate", VT_I, { VT_O }, routine::getMovementRate);
    add("GetSubRace", VT_I, { VT_O }, routine::getSubRace);
    add("GetStealthXPDecrement", VT_I, { }, routine::getStealthXPDecrement);
    add("SetStealthXPDecrement", VT_V, { VT_I }, routine::setStealthXPDecrement);
    add("DuplicateHeadAppearance", VT_V, { VT_O, VT_O }, routine::duplicateHeadAppearance);
    add("ActionCastFakeSpellAtObject", VT_V, { VT_I, VT_O, VT_I }, routine::actionCastFakeSpellAtObject);
    add("ActionCastFakeSpellAtLocation", VT_V, { VT_I, VT_LOCATION, VT_I }, routine::actionCastFakeSpellAtLocation);
    add("CutsceneAttack", VT_V, { VT_O, VT_I, VT_I, VT_I }, routine::cutsceneAttack);
    add("SetCameraMode", VT_V, { VT_O, VT_I }, routine::setCameraMode);
    add("SetLockOrientationInDialog", VT_V, { VT_O, VT_I }, routine::setLockOrientationInDialog);
    add("SetLockHeadFollowInDialog", VT_V, { VT_O, VT_I }, routine::setLockHeadFollowInDialog);
    add("CutsceneMove", VT_V, { VT_O, VT_VECTOR, VT_I }, routine::cutsceneMove);
    add("EnableVideoEffect", VT_V, { VT_I }, routine::enableVideoEffect);
    add("StartNewModule", VT_V, { VT_S, VT_S, VT_S, VT_S, VT_S, VT_S, VT_S, VT_S }, routine::startNewModule);
    add("DisableVideoEffect", VT_V, { }, routine::disableVideoEffect);
    add("GetWeaponRanged", VT_I, { VT_O }, routine::getWeaponRanged);
    add("DoSinglePlayerAutoSave", VT_V, { }, routine::doSinglePlayerAutoSave);
    add("GetGameDifficulty", VT_I, { }, routine::getGameDifficulty);
    add("GetUserActionsPending", VT_I, { }, routine::getUserActionsPending);
    add("RevealMap", VT_V, { VT_VECTOR, VT_I }, routine::revealMap);
    add("SetTutorialWindowsEnabled", VT_V, { VT_I }, routine::setTutorialWindowsEnabled);
    add("ShowTutorialWindow", VT_V, { VT_I }, routine::showTutorialWindow);
    add("StartCreditSequence", VT_V, { VT_I }, routine::startCreditSequence);
    add("IsCreditSequenceInProgress", VT_I, { }, routine::isCreditSequenceInProgress);

    add("SWMG_SetLateralAccelerationPerSecond", VT_V, { VT_F }, routine::minigame::setLateralAccelerationPerSecond);
    add("SWMG_GetLateralAccelerationPerSecond", VT_F, { }, routine::minigame::getLateralAccelerationPerSecond);

    add("GetCurrentAction", VT_I, { VT_O }, routine::getCurrentAction);
    add("GetDifficultyModifier", VT_F, { }, routine::getDifficultyModifier);
    add("GetAppearanceType", VT_I, { VT_O }, routine::getAppearanceType);
    add("FloatingTextStrRefOnCreature", VT_V, { VT_I, VT_O, VT_I }, routine::floatingTextStrRefOnCreature);
    add("FloatingTextStringOnCreature", VT_V, { VT_S, VT_O, VT_I }, routine::floatingTextStringOnCreature);
    add("GetTrapDisarmable", VT_I, { VT_O }, routine::getTrapDisarmable);
    add("GetTrapDetectable", VT_I, { VT_O }, routine::getTrapDetectable);
    add("GetTrapDetectedBy", VT_I, { VT_O, VT_O }, routine::getTrapDetectedBy);
    add("GetTrapFlagged", VT_I, { VT_O }, routine::getTrapFlagged);
    add("GetTrapBaseType", VT_I, { VT_O }, routine::getTrapBaseType);
    add("GetTrapOneShot", VT_I, { VT_O }, routine::getTrapOneShot);
    add("GetTrapCreator", VT_O, { VT_O }, routine::getTrapCreator);
    add("GetTrapKeyTag", VT_S, { VT_O }, routine::getTrapKeyTag);
    add("GetTrapDisarmDC", VT_I, { VT_O }, routine::getTrapDisarmDC);
    add("GetTrapDetectDC", VT_I, { VT_O }, routine::getTrapDetectDC);
    add("GetLockKeyRequired", VT_I, { VT_O }, routine::getLockKeyRequired);
    add("GetLockKeyTag", VT_I, { VT_O }, routine::getLockKeyTag);
    add("GetLockLockable", VT_I, { VT_O }, routine::getLockLockable);
    add("GetLockUnlockDC", VT_I, { VT_O }, routine::getLockUnlockDC);
    add("GetLockLockDC", VT_I, { VT_O }, routine::getLockLockDC);
    add("GetPCLevellingUp", VT_O, { }, routine::getPCLevellingUp);
    add("GetHasFeatEffect", VT_I, { VT_I, VT_O }, routine::getHasFeatEffect);
    add("SetPlaceableIllumination", VT_V, { VT_O, VT_I }, routine::setPlaceableIllumination);
    add("GetPlaceableIllumination", VT_I, { VT_O }, routine::getPlaceableIllumination);
    add("GetIsPlaceableObjectActionPossible", VT_I, { VT_O, VT_I }, routine::getIsPlaceableObjectActionPossible);
    add("DoPlaceableObjectAction", VT_V, { VT_O, VT_I }, routine::doPlaceableObjectAction);
    add("GetFirstPC", VT_O, { }, routine::getFirstPC);
    add("GetNextPC", VT_O, { }, routine::getNextPC);
    add("SetTrapDetectedBy", VT_I, { VT_O, VT_O }, routine::setTrapDetectedBy);
    add("GetIsTrapped", VT_I, { VT_O }, routine::getIsTrapped);
    add("SetEffectIcon", VT_EFFECT, { VT_EFFECT, VT_I }, routine::setEffectIcon);
    add("FaceObjectAwayFromObject", VT_V, { VT_O, VT_O }, routine::faceObjectAwayFromObject);
    add("PopUpDeathGUIPanel", VT_V, { VT_O, VT_I, VT_I, VT_I, VT_S }, routine::popUpDeathGUIPanel);
    add("SetTrapDisabled", VT_V, { VT_O }, routine::setTrapDisabled);
    add("GetLastHostileActor", VT_O, { VT_O }, routine::getLastHostileActor);
    add("ExportAllCharacters", VT_V, { }, routine::exportAllCharacters);
    add("MusicBackgroundGetDayTrack", VT_I, { VT_O }, routine::musicBackgroundGetDayTrack);
    add("MusicBackgroundGetNightTrack", VT_I, { VT_O }, routine::musicBackgroundGetNightTrack);
    add("WriteTimestampedLogEntry", VT_V, { VT_S }, routine::writeTimestampedLogEntry);
    add("GetModuleName", VT_S, { }, routine::getModuleName);
    add("GetFactionLeader", VT_O, { VT_O }, routine::getFactionLeader);

    add("SWMG_SetSpeedBlurEffect", VT_V, { VT_I, VT_F }, routine::minigame::setSpeedBlurEffect);

    add("EndGame", VT_V, { VT_I }, routine::endGame);
    add("GetRunScriptVar", VT_I, { }, routine::getRunScriptVar);
    add("GetCreatureMovmentType", VT_I, { VT_O }, routine::getCreatureMovmentType);
    add("AmbientSoundSetDayVolume", VT_V, { VT_O, VT_I }, routine::ambientSoundSetDayVolume);
    add("AmbientSoundSetNightVolume", VT_V, { VT_O, VT_I }, routine::ambientSoundSetNightVolume);
    add("MusicBackgroundGetBattleTrack", VT_I, { VT_O }, routine::musicBackgroundGetBattleTrack);
    add("GetHasInventory", VT_I, { VT_O }, routine::getHasInventory);
    add("GetStrRefSoundDuration", VT_F, { VT_I }, routine::getStrRefSoundDuration);
    add("AddToParty", VT_V, { VT_O, VT_O }, routine::addToParty);
    add("RemoveFromParty", VT_V, { VT_O }, routine::removeFromParty);
    add("AddPartyMember", VT_I, { VT_I, VT_O }, routine::addPartyMember);
    add("RemovePartyMember", VT_I, { VT_I }, routine::removePartyMember);
    add("IsObjectPartyMember", VT_I, { VT_O }, routine::isObjectPartyMember);
    add("GetPartyMemberByIndex", VT_O, { VT_I }, routine::getPartyMemberByIndex);
    add("GetGlobalBoolean", VT_I, { VT_S }, routine::getGlobalBoolean);
    add("SetGlobalBoolean", VT_V, { VT_S, VT_I }, routine::setGlobalBoolean);
    add("GetGlobalNumber", VT_I, { VT_S }, routine::getGlobalNumber);
    add("SetGlobalNumber", VT_V, { VT_S, VT_I }, routine::setGlobalNumber);
    add("AurPostString", VT_V, { VT_S, VT_I, VT_I, VT_F }, routine::aurPostString);

    add("SWMG_GetLastEvent", VT_S, { }, routine::minigame::getLastEvent);
    add("SWMG_GetLastEventModelName", VT_S, { }, routine::minigame::getLastEventModelName);
    add("SWMG_GetObjectByName", VT_O, { VT_S }, routine::minigame::getObjectByName);
    add("SWMG_PlayAnimation", VT_V, { VT_O, VT_S, VT_I, VT_I, VT_I }, routine::minigame::playAnimation);
    add("SWMG_GetLastBulletHitDamage", VT_I, { }, routine::minigame::getLastBulletHitDamage);
    add("SWMG_GetLastBulletHitTarget", VT_I, { }, routine::minigame::getLastBulletHitTarget);
    add("SWMG_GetLastBulletHitShooter", VT_O, { }, routine::minigame::getLastBulletHitShooter);
    add("SWMG_AdjustFollowerHitPoints", VT_I, { VT_O, VT_I, VT_I }, routine::minigame::adjustFollowerHitPoints);
    add("SWMG_OnBulletHit", VT_V, { }, routine::minigame::onBulletHit);
    add("SWMG_OnObstacleHit", VT_V, { }, routine::minigame::onObstacleHit);
    add("SWMG_GetLastFollowerHit", VT_O, { }, routine::minigame::getLastFollowerHit);
    add("SWMG_GetLastObstacleHit", VT_O, { }, routine::minigame::getLastObstacleHit);
    add("SWMG_GetLastBulletFiredDamage", VT_I, { }, routine::minigame::getLastBulletFiredDamage);
    add("SWMG_GetLastBulletFiredTarget", VT_I, { }, routine::minigame::getLastBulletFiredTarget);
    add("SWMG_GetObjectName", VT_S, { VT_O }, routine::minigame::getObjectName);
    add("SWMG_OnDeath", VT_V, { }, routine::minigame::onDeath);
    add("SWMG_IsFollower", VT_I, { VT_O }, routine::minigame::isFollower);
    add("SWMG_IsPlayer", VT_I, { VT_O }, routine::minigame::isPlayer);
    add("SWMG_IsEnemy", VT_I, { VT_O }, routine::minigame::isEnemy);
    add("SWMG_IsTrigger", VT_I, { VT_O }, routine::minigame::isTrigger);
    add("SWMG_IsObstacle", VT_I, { VT_O }, routine::minigame::isObstacle);
    add("SWMG_SetFollowerHitPoints", VT_V, { VT_O, VT_I }, routine::minigame::setFollowerHitPoints);
    add("SWMG_OnDamage", VT_V, { }, routine::minigame::onDamage);
    add("SWMG_GetLastHPChange", VT_I, { }, routine::minigame::getLastHPChange);
    add("SWMG_RemoveAnimation", VT_V, { VT_O, VT_S }, routine::minigame::removeAnimation);
    add("SWMG_GetCameraNearClip", VT_F, { }, routine::minigame::getCameraNearClip);
    add("SWMG_GetCameraFarClip", VT_F, { }, routine::minigame::getCameraFarClip);
    add("SWMG_SetCameraClip", VT_V, { VT_F, VT_F }, routine::minigame::setCameraClip);
    add("SWMG_GetPlayer", VT_O, { }, routine::minigame::getPlayer);
    add("SWMG_GetEnemyCount", VT_I, { }, routine::minigame::getEnemyCount);
    add("SWMG_GetEnemy", VT_O, { VT_I }, routine::minigame::getEnemy);
    add("SWMG_GetObstacleCount", VT_I, { }, routine::minigame::getObstacleCount);
    add("SWMG_GetObstacle", VT_O, { VT_I }, routine::minigame::getObstacle);
    add("SWMG_GetHitPoints", VT_I, { VT_O }, routine::minigame::getHitPoints);
    add("SWMG_GetMaxHitPoints", VT_I, { VT_O }, routine::minigame::getMaxHitPoints);
    add("SWMG_SetMaxHitPoints", VT_V, { VT_O, VT_I }, routine::minigame::setMaxHitPoints);
    add("SWMG_GetSphereRadius", VT_F, { VT_O }, routine::minigame::getSphereRadius);
    add("SWMG_SetSphereRadius", VT_V, { VT_O, VT_F }, routine::minigame::setSphereRadius);
    add("SWMG_GetNumLoops", VT_I, { VT_O }, routine::minigame::getNumLoops);
    add("SWMG_SetNumLoops", VT_V, { VT_O, VT_I }, routine::minigame::setNumLoops);
    add("SWMG_GetPosition", VT_VECTOR, { VT_O }, routine::minigame::getPosition);
    add("SWMG_GetGunBankCount", VT_I, { VT_O }, routine::minigame::getGunBankCount);
    add("SWMG_GetGunBankBulletModel", VT_S, { VT_O, VT_I }, routine::minigame::getGunBankBulletModel);
    add("SWMG_GetGunBankGunModel", VT_S, { VT_O, VT_I }, routine::minigame::getGunBankGunModel);
    add("SWMG_GetGunBankDamage", VT_I, { VT_O, VT_I }, routine::minigame::getGunBankDamage);
    add("SWMG_GetGunBankTimeBetweenShots", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankTimeBetweenShots);
    add("SWMG_GetGunBankLifespan", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankLifespan);
    add("SWMG_GetGunBankSpeed", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankSpeed);
    add("SWMG_GetGunBankTarget", VT_I, { VT_O, VT_I }, routine::minigame::getGunBankTarget);
    add("SWMG_SetGunBankBulletModel", VT_V, { VT_O, VT_I, VT_S }, routine::minigame::setGunBankBulletModel);
    add("SWMG_SetGunBankGunModel", VT_V, { VT_O, VT_I, VT_S }, routine::minigame::setGunBankGunModel);
    add("SWMG_SetGunBankDamage", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setGunBankDamage);
    add("SWMG_SetGunBankTimeBetweenShots", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankTimeBetweenShots);
    add("SWMG_SetGunBankLifespan", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankLifespan);
    add("SWMG_SetGunBankSpeed", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankSpeed);
    add("SWMG_SetGunBankTarget", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setGunBankTarget);
    add("SWMG_GetLastBulletHitPart", VT_S, { }, routine::minigame::getLastBulletHitPart);
    add("SWMG_IsGunBankTargetting", VT_I, { VT_O, VT_I }, routine::minigame::isGunBankTargetting);
    add("SWMG_GetPlayerOffset", VT_VECTOR, { }, routine::minigame::getPlayerOffset);
    add("SWMG_GetPlayerInvincibility", VT_F, { }, routine::minigame::getPlayerInvincibility);
    add("SWMG_GetPlayerSpeed", VT_F, { }, routine::minigame::getPlayerSpeed);
    add("SWMG_GetPlayerMinSpeed", VT_F, { }, routine::minigame::getPlayerMinSpeed);
    add("SWMG_GetPlayerAccelerationPerSecond", VT_F, { }, routine::minigame::getPlayerAccelerationPerSecond);
    add("SWMG_GetPlayerTunnelPos", VT_VECTOR, { }, routine::minigame::getPlayerTunnelPos);
    add("SWMG_SetPlayerOffset", VT_V, { VT_VECTOR }, routine::minigame::setPlayerOffset);
    add("SWMG_SetPlayerInvincibility", VT_V, { VT_F }, routine::minigame::setPlayerInvincibility);
    add("SWMG_SetPlayerSpeed", VT_V, { VT_F }, routine::minigame::setPlayerSpeed);
    add("SWMG_SetPlayerMinSpeed", VT_V, { VT_F }, routine::minigame::setPlayerMinSpeed);
    add("SWMG_SetPlayerAccelerationPerSecond", VT_V, { VT_F }, routine::minigame::setPlayerAccelerationPerSecond);
    add("SWMG_SetPlayerTunnelPos", VT_V, { VT_VECTOR }, routine::minigame::setPlayerTunnelPos);
    add("SWMG_GetPlayerTunnelNeg", VT_VECTOR, { }, routine::minigame::getPlayerTunnelNeg);
    add("SWMG_SetPlayerTunnelNeg", VT_V, { VT_VECTOR }, routine::minigame::setPlayerTunnelNeg);
    add("SWMG_GetPlayerOrigin", VT_VECTOR, { }, routine::minigame::getPlayerOrigin);
    add("SWMG_SetPlayerOrigin", VT_V, { VT_VECTOR }, routine::minigame::setPlayerOrigin);
    add("SWMG_GetGunBankHorizontalSpread", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankHorizontalSpread);
    add("SWMG_GetGunBankVerticalSpread", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankVerticalSpread);
    add("SWMG_GetGunBankSensingRadius", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankSensingRadius);
    add("SWMG_GetGunBankInaccuracy", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankInaccuracy);
    add("SWMG_SetGunBankHorizontalSpread", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankHorizontalSpread);
    add("SWMG_SetGunBankVerticalSpread", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankVerticalSpread);
    add("SWMG_SetGunBankSensingRadius", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankSensingRadius);
    add("SWMG_SetGunBankInaccuracy", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankInaccuracy);
    add("SWMG_GetIsInvulnerable", VT_I, { VT_O }, routine::minigame::getIsInvulnerable);
    add("SWMG_StartInvulnerability", VT_V, { VT_O }, routine::minigame::startInvulnerability);
    add("SWMG_GetPlayerMaxSpeed", VT_F, { }, routine::minigame::getPlayerMaxSpeed);
    add("SWMG_SetPlayerMaxSpeed", VT_V, { VT_F }, routine::minigame::setPlayerMaxSpeed);

    add("AddJournalWorldEntry", VT_V, { VT_I, VT_S, VT_S }, routine::addJournalWorldEntry);
    add("AddJournalWorldEntryStrref", VT_V, { VT_I, VT_I }, routine::addJournalWorldEntryStrref);
    add("BarkString", VT_V, { VT_O, VT_I }, routine::barkString);
    add("DeleteJournalWorldAllEntries", VT_V, { }, routine::deleteJournalWorldAllEntries);
    add("DeleteJournalWorldEntry", VT_V, { VT_I }, routine::deleteJournalWorldEntry);
    add("DeleteJournalWorldEntryStrref", VT_V, { VT_I }, routine::deleteJournalWorldEntryStrref);
    add("EffectForceDrain", VT_EFFECT, { VT_I }, routine::effectForceDrain);
    add("EffectPsychicStatic", VT_EFFECT, { }, routine::effectPsychicStatic);
    add("PlayVisualAreaEffect", VT_V, { VT_I, VT_LOCATION }, routine::playVisualAreaEffect);
    add("SetJournalQuestEntryPicture", VT_V, { VT_S, VT_O, VT_I, VT_I, VT_I }, routine::setJournalQuestEntryPicture);
    add("GetLocalBoolean", VT_I, { VT_O, VT_I }, routine::getLocalBoolean);
    add("SetLocalBoolean", VT_V, { VT_O, VT_I, VT_I }, routine::setLocalBoolean);
    add("GetLocalNumber", VT_I, { VT_O, VT_I }, routine::getLocalNumber);
    add("SetLocalNumber", VT_V, { VT_O, VT_I, VT_I }, routine::setLocalNumber);

    add("SWMG_GetSoundFrequency", VT_I, { VT_O, VT_I }, routine::minigame::getSoundFrequency);
    add("SWMG_SetSoundFrequency", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setSoundFrequency);
    add("SWMG_GetSoundFrequencyIsRandom", VT_I, { VT_O, VT_I }, routine::minigame::getSoundFrequencyIsRandom);
    add("SWMG_SetSoundFrequencyIsRandom", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setSoundFrequencyIsRandom);
    add("SWMG_GetSoundVolume", VT_I, { VT_O, VT_I }, routine::minigame::getSoundVolume);
    add("SWMG_SetSoundVolume", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setSoundVolume);

    add("SoundObjectGetPitchVariance", VT_F, { VT_O }, routine::soundObjectGetPitchVariance);
    add("SoundObjectSetPitchVariance", VT_V, { VT_O, VT_F }, routine::soundObjectSetPitchVariance);
    add("SoundObjectGetVolume", VT_I, { VT_O }, routine::soundObjectGetVolume);
    add("GetGlobalLocation", VT_LOCATION, { VT_S }, routine::getGlobalLocation);
    add("SetGlobalLocation", VT_V, { VT_S, VT_LOCATION }, routine::setGlobalLocation);
    add("AddAvailableNPCByObject", VT_I, { VT_I, VT_O }, routine::addAvailableNPCByObject);
    add("RemoveAvailableNPC", VT_I, { VT_I }, routine::removeAvailableNPC);
    add("IsAvailableCreature", VT_I, { VT_I }, routine::isAvailableCreature);
    add("AddAvailableNPCByTemplate", VT_I, { VT_I, VT_S }, routine::addAvailableNPCByTemplate);
    add("SpawnAvailableNPC", VT_O, { VT_I, VT_LOCATION }, routine::spawnAvailableNPC);
    add("IsNPCPartyMember", VT_I, { VT_I }, routine::isNPCPartyMember);
    add("ActionBarkString", VT_V, { VT_I }, routine::actionBarkString);
    add("GetIsConversationActive", VT_I, { }, routine::getIsConversationActive);
    add("EffectLightsaberThrow", VT_EFFECT, { VT_O, VT_O, VT_O, VT_I }, routine::effectLightsaberThrow);
    add("EffectWhirlWind", VT_EFFECT, { }, routine::effectWhirlWind);
    add("GetPartyAIStyle", VT_I, { }, routine::getPartyAIStyle);
    add("GetNPCAIStyle", VT_I, { VT_O }, routine::getNPCAIStyle);
    add("SetPartyAIStyle", VT_V, { VT_I }, routine::setPartyAIStyle);
    add("SetNPCAIStyle", VT_V, { VT_O, VT_I }, routine::setNPCAIStyle);
    add("SetNPCSelectability", VT_V, { VT_I, VT_I }, routine::setNPCSelectability);
    add("GetNPCSelectability", VT_I, { VT_I }, routine::getNPCSelectability);
    add("ClearAllEffects", VT_V, { }, routine::clearAllEffects);
    add("GetLastConversation", VT_S, { }, routine::getLastConversation);
    add("ShowPartySelectionGUI", VT_V, { VT_S, VT_I, VT_I }, routine::showPartySelectionGUI);
    add("GetStandardFaction", VT_I, { VT_O }, routine::getStandardFaction);
    add("GivePlotXP", VT_V, { VT_S, VT_I }, routine::givePlotXP);
    add("GetMinOneHP", VT_I, { VT_O }, routine::getMinOneHP);
    add("SetMinOneHP", VT_V, { VT_O, VT_I }, routine::setMinOneHP);

    add("SWMG_GetPlayerTunnelInfinite", VT_VECTOR, { }, routine::minigame::getPlayerTunnelInfinite);
    add("SWMG_SetPlayerTunnelInfinite", VT_V, { VT_VECTOR }, routine::minigame::setPlayerTunnelInfinite);

    add("SetGlobalFadeIn", VT_V, { VT_F, VT_F, VT_F, VT_F, VT_F }, routine::setGlobalFadeIn);
    add("SetGlobalFadeOut", VT_V, { VT_F, VT_F, VT_F, VT_F, VT_F }, routine::setGlobalFadeOut);
    add("GetLastHostileTarget", VT_O, { VT_O }, routine::getLastHostileTarget);
    add("GetLastAttackAction", VT_I, { VT_O }, routine::getLastAttackAction);
    add("GetLastForcePowerUsed", VT_I, { VT_O }, routine::getLastForcePowerUsed);
    add("GetLastCombatFeatUsed", VT_I, { VT_O }, routine::getLastCombatFeatUsed);
    add("GetLastAttackResult", VT_I, { VT_O }, routine::getLastAttackResult);
    add("GetWasForcePowerSuccessful", VT_I, { VT_O }, routine::getWasForcePowerSuccessful);
    add("GetFirstAttacker", VT_O, { VT_O }, routine::getFirstAttacker);
    add("GetNextAttacker", VT_O, { VT_O }, routine::getNextAttacker);
    add("SetFormation", VT_V, { VT_O, VT_O, VT_I, VT_I }, routine::setFormation);
    add("ActionFollowLeader", VT_V, { }, routine::actionFollowLeader);
    add("SetForcePowerUnsuccessful", VT_V, { VT_I, VT_O }, routine::setForcePowerUnsuccessful);
    add("GetIsDebilitated", VT_I, { VT_O }, routine::getIsDebilitated);
    add("PlayMovie", VT_V, { VT_S }, routine::playMovie);
    add("SaveNPCState", VT_V, { VT_I }, routine::saveNPCState);
    add("GetCategoryFromTalent", VT_I, { VT_TALENT }, routine::getCategoryFromTalent);
    add("SurrenderByFaction", VT_V, { VT_I, VT_I }, routine::surrenderByFaction);
    add("ChangeFactionByFaction", VT_V, { VT_I, VT_I }, routine::changeFactionByFaction);
    add("PlayRoomAnimation", VT_V, { VT_S, VT_I }, routine::playRoomAnimation);
    add("ShowGalaxyMap", VT_V, { VT_I }, routine::showGalaxyMap);
    add("SetPlanetSelectable", VT_V, { VT_I, VT_I }, routine::setPlanetSelectable);
    add("GetPlanetSelectable", VT_I, { VT_I }, routine::getPlanetSelectable);
    add("SetPlanetAvailable", VT_V, { VT_I, VT_I }, routine::setPlanetAvailable);
    add("GetPlanetAvailable", VT_I, { VT_I }, routine::getPlanetAvailable);
    add("GetSelectedPlanet", VT_I, { }, routine::getSelectedPlanet);
    add("SoundObjectFadeAndStop", VT_V, { VT_O, VT_F }, routine::soundObjectFadeAndStop);
    add("SetAreaFogColor", VT_V, { VT_O, VT_F, VT_F, VT_F }, routine::setAreaFogColor);
    add("ChangeItemCost", VT_V, { VT_S, VT_F }, routine::changeItemCost);
    add("GetIsLiveContentAvailable", VT_I, { VT_I }, routine::getIsLiveContentAvailable);
    add("ResetDialogState", VT_V, { }, routine::resetDialogState);
    add("SetGoodEvilValue", VT_V, { VT_O, VT_I }, routine::setGoodEvilValue);
    add("GetIsPoisoned", VT_I, { VT_O }, routine::getIsPoisoned);
    add("GetSpellTarget", VT_O, { VT_O }, routine::getSpellTarget);
    add("SetSoloMode", VT_V, { VT_I }, routine::setSoloMode);
    add("EffectCutSceneHorrified", VT_EFFECT, { }, routine::effectCutSceneHorrified);
    add("EffectCutSceneParalyze", VT_EFFECT, { }, routine::effectCutSceneParalyze);
    add("EffectCutSceneStunned", VT_EFFECT, { }, routine::effectCutSceneStunned);
    add("CancelPostDialogCharacterSwitch", VT_V, { }, routine::cancelPostDialogCharacterSwitch);
    add("SetMaxHitPoints", VT_V, { VT_O, VT_I }, routine::setMaxHitPoints);
    add("NoClicksFor", VT_V, { VT_F }, routine::noClicksFor);
    add("HoldWorldFadeInForDialog", VT_V, { }, routine::holdWorldFadeInForDialog);
    add("ShipBuild", VT_I, { }, routine::shipBuild);
    add("SurrenderRetainBuffs", VT_V, { }, routine::surrenderRetainBuffs);
    add("SuppressStatusSummaryEntry", VT_V, { VT_I }, routine::suppressStatusSummaryEntry);
    add("GetCheatCode", VT_I, { VT_I }, routine::getCheatCode);
    add("SetMusicVolume", VT_V, { VT_F }, routine::setMusicVolume);
    add("CreateItemOnFloor", VT_O, { VT_S, VT_LOCATION, VT_I }, routine::createItemOnFloor);
    add("SetAvailableNPCId", VT_V, { VT_I, VT_O }, routine::setAvailableNPCId);
    add("IsMoviePlaying", VT_I, { }, routine::isMoviePlaying);
    add("QueueMovie", VT_V, { VT_S, VT_I }, routine::queueMovie);
    add("PlayMovieQueue", VT_V, { VT_I }, routine::playMovieQueue);
    add("YavinHackCloseDoor", VT_V, { VT_O }, routine::yavinHackCloseDoor);
}

void Routines::addTslRoutines() {
    add("Random", VT_I, { VT_I }, routine::random);
    add("PrintString", VT_V, { VT_S }, routine::printString);
    add("PrintFloat", VT_V, { VT_F, VT_I, VT_I }, routine::printFloat);
    add("FloatToString", VT_S, { VT_F, VT_I, VT_I }, routine::floatToString);
    add("PrintInteger", VT_V, { VT_I }, routine::printInteger);
    add("PrintObject", VT_V, { VT_O }, routine::printObject);
    add("AssignCommand", VT_V, { VT_O, VT_ACTION }, routine::assignCommand);
    add("DelayCommand", VT_V, { VT_F, VT_ACTION }, routine::delayCommand);
    add("ExecuteScript", VT_V, { VT_S, VT_O, VT_I }, routine::executeScript);
    add("ClearAllActions", VT_V, { }, routine::clearAllActions);
    add("SetFacing", VT_V, { VT_F }, routine::setFacing);
    add("SwitchPlayerCharacter", VT_I, { VT_I }, routine::switchPlayerCharacter);
    add("SetTime", VT_V, { VT_I, VT_I, VT_I, VT_I }, routine::setTime);
    add("SetPartyLeader", VT_I, { VT_I }, routine::setPartyLeader);
    add("SetAreaUnescapable", VT_V, { VT_I }, routine::setAreaUnescapable);
    add("GetAreaUnescapable", VT_I, { }, routine::getAreaUnescapable);
    add("GetTimeHour", VT_I, { }, routine::getTimeHour);
    add("GetTimeMinute", VT_I, { }, routine::getTimeMinute);
    add("GetTimeSecond", VT_I, { }, routine::getTimeSecond);
    add("GetTimeMillisecond", VT_I, { }, routine::getTimeMillisecond);
    add("ActionRandomWalk", VT_V, { }, routine::actionRandomWalk);
    add("ActionMoveToLocation", VT_V, { VT_LOCATION, VT_I }, routine::actionMoveToLocation);
    add("ActionMoveToObject", VT_V, { VT_O, VT_I, VT_F }, routine::actionMoveToObject);
    add("ActionMoveAwayFromObject", VT_V, { VT_O, VT_I, VT_F }, routine::actionMoveAwayFromObject);
    add("GetArea", VT_O, { VT_O }, routine::getArea);
    add("GetEnteringObject", VT_O, { }, routine::getEnteringObject);
    add("GetExitingObject", VT_O, { }, routine::getExitingObject);
    add("GetPosition", VT_VECTOR, { VT_O }, routine::getPosition);
    add("GetFacing", VT_F, { VT_O }, routine::getFacing);
    add("GetItemPossessor", VT_O, { VT_O }, routine::getItemPossessor);
    add("GetItemPossessedBy", VT_O, { VT_O, VT_S }, routine::getItemPossessedBy);
    add("CreateItemOnObject", VT_O, { VT_S, VT_O, VT_I, VT_I }, routine::createItemOnObject);
    add("ActionEquipItem", VT_V, { VT_O, VT_I, VT_I }, routine::actionEquipItem);
    add("ActionUnequipItem", VT_V, { VT_O, VT_I }, routine::actionUnequipItem);
    add("ActionPickUpItem", VT_V, { VT_O }, routine::actionPickUpItem);
    add("ActionPutDownItem", VT_V, { VT_O }, routine::actionPutDownItem);
    add("GetLastAttacker", VT_O, { VT_O }, routine::getLastAttacker);
    add("ActionAttack", VT_V, { VT_O, VT_I }, routine::actionAttack);
    add("GetNearestCreature", VT_O, { VT_I, VT_I, VT_O, VT_I, VT_I, VT_I, VT_I, VT_I }, routine::getNearestCreature);
    add("ActionSpeakString", VT_V, { VT_S, VT_I }, routine::actionSpeakString);
    add("ActionPlayAnimation", VT_V, { VT_I, VT_F, VT_F }, routine::actionPlayAnimation);
    add("GetDistanceToObject", VT_F, { VT_O }, routine::getDistanceToObject);
    add("GetIsObjectValid", VT_I, { VT_O }, routine::getIsObjectValid);
    add("ActionOpenDoor", VT_V, { VT_O }, routine::actionOpenDoor);
    add("ActionCloseDoor", VT_V, { VT_O }, routine::actionCloseDoor);
    add("SetCameraFacing", VT_V, { VT_F }, routine::setCameraFacing);
    add("PlaySound", VT_V, { VT_S }, routine::playSound);
    add("GetSpellTargetObject", VT_O, { }, routine::getSpellTargetObject);
    add("ActionCastSpellAtObject", VT_V, { VT_I, VT_O, VT_I, VT_I, VT_I, VT_I, VT_I }, routine::actionCastSpellAtObject);
    add("GetCurrentHitPoints", VT_I, { VT_O }, routine::getCurrentHitPoints);
    add("GetMaxHitPoints", VT_I, { VT_O }, routine::getMaxHitPoints);
    add("EffectAssuredHit", VT_EFFECT, { }, routine::effectAssuredHit);
    add("GetLastItemEquipped", VT_O, { }, routine::getLastItemEquipped);
    add("GetSubScreenID", VT_I, { }, routine::getSubScreenID);
    add("CancelCombat", VT_V, { VT_O }, routine::cancelCombat);
    add("GetCurrentForcePoints", VT_I, { VT_O }, routine::getCurrentForcePoints);
    add("GetMaxForcePoints", VT_I, { VT_O }, routine::getMaxForcePoints);
    add("PauseGame", VT_V, { VT_I }, routine::pauseGame);
    add("SetPlayerRestrictMode", VT_V, { VT_I }, routine::setPlayerRestrictMode);
    add("GetStringLength", VT_I, { VT_S }, routine::getStringLength);
    add("GetStringUpperCase", VT_S, { VT_S }, routine::getStringUpperCase);
    add("GetStringLowerCase", VT_S, { VT_S }, routine::getStringLowerCase);
    add("GetStringRight", VT_S, { VT_S, VT_I }, routine::getStringRight);
    add("GetStringLeft", VT_S, { VT_S, VT_I }, routine::getStringLeft);
    add("InsertString", VT_S, { VT_S, VT_S, VT_I }, routine::insertString);
    add("GetSubString", VT_S, { VT_S, VT_I, VT_I }, routine::getSubString);
    add("FindSubString", VT_I, { VT_S, VT_S }, routine::findSubString);
    add("fabs", VT_F, { VT_F }, routine::fabs);
    add("cos", VT_F, { VT_F }, routine::cos);
    add("sin", VT_F, { VT_F }, routine::sin);
    add("tan", VT_F, { VT_F }, routine::tan);
    add("acos", VT_F, { VT_F }, routine::acos);
    add("asin", VT_F, { VT_F }, routine::asin);
    add("atan", VT_F, { VT_F }, routine::atan);
    add("log", VT_F, { VT_F }, routine::log);
    add("pow", VT_F, { VT_F, VT_F }, routine::pow);
    add("sqrt", VT_F, { VT_F }, routine::sqrt);
    add("abs", VT_I, { VT_I }, routine::abs);
    add("EffectHeal", VT_EFFECT, { VT_I }, routine::effectHeal);
    add("EffectDamage", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamage);
    add("EffectAbilityIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAbilityIncrease);
    add("EffectDamageResistance", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamageResistance);
    add("EffectResurrection", VT_EFFECT, { VT_I }, routine::effectResurrection);
    add("GetPlayerRestrictMode", VT_I, { VT_O }, routine::getPlayerRestrictMode);
    add("GetCasterLevel", VT_I, { VT_O }, routine::getCasterLevel);
    add("GetFirstEffect", VT_EFFECT, { VT_O }, routine::getFirstEffect);
    add("GetNextEffect", VT_EFFECT, { VT_O }, routine::getNextEffect);
    add("RemoveEffect", VT_V, { VT_O, VT_EFFECT }, routine::removeEffect);
    add("GetIsEffectValid", VT_I, { VT_EFFECT }, routine::getIsEffectValid);
    add("GetEffectDurationType", VT_I, { VT_EFFECT }, routine::getEffectDurationType);
    add("GetEffectSubType", VT_I, { VT_EFFECT }, routine::getEffectSubType);
    add("GetEffectCreator", VT_O, { VT_EFFECT }, routine::getEffectCreator);
    add("IntToString", VT_S, { VT_I }, routine::intToString);
    add("GetFirstObjectInArea", VT_O, { VT_O, VT_I }, routine::getFirstObjectInArea);
    add("GetNextObjectInArea", VT_O, { VT_O, VT_I }, routine::getNextObjectInArea);
    add("d2", VT_I, { VT_I }, routine::d2);
    add("d3", VT_I, { VT_I }, routine::d3);
    add("d4", VT_I, { VT_I }, routine::d4);
    add("d6", VT_I, { VT_I }, routine::d6);
    add("d8", VT_I, { VT_I }, routine::d8);
    add("d10", VT_I, { VT_I }, routine::d10);
    add("d12", VT_I, { VT_I }, routine::d12);
    add("d20", VT_I, { VT_I }, routine::d20);
    add("d100", VT_I, { VT_I }, routine::d100);
    add("VectorMagnitude", VT_F, { VT_VECTOR }, routine::vectorMagnitude);
    add("GetMetaMagicFeat", VT_I, { }, routine::getMetaMagicFeat);
    add("GetObjectType", VT_I, { VT_O }, routine::getObjectType);
    add("GetRacialType", VT_I, { VT_O }, routine::getRacialType);
    add("FortitudeSave", VT_I, { VT_O, VT_I, VT_I, VT_O }, routine::fortitudeSave);
    add("ReflexSave", VT_I, { VT_O, VT_I, VT_I, VT_O }, routine::reflexSave);
    add("WillSave", VT_I, { VT_O, VT_I, VT_I, VT_O }, routine::willSave);
    add("GetSpellSaveDC", VT_I, { }, routine::getSpellSaveDC);
    add("MagicalEffect", VT_EFFECT, { VT_EFFECT }, routine::magicalEffect);
    add("SupernaturalEffect", VT_EFFECT, { VT_EFFECT }, routine::supernaturalEffect);
    add("ExtraordinaryEffect", VT_EFFECT, { VT_EFFECT }, routine::extraordinaryEffect);
    add("EffectACIncrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectACIncrease);
    add("GetAC", VT_I, { VT_O, VT_I }, routine::getAC);
    add("EffectSavingThrowIncrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectSavingThrowIncrease);
    add("EffectAttackIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAttackIncrease);
    add("EffectDamageReduction", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamageReduction);
    add("EffectDamageIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageIncrease);
    add("RoundsToSeconds", VT_F, { VT_I }, routine::roundsToSeconds);
    add("HoursToSeconds", VT_F, { VT_I }, routine::hoursToSeconds);
    add("TurnsToSeconds", VT_F, { VT_I }, routine::turnsToSeconds);
    add("SoundObjectSetFixedVariance", VT_V, { VT_O, VT_F }, routine::soundObjectSetFixedVariance);
    add("GetGoodEvilValue", VT_I, { VT_O }, routine::getGoodEvilValue);
    add("GetPartyMemberCount", VT_I, { }, routine::getPartyMemberCount);
    add("GetAlignmentGoodEvil", VT_I, { VT_O }, routine::getAlignmentGoodEvil);
    add("GetFirstObjectInShape", VT_O, { VT_I, VT_F, VT_LOCATION, VT_I, VT_I, VT_VECTOR }, routine::getFirstObjectInShape);
    add("GetNextObjectInShape", VT_O, { VT_I, VT_F, VT_LOCATION, VT_I, VT_I, VT_VECTOR }, routine::getNextObjectInShape);
    add("EffectEntangle", VT_EFFECT, { }, routine::effectEntangle);
    add("SignalEvent", VT_V, { VT_O, VT_EVENT }, routine::signalEvent);
    add("EventUserDefined", VT_EVENT, { VT_I }, routine::eventUserDefined);
    add("EffectDeath", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDeath);
    add("EffectKnockdown", VT_EFFECT, { }, routine::effectKnockdown);
    add("ActionGiveItem", VT_V, { VT_O, VT_O }, routine::actionGiveItem);
    add("ActionTakeItem", VT_V, { VT_O, VT_O }, routine::actionTakeItem);
    add("VectorNormalize", VT_VECTOR, { VT_VECTOR }, routine::vectorNormalize);
    add("GetItemStackSize", VT_I, { VT_O }, routine::getItemStackSize);
    add("GetAbilityScore", VT_I, { VT_O, VT_I }, routine::getAbilityScore);
    add("GetIsDead", VT_I, { VT_O }, routine::getIsDead);
    add("PrintVector", VT_V, { VT_VECTOR, VT_I }, routine::printVector);
    add("Vector", VT_VECTOR, { VT_F, VT_F, VT_F }, routine::vectorCreate);
    add("SetFacingPoint", VT_V, { VT_VECTOR }, routine::setFacingPoint);
    add("AngleToVector", VT_VECTOR, { VT_F }, routine::angleToVector);
    add("VectorToAngle", VT_F, { VT_VECTOR }, routine::vectorToAngle);
    add("TouchAttackMelee", VT_I, { VT_O, VT_I }, routine::touchAttackMelee);
    add("TouchAttackRanged", VT_I, { VT_O, VT_I }, routine::touchAttackRanged);
    add("EffectParalyze", VT_EFFECT, { }, routine::effectParalyze);
    add("EffectSpellImmunity", VT_EFFECT, { VT_I }, routine::effectSpellImmunity);
    add("SetItemStackSize", VT_V, { VT_O, VT_I }, routine::setItemStackSize);
    add("GetDistanceBetween", VT_F, { VT_O, VT_O }, routine::getDistanceBetween);
    add("SetReturnStrref", VT_V, { VT_I, VT_I, VT_I }, routine::setReturnStrref);
    add("EffectForceJump", VT_EFFECT, { VT_O, VT_I }, routine::effectForceJump);
    add("EffectSleep", VT_EFFECT, { }, routine::effectSleep);
    add("GetItemInSlot", VT_O, { VT_I, VT_O }, routine::getItemInSlot);
    add("EffectTemporaryForcePoints", VT_EFFECT, { VT_I }, routine::effectTemporaryForcePoints);
    add("EffectConfused", VT_EFFECT, { }, routine::effectConfused);
    add("EffectFrightened", VT_EFFECT, { }, routine::effectFrightened);
    add("EffectChoke", VT_EFFECT, { }, routine::effectChoke);
    add("SetGlobalString", VT_V, { VT_S, VT_S }, routine::setGlobalString);
    add("EffectStunned", VT_EFFECT, { }, routine::effectStunned);
    add("SetCommandable", VT_V, { VT_I, VT_O }, routine::setCommandable);
    add("GetCommandable", VT_I, { VT_O }, routine::getCommandable);
    add("EffectRegenerate", VT_EFFECT, { VT_I, VT_F }, routine::effectRegenerate);
    add("EffectMovementSpeedIncrease", VT_EFFECT, { VT_I }, routine::effectMovementSpeedIncrease);
    add("GetHitDice", VT_I, { VT_O }, routine::getHitDice);
    add("ActionForceFollowObject", VT_V, { VT_O, VT_F }, routine::actionForceFollowObject);
    add("GetTag", VT_S, { VT_O }, routine::getTag);
    add("ResistForce", VT_I, { VT_O, VT_O }, routine::resistForce);
    add("GetEffectType", VT_I, { VT_EFFECT }, routine::getEffectType);
    add("EffectAreaOfEffect", VT_EFFECT, { VT_I, VT_S, VT_S, VT_S }, routine::effectAreaOfEffect);
    add("GetFactionEqual", VT_I, { VT_O, VT_O }, routine::getFactionEqual);
    add("ChangeFaction", VT_V, { VT_O, VT_O }, routine::changeFaction);
    add("GetIsListening", VT_I, { VT_O }, routine::getIsListening);
    add("SetListening", VT_V, { VT_O, VT_I }, routine::setListening);
    add("SetListenPattern", VT_V, { VT_O, VT_S, VT_I }, routine::setListenPattern);
    add("TestStringAgainstPattern", VT_I, { VT_S, VT_S }, routine::testStringAgainstPattern);
    add("GetMatchedSubstring", VT_S, { VT_I }, routine::getMatchedSubstring);
    add("GetMatchedSubstringsCount", VT_I, { }, routine::getMatchedSubstringsCount);
    add("EffectVisualEffect", VT_EFFECT, { VT_I, VT_I }, routine::effectVisualEffect);
    add("GetFactionWeakestMember", VT_O, { VT_O, VT_I }, routine::getFactionWeakestMember);
    add("GetFactionStrongestMember", VT_O, { VT_O, VT_I }, routine::getFactionStrongestMember);
    add("GetFactionMostDamagedMember", VT_O, { VT_O, VT_I }, routine::getFactionMostDamagedMember);
    add("GetFactionLeastDamagedMember", VT_O, { VT_O, VT_I }, routine::getFactionLeastDamagedMember);
    add("GetFactionGold", VT_I, { VT_O }, routine::getFactionGold);
    add("GetFactionAverageReputation", VT_I, { VT_O, VT_O }, routine::getFactionAverageReputation);
    add("GetFactionAverageGoodEvilAlignment", VT_I, { VT_O }, routine::getFactionAverageGoodEvilAlignment);
    add("SoundObjectGetFixedVariance", VT_F, { VT_O }, routine::soundObjectGetFixedVariance);
    add("GetFactionAverageLevel", VT_I, { VT_O }, routine::getFactionAverageLevel);
    add("GetFactionAverageXP", VT_I, { VT_O }, routine::getFactionAverageXP);
    add("GetFactionMostFrequentClass", VT_I, { VT_O }, routine::getFactionMostFrequentClass);
    add("GetFactionWorstAC", VT_O, { VT_O, VT_I }, routine::getFactionWorstAC);
    add("GetFactionBestAC", VT_O, { VT_O, VT_I }, routine::getFactionBestAC);
    add("GetGlobalString", VT_S, { VT_S }, routine::getGlobalString);
    add("GetListenPatternNumber", VT_I, { }, routine::getListenPatternNumber);
    add("ActionJumpToObject", VT_V, { VT_O, VT_I }, routine::actionJumpToObject);
    add("GetWaypointByTag", VT_O, { VT_S }, routine::getWaypointByTag);
    add("GetTransitionTarget", VT_O, { VT_O }, routine::getTransitionTarget);
    add("EffectLinkEffects", VT_EFFECT, { VT_EFFECT, VT_EFFECT }, routine::effectLinkEffects);
    add("GetObjectByTag", VT_O, { VT_S, VT_I }, routine::getObjectByTag);
    add("AdjustAlignment", VT_V, { VT_O, VT_I, VT_I, VT_I }, routine::adjustAlignment);
    add("ActionWait", VT_V, { VT_F }, routine::actionWait);
    add("SetAreaTransitionBMP", VT_V, { VT_I, VT_S }, routine::setAreaTransitionBMP);
    add("ActionStartConversation", VT_V, { VT_O, VT_S, VT_I, VT_I, VT_I, VT_S, VT_S, VT_S, VT_S, VT_S, VT_S, VT_I, VT_I, VT_I, VT_I }, routine::actionStartConversation);
    add("ActionPauseConversation", VT_V, { }, routine::actionPauseConversation);
    add("ActionResumeConversation", VT_V, { }, routine::actionResumeConversation);
    add("EffectBeam", VT_EFFECT, { VT_I, VT_O, VT_I, VT_I }, routine::effectBeam);
    add("GetReputation", VT_I, { VT_O, VT_O }, routine::getReputation);
    add("AdjustReputation", VT_V, { VT_O, VT_O, VT_I }, routine::adjustReputation);
    add("GetModuleFileName", VT_S, { }, routine::getModuleFileName);
    add("GetGoingToBeAttackedBy", VT_O, { VT_O }, routine::getGoingToBeAttackedBy);
    add("EffectForceResistanceIncrease", VT_EFFECT, { VT_I }, routine::effectForceResistanceIncrease);
    add("GetLocation", VT_LOCATION, { VT_O }, routine::getLocation);
    add("ActionJumpToLocation", VT_V, { VT_LOCATION }, routine::actionJumpToLocation);
    add("Location", VT_LOCATION, { VT_VECTOR, VT_F }, routine::location);
    add("ApplyEffectAtLocation", VT_V, { VT_I, VT_EFFECT, VT_LOCATION, VT_F }, routine::applyEffectAtLocation);
    add("GetIsPC", VT_I, { VT_O }, routine::getIsPC);
    add("FeetToMeters", VT_F, { VT_F }, routine::feetToMeters);
    add("YardsToMeters", VT_F, { VT_F }, routine::yardsToMeters);
    add("ApplyEffectToObject", VT_V, { VT_I, VT_EFFECT, VT_O, VT_F }, routine::applyEffectToObject);
    add("SpeakString", VT_V, { VT_S, VT_I }, routine::speakString);
    add("GetSpellTargetLocation", VT_LOCATION, { }, routine::getSpellTargetLocation);
    add("GetPositionFromLocation", VT_VECTOR, { VT_LOCATION }, routine::getPositionFromLocation);
    add("EffectBodyFuel", VT_EFFECT, { }, routine::effectBodyFuel);
    add("GetFacingFromLocation", VT_F, { VT_LOCATION }, routine::getFacingFromLocation);
    add("GetNearestCreatureToLocation", VT_O, { VT_I, VT_I, VT_LOCATION, VT_I, VT_I, VT_I, VT_I, VT_I }, routine::getNearestCreatureToLocation);
    add("GetNearestObject", VT_O, { VT_I, VT_O, VT_I }, routine::getNearestObject);
    add("GetNearestObjectToLocation", VT_O, { VT_I, VT_LOCATION, VT_I }, routine::getNearestObjectToLocation);
    add("GetNearestObjectByTag", VT_O, { VT_S, VT_O, VT_I }, routine::getNearestObjectByTag);
    add("IntToFloat", VT_F, { VT_I }, routine::intToFloat);
    add("FloatToInt", VT_I, { VT_F }, routine::floatToInt);
    add("StringToInt", VT_I, { VT_S }, routine::stringToInt);
    add("StringToFloat", VT_F, { VT_S }, routine::stringToFloat);
    add("ActionCastSpellAtLocation", VT_V, { VT_I, VT_LOCATION, VT_I, VT_I, VT_I, VT_I }, routine::actionCastSpellAtLocation);
    add("GetIsEnemy", VT_I, { VT_O, VT_O }, routine::getIsEnemy);
    add("GetIsFriend", VT_I, { VT_O, VT_O }, routine::getIsFriend);
    add("GetIsNeutral", VT_I, { VT_O, VT_O }, routine::getIsNeutral);
    add("GetPCSpeaker", VT_O, { }, routine::getPCSpeaker);
    add("GetStringByStrRef", VT_S, { VT_I }, routine::getStringByStrRef);
    add("ActionSpeakStringByStrRef", VT_V, { VT_I, VT_I }, routine::actionSpeakStringByStrRef);
    add("DestroyObject", VT_V, { VT_O, VT_F, VT_I, VT_F, VT_I }, routine::destroyObject);
    add("GetModule", VT_O, { }, routine::getModule);
    add("CreateObject", VT_O, { VT_I, VT_S, VT_LOCATION, VT_I }, routine::createObject);
    add("EventSpellCastAt", VT_EVENT, { VT_O, VT_I, VT_I }, routine::eventSpellCastAt);
    add("GetLastSpellCaster", VT_O, { }, routine::getLastSpellCaster);
    add("GetLastSpell", VT_I, { }, routine::getLastSpell);
    add("GetUserDefinedEventNumber", VT_I, { }, routine::getUserDefinedEventNumber);
    add("GetSpellId", VT_I, { }, routine::getSpellId);
    add("RandomName", VT_S, { }, routine::randomName);
    add("EffectPoison", VT_EFFECT, { VT_I }, routine::effectPoison);
    add("GetLoadFromSaveGame", VT_I, { }, routine::getLoadFromSaveGame);
    add("EffectAssuredDeflection", VT_EFFECT, { VT_I }, routine::effectAssuredDeflection);
    add("GetName", VT_S, { VT_O }, routine::getName);
    add("GetLastSpeaker", VT_O, { }, routine::getLastSpeaker);
    add("BeginConversation", VT_I, { VT_S, VT_O }, routine::beginConversation);
    add("GetLastPerceived", VT_O, { }, routine::getLastPerceived);
    add("GetLastPerceptionHeard", VT_I, { }, routine::getLastPerceptionHeard);
    add("GetLastPerceptionInaudible", VT_I, { }, routine::getLastPerceptionInaudible);
    add("GetLastPerceptionSeen", VT_I, { }, routine::getLastPerceptionSeen);
    add("GetLastClosedBy", VT_O, { }, routine::getLastClosedBy);
    add("GetLastPerceptionVanished", VT_I, { }, routine::getLastPerceptionVanished);
    add("GetFirstInPersistentObject", VT_O, { VT_O, VT_I, VT_I }, routine::getFirstInPersistentObject);
    add("GetNextInPersistentObject", VT_O, { VT_O, VT_I, VT_I }, routine::getNextInPersistentObject);
    add("GetAreaOfEffectCreator", VT_O, { VT_O }, routine::getAreaOfEffectCreator);
    add("ShowLevelUpGUI", VT_I, { }, routine::showLevelUpGUI);
    add("SetItemNonEquippable", VT_V, { VT_O, VT_I }, routine::setItemNonEquippable);
    add("GetButtonMashCheck", VT_I, { }, routine::getButtonMashCheck);
    add("SetButtonMashCheck", VT_V, { VT_I }, routine::setButtonMashCheck);
    add("EffectForcePushTargeted", VT_EFFECT, { VT_LOCATION, VT_I }, routine::effectForcePushTargeted);
    add("EffectHaste", VT_EFFECT, { }, routine::effectHaste);
    add("GiveItem", VT_V, { VT_O, VT_O }, routine::giveItem);
    add("ObjectToString", VT_S, { VT_O }, routine::objectToString);
    add("EffectImmunity", VT_EFFECT, { VT_I }, routine::effectImmunity);
    add("GetIsImmune", VT_I, { VT_O, VT_I, VT_O }, routine::getIsImmune);
    add("EffectDamageImmunityIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageImmunityIncrease);
    add("GetEncounterActive", VT_I, { VT_O }, routine::getEncounterActive);
    add("SetEncounterActive", VT_V, { VT_I, VT_O }, routine::setEncounterActive);
    add("GetEncounterSpawnsMax", VT_I, { VT_O }, routine::getEncounterSpawnsMax);
    add("SetEncounterSpawnsMax", VT_V, { VT_I, VT_O }, routine::setEncounterSpawnsMax);
    add("GetEncounterSpawnsCurrent", VT_I, { VT_O }, routine::getEncounterSpawnsCurrent);
    add("SetEncounterSpawnsCurrent", VT_V, { VT_I, VT_O }, routine::setEncounterSpawnsCurrent);
    add("GetModuleItemAcquired", VT_O, { }, routine::getModuleItemAcquired);
    add("GetModuleItemAcquiredFrom", VT_O, { }, routine::getModuleItemAcquiredFrom);
    add("SetCustomToken", VT_V, { VT_I, VT_S }, routine::setCustomToken);
    add("GetHasFeat", VT_I, { VT_I, VT_O }, routine::getHasFeat);
    add("GetHasSkill", VT_I, { VT_I, VT_O }, routine::getHasSkill);
    add("ActionUseFeat", VT_V, { VT_I, VT_O }, routine::actionUseFeat);
    add("ActionUseSkill", VT_V, { VT_I, VT_O, VT_I, VT_O }, routine::actionUseSkill);
    add("GetObjectSeen", VT_I, { VT_O, VT_O }, routine::getObjectSeen);
    add("GetObjectHeard", VT_I, { VT_O, VT_O }, routine::getObjectHeard);
    add("GetLastPlayerDied", VT_O, { }, routine::getLastPlayerDied);
    add("GetModuleItemLost", VT_O, { }, routine::getModuleItemLost);
    add("GetModuleItemLostBy", VT_O, { }, routine::getModuleItemLostBy);
    add("ActionDoCommand", VT_V, { VT_ACTION }, routine::actionDoCommand);
    add("EventConversation", VT_EVENT, { }, routine::eventConversation);
    add("SetEncounterDifficulty", VT_V, { VT_I, VT_O }, routine::setEncounterDifficulty);
    add("GetEncounterDifficulty", VT_I, { VT_O }, routine::getEncounterDifficulty);
    add("GetDistanceBetweenLocations", VT_F, { VT_LOCATION, VT_LOCATION }, routine::getDistanceBetweenLocations);
    add("GetReflexAdjustedDamage", VT_I, { VT_I, VT_O, VT_I, VT_I, VT_O }, routine::getReflexAdjustedDamage);
    add("PlayAnimation", VT_V, { VT_I, VT_F, VT_F }, routine::playAnimation);
    add("TalentSpell", VT_TALENT, { VT_I }, routine::talentSpell);
    add("TalentFeat", VT_TALENT, { VT_I }, routine::talentFeat);
    add("TalentSkill", VT_TALENT, { VT_I }, routine::talentSkill);
    add("GetHasSpellEffect", VT_I, { VT_I, VT_O }, routine::getHasSpellEffect);
    add("GetEffectSpellId", VT_I, { VT_EFFECT }, routine::getEffectSpellId);
    add("GetCreatureHasTalent", VT_I, { VT_TALENT, VT_O }, routine::getCreatureHasTalent);
    add("GetCreatureTalentRandom", VT_TALENT, { VT_I, VT_O, VT_I }, routine::getCreatureTalentRandom);
    add("GetCreatureTalentBest", VT_TALENT, { VT_I, VT_I, VT_O, VT_I, VT_I, VT_I }, routine::getCreatureTalentBest);
    add("ActionUseTalentOnObject", VT_V, { VT_TALENT, VT_O }, routine::actionUseTalentOnObject);
    add("ActionUseTalentAtLocation", VT_V, { VT_TALENT, VT_LOCATION }, routine::actionUseTalentAtLocation);
    add("GetGoldPieceValue", VT_I, { VT_O }, routine::getGoldPieceValue);
    add("GetIsPlayableRacialType", VT_I, { VT_O }, routine::getIsPlayableRacialType);
    add("JumpToLocation", VT_V, { VT_LOCATION }, routine::jumpToLocation);
    add("EffectTemporaryHitpoints", VT_EFFECT, { VT_I }, routine::effectTemporaryHitpoints);
    add("GetSkillRank", VT_I, { VT_I, VT_O }, routine::getSkillRank);
    add("GetAttackTarget", VT_O, { VT_O }, routine::getAttackTarget);
    add("GetLastAttackType", VT_I, { VT_O }, routine::getLastAttackType);
    add("GetLastAttackMode", VT_I, { VT_O }, routine::getLastAttackMode);
    add("GetDistanceBetween2D", VT_F, { VT_O, VT_O }, routine::getDistanceBetween2D);
    add("GetIsInCombat", VT_I, { VT_O, VT_I }, routine::getIsInCombat);
    add("GetLastAssociateCommand", VT_I, { VT_O }, routine::getLastAssociateCommand);
    add("GiveGoldToCreature", VT_V, { VT_O, VT_I }, routine::giveGoldToCreature);
    add("SetIsDestroyable", VT_V, { VT_I, VT_I, VT_I }, routine::setIsDestroyable);
    add("SetLocked", VT_V, { VT_O, VT_I }, routine::setLocked);
    add("GetLocked", VT_I, { VT_O }, routine::getLocked);
    add("GetClickingObject", VT_O, { }, routine::getClickingObject);
    add("SetAssociateListenPatterns", VT_V, { VT_O }, routine::setAssociateListenPatterns);
    add("GetLastWeaponUsed", VT_O, { VT_O }, routine::getLastWeaponUsed);
    add("ActionInteractObject", VT_V, { VT_O }, routine::actionInteractObject);
    add("GetLastUsedBy", VT_O, { }, routine::getLastUsedBy);
    add("GetAbilityModifier", VT_I, { VT_I, VT_O }, routine::getAbilityModifier);
    add("GetIdentified", VT_I, { VT_O }, routine::getIdentified);
    add("SetIdentified", VT_V, { VT_O, VT_I }, routine::setIdentified);
    add("GetDistanceBetweenLocations2D", VT_F, { VT_LOCATION, VT_LOCATION }, routine::getDistanceBetweenLocations2D);
    add("GetDistanceToObject2D", VT_F, { VT_O }, routine::getDistanceToObject2D);
    add("GetBlockingDoor", VT_O, { }, routine::getBlockingDoor);
    add("GetIsDoorActionPossible", VT_I, { VT_O, VT_I }, routine::getIsDoorActionPossible);
    add("DoDoorAction", VT_V, { VT_O, VT_I }, routine::doDoorAction);
    add("GetFirstItemInInventory", VT_O, { VT_O }, routine::getFirstItemInInventory);
    add("GetNextItemInInventory", VT_O, { VT_O }, routine::getNextItemInInventory);
    add("GetClassByPosition", VT_I, { VT_I, VT_O }, routine::getClassByPosition);
    add("GetLevelByPosition", VT_I, { VT_I, VT_O }, routine::getLevelByPosition);
    add("GetLevelByClass", VT_I, { VT_I, VT_O }, routine::getLevelByClass);
    add("GetDamageDealtByType", VT_I, { VT_I }, routine::getDamageDealtByType);
    add("GetTotalDamageDealt", VT_I, { }, routine::getTotalDamageDealt);
    add("GetLastDamager", VT_O, { }, routine::getLastDamager);
    add("GetLastDisarmed", VT_O, { }, routine::getLastDisarmed);
    add("GetLastDisturbed", VT_O, { }, routine::getLastDisturbed);
    add("GetLastLocked", VT_O, { }, routine::getLastLocked);
    add("GetLastUnlocked", VT_O, { }, routine::getLastUnlocked);
    add("EffectSkillIncrease", VT_EFFECT, { VT_I, VT_I }, routine::effectSkillIncrease);
    add("GetInventoryDisturbType", VT_I, { }, routine::getInventoryDisturbType);
    add("GetInventoryDisturbItem", VT_O, { }, routine::getInventoryDisturbItem);
    add("ShowUpgradeScreen", VT_V, { VT_O, VT_O, VT_I, VT_I, VT_S }, routine::showUpgradeScreen);
    add("VersusAlignmentEffect", VT_EFFECT, { VT_EFFECT, VT_I, VT_I }, routine::versusAlignmentEffect);
    add("VersusRacialTypeEffect", VT_EFFECT, { VT_EFFECT, VT_I }, routine::versusRacialTypeEffect);
    add("VersusTrapEffect", VT_EFFECT, { VT_EFFECT }, routine::versusTrapEffect);
    add("GetGender", VT_I, { VT_O }, routine::getGender);
    add("GetIsTalentValid", VT_I, { VT_TALENT }, routine::getIsTalentValid);
    add("ActionMoveAwayFromLocation", VT_V, { VT_LOCATION, VT_I, VT_F }, routine::actionMoveAwayFromLocation);
    add("GetAttemptedAttackTarget", VT_O, { }, routine::getAttemptedAttackTarget);
    add("GetTypeFromTalent", VT_I, { VT_TALENT }, routine::getTypeFromTalent);
    add("GetIdFromTalent", VT_I, { VT_TALENT }, routine::getIdFromTalent);
    add("PlayPazaak", VT_V, { VT_I, VT_S, VT_I, VT_I, VT_O }, routine::playPazaak);
    add("GetLastPazaakResult", VT_I, { }, routine::getLastPazaakResult);
    add("DisplayFeedBackText", VT_V, { VT_O, VT_I }, routine::displayFeedBackText);
    add("AddJournalQuestEntry", VT_V, { VT_S, VT_I, VT_I }, routine::addJournalQuestEntry);
    add("RemoveJournalQuestEntry", VT_V, { VT_S }, routine::removeJournalQuestEntry);
    add("GetJournalEntry", VT_I, { VT_S }, routine::getJournalEntry);
    add("PlayRumblePattern", VT_I, { VT_I }, routine::playRumblePattern);
    add("StopRumblePattern", VT_I, { VT_I }, routine::stopRumblePattern);
    add("EffectDamageForcePoints", VT_EFFECT, { VT_I }, routine::effectDamageForcePoints);
    add("EffectHealForcePoints", VT_EFFECT, { VT_I }, routine::effectHealForcePoints);
    add("SendMessageToPC", VT_V, { VT_O, VT_S }, routine::sendMessageToPC);
    add("GetAttemptedSpellTarget", VT_O, { }, routine::getAttemptedSpellTarget);
    add("GetLastOpenedBy", VT_O, { }, routine::getLastOpenedBy);
    add("GetHasSpell", VT_I, { VT_I, VT_O }, routine::getHasSpell);
    add("OpenStore", VT_V, { VT_O, VT_O, VT_I, VT_I }, routine::openStore);
    add("ActionSurrenderToEnemies", VT_V, { }, routine::actionSurrenderToEnemies);
    add("GetFirstFactionMember", VT_O, { VT_O, VT_I }, routine::getFirstFactionMember);
    add("GetNextFactionMember", VT_O, { VT_O, VT_I }, routine::getNextFactionMember);
    add("ActionForceMoveToLocation", VT_V, { VT_LOCATION, VT_I, VT_F }, routine::actionForceMoveToLocation);
    add("ActionForceMoveToObject", VT_V, { VT_O, VT_I, VT_F, VT_F }, routine::actionForceMoveToObject);
    add("GetJournalQuestExperience", VT_I, { VT_S }, routine::getJournalQuestExperience);
    add("JumpToObject", VT_V, { VT_O, VT_I }, routine::jumpToObject);
    add("SetMapPinEnabled", VT_V, { VT_O, VT_I }, routine::setMapPinEnabled);
    add("EffectHitPointChangeWhenDying", VT_EFFECT, { VT_F }, routine::effectHitPointChangeWhenDying);
    add("PopUpGUIPanel", VT_V, { VT_O, VT_I }, routine::popUpGUIPanel);
    add("AddMultiClass", VT_V, { VT_I, VT_O }, routine::addMultiClass);
    add("GetIsLinkImmune", VT_I, { VT_O, VT_EFFECT }, routine::getIsLinkImmune);
    add("EffectDroidStun", VT_EFFECT, { }, routine::effectDroidStun);
    add("EffectForcePushed", VT_EFFECT, { }, routine::effectForcePushed);
    add("GiveXPToCreature", VT_V, { VT_O, VT_I }, routine::giveXPToCreature);
    add("SetXP", VT_V, { VT_O, VT_I }, routine::setXP);
    add("GetXP", VT_I, { VT_O }, routine::getXP);
    add("IntToHexString", VT_S, { VT_I }, routine::intToHexString);
    add("GetBaseItemType", VT_I, { VT_O }, routine::getBaseItemType);
    add("GetItemHasItemProperty", VT_I, { VT_O, VT_I }, routine::getItemHasItemProperty);
    add("ActionEquipMostDamagingMelee", VT_V, { VT_O, VT_I }, routine::actionEquipMostDamagingMelee);
    add("ActionEquipMostDamagingRanged", VT_V, { VT_O }, routine::actionEquipMostDamagingRanged);
    add("GetItemACValue", VT_I, { VT_O }, routine::getItemACValue);
    add("EffectForceResisted", VT_EFFECT, { VT_O }, routine::effectForceResisted);
    add("ExploreAreaForPlayer", VT_V, { VT_O, VT_O }, routine::exploreAreaForPlayer);
    add("ActionEquipMostEffectiveArmor", VT_V, { }, routine::actionEquipMostEffectiveArmor);
    add("GetIsDay", VT_I, { }, routine::getIsDay);
    add("GetIsNight", VT_I, { }, routine::getIsNight);
    add("GetIsDawn", VT_I, { }, routine::getIsDawn);
    add("GetIsDusk", VT_I, { }, routine::getIsDusk);
    add("GetIsEncounterCreature", VT_I, { VT_O }, routine::getIsEncounterCreature);
    add("GetLastPlayerDying", VT_O, { }, routine::getLastPlayerDying);
    add("GetStartingLocation", VT_LOCATION, { }, routine::getStartingLocation);
    add("ChangeToStandardFaction", VT_V, { VT_O, VT_I }, routine::changeToStandardFaction);
    add("SoundObjectPlay", VT_V, { VT_O }, routine::soundObjectPlay);
    add("SoundObjectStop", VT_V, { VT_O }, routine::soundObjectStop);
    add("SoundObjectSetVolume", VT_V, { VT_O, VT_I }, routine::soundObjectSetVolume);
    add("SoundObjectSetPosition", VT_V, { VT_O, VT_VECTOR }, routine::soundObjectSetPosition);
    add("SpeakOneLinerConversation", VT_V, { VT_S, VT_O }, routine::speakOneLinerConversation);
    add("GetGold", VT_I, { VT_O }, routine::getGold);
    add("GetLastRespawnButtonPresser", VT_O, { }, routine::getLastRespawnButtonPresser);
    add("EffectForceFizzle", VT_EFFECT, { }, routine::effectForceFizzle);
    add("SetLightsaberPowered", VT_V, { VT_O, VT_I, VT_I, VT_I }, routine::setLightsaberPowered);
    add("GetIsWeaponEffective", VT_I, { VT_O, VT_I }, routine::getIsWeaponEffective);
    add("GetLastSpellHarmful", VT_I, { }, routine::getLastSpellHarmful);
    add("EventActivateItem", VT_EVENT, { VT_O, VT_LOCATION, VT_O }, routine::eventActivateItem);
    add("MusicBackgroundPlay", VT_V, { VT_O }, routine::musicBackgroundPlay);
    add("MusicBackgroundStop", VT_V, { VT_O }, routine::musicBackgroundStop);
    add("MusicBackgroundSetDelay", VT_V, { VT_O, VT_I }, routine::musicBackgroundSetDelay);
    add("MusicBackgroundChangeDay", VT_V, { VT_O, VT_I, VT_I }, routine::musicBackgroundChangeDay);
    add("MusicBackgroundChangeNight", VT_V, { VT_O, VT_I, VT_I }, routine::musicBackgroundChangeNight);
    add("MusicBattlePlay", VT_V, { VT_O }, routine::musicBattlePlay);
    add("MusicBattleStop", VT_V, { VT_O }, routine::musicBattleStop);
    add("MusicBattleChange", VT_V, { VT_O, VT_I }, routine::musicBattleChange);
    add("AmbientSoundPlay", VT_V, { VT_O }, routine::ambientSoundPlay);
    add("AmbientSoundStop", VT_V, { VT_O }, routine::ambientSoundStop);
    add("AmbientSoundChangeDay", VT_V, { VT_O, VT_I }, routine::ambientSoundChangeDay);
    add("AmbientSoundChangeNight", VT_V, { VT_O, VT_I }, routine::ambientSoundChangeNight);
    add("GetLastKiller", VT_O, { }, routine::getLastKiller);
    add("GetSpellCastItem", VT_O, { }, routine::getSpellCastItem);
    add("GetItemActivated", VT_O, { }, routine::getItemActivated);
    add("GetItemActivator", VT_O, { }, routine::getItemActivator);
    add("GetItemActivatedTargetLocation", VT_LOCATION, { }, routine::getItemActivatedTargetLocation);
    add("GetItemActivatedTarget", VT_O, { }, routine::getItemActivatedTarget);
    add("GetIsOpen", VT_I, { VT_O }, routine::getIsOpen);
    add("TakeGoldFromCreature", VT_V, { VT_I, VT_O, VT_I }, routine::takeGoldFromCreature);
    add("GetIsInConversation", VT_I, { VT_O }, routine::getIsInConversation);
    add("EffectAbilityDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAbilityDecrease);
    add("EffectAttackDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectAttackDecrease);
    add("EffectDamageDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageDecrease);
    add("EffectDamageImmunityDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectDamageImmunityDecrease);
    add("EffectACDecrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectACDecrease);
    add("EffectMovementSpeedDecrease", VT_EFFECT, { VT_I }, routine::effectMovementSpeedDecrease);
    add("EffectSavingThrowDecrease", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectSavingThrowDecrease);
    add("EffectSkillDecrease", VT_EFFECT, { VT_I, VT_I }, routine::effectSkillDecrease);
    add("EffectForceResistanceDecrease", VT_EFFECT, { VT_I }, routine::effectForceResistanceDecrease);
    add("GetPlotFlag", VT_I, { VT_O }, routine::getPlotFlag);
    add("SetPlotFlag", VT_V, { VT_O, VT_I }, routine::setPlotFlag);
    add("EffectInvisibility", VT_EFFECT, { VT_I }, routine::effectInvisibility);
    add("EffectConcealment", VT_EFFECT, { VT_I }, routine::effectConcealment);
    add("EffectForceShield", VT_EFFECT, { VT_I }, routine::effectForceShield);
    add("EffectDispelMagicAll", VT_EFFECT, { VT_I }, routine::effectDispelMagicAll);
    add("SetDialogPlaceableCamera", VT_V, { VT_I }, routine::setDialogPlaceableCamera);
    add("GetSoloMode", VT_I, { }, routine::getSoloMode);
    add("EffectDisguise", VT_EFFECT, { VT_I }, routine::effectDisguise);
    add("GetMaxStealthXP", VT_I, { }, routine::getMaxStealthXP);
    add("EffectTrueSeeing", VT_EFFECT, { }, routine::effectTrueSeeing);
    add("EffectSeeInvisible", VT_EFFECT, { }, routine::effectSeeInvisible);
    add("EffectTimeStop", VT_EFFECT, { }, routine::effectTimeStop);
    add("SetMaxStealthXP", VT_V, { VT_I }, routine::setMaxStealthXP);
    add("EffectBlasterDeflectionIncrease", VT_EFFECT, { VT_I }, routine::effectBlasterDeflectionIncrease);
    add("EffectBlasterDeflectionDecrease", VT_EFFECT, { VT_I }, routine::effectBlasterDeflectionDecrease);
    add("EffectHorrified", VT_EFFECT, { }, routine::effectHorrified);
    add("EffectSpellLevelAbsorption", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectSpellLevelAbsorption);
    add("EffectDispelMagicBest", VT_EFFECT, { VT_I }, routine::effectDispelMagicBest);
    add("GetCurrentStealthXP", VT_I, { }, routine::getCurrentStealthXP);
    add("GetNumStackedItems", VT_I, { VT_O }, routine::getNumStackedItems);
    add("SurrenderToEnemies", VT_V, { }, routine::surrenderToEnemies);
    add("EffectMissChance", VT_EFFECT, { VT_I }, routine::effectMissChance);
    add("SetCurrentStealthXP", VT_V, { VT_I }, routine::setCurrentStealthXP);
    add("GetCreatureSize", VT_I, { VT_O }, routine::getCreatureSize);
    add("AwardStealthXP", VT_V, { VT_O }, routine::awardStealthXP);
    add("GetStealthXPEnabled", VT_I, { }, routine::getStealthXPEnabled);
    add("SetStealthXPEnabled", VT_V, { VT_I }, routine::setStealthXPEnabled);
    add("ActionUnlockObject", VT_V, { VT_O }, routine::actionUnlockObject);
    add("ActionLockObject", VT_V, { VT_O }, routine::actionLockObject);
    add("EffectModifyAttacks", VT_EFFECT, { VT_I }, routine::effectModifyAttacks);
    add("GetLastTrapDetected", VT_O, { VT_O }, routine::getLastTrapDetected);
    add("EffectDamageShield", VT_EFFECT, { VT_I, VT_I, VT_I }, routine::effectDamageShield);
    add("GetNearestTrapToObject", VT_O, { VT_O, VT_I }, routine::getNearestTrapToObject);
    add("GetAttemptedMovementTarget", VT_O, { }, routine::getAttemptedMovementTarget);
    add("GetBlockingCreature", VT_O, { VT_O }, routine::getBlockingCreature);
    add("GetFortitudeSavingThrow", VT_I, { VT_O }, routine::getFortitudeSavingThrow);
    add("GetWillSavingThrow", VT_I, { VT_O }, routine::getWillSavingThrow);
    add("GetReflexSavingThrow", VT_I, { VT_O }, routine::getReflexSavingThrow);
    add("GetChallengeRating", VT_F, { VT_O }, routine::getChallengeRating);
    add("GetFoundEnemyCreature", VT_O, { VT_O }, routine::getFoundEnemyCreature);
    add("GetMovementRate", VT_I, { VT_O }, routine::getMovementRate);
    add("GetSubRace", VT_I, { VT_O }, routine::getSubRace);
    add("GetStealthXPDecrement", VT_I, { }, routine::getStealthXPDecrement);
    add("SetStealthXPDecrement", VT_V, { VT_I }, routine::setStealthXPDecrement);
    add("DuplicateHeadAppearance", VT_V, { VT_O, VT_O }, routine::duplicateHeadAppearance);
    add("ActionCastFakeSpellAtObject", VT_V, { VT_I, VT_O, VT_I }, routine::actionCastFakeSpellAtObject);
    add("ActionCastFakeSpellAtLocation", VT_V, { VT_I, VT_LOCATION, VT_I }, routine::actionCastFakeSpellAtLocation);
    add("CutsceneAttack", VT_V, { VT_O, VT_I, VT_I, VT_I }, routine::cutsceneAttack);
    add("SetCameraMode", VT_V, { VT_O, VT_I }, routine::setCameraMode);
    add("SetLockOrientationInDialog", VT_V, { VT_O, VT_I }, routine::setLockOrientationInDialog);
    add("SetLockHeadFollowInDialog", VT_V, { VT_O, VT_I }, routine::setLockHeadFollowInDialog);
    add("CutsceneMove", VT_V, { VT_O, VT_VECTOR, VT_I }, routine::cutsceneMove);
    add("EnableVideoEffect", VT_V, { VT_I }, routine::enableVideoEffect);
    add("StartNewModule", VT_V, { VT_S, VT_S, VT_S, VT_S, VT_S, VT_S, VT_S, VT_S }, routine::startNewModule);
    add("DisableVideoEffect", VT_V, { }, routine::disableVideoEffect);
    add("GetWeaponRanged", VT_I, { VT_O }, routine::getWeaponRanged);
    add("DoSinglePlayerAutoSave", VT_V, { }, routine::doSinglePlayerAutoSave);
    add("GetGameDifficulty", VT_I, { }, routine::getGameDifficulty);
    add("GetUserActionsPending", VT_I, { }, routine::getUserActionsPending);
    add("RevealMap", VT_V, { VT_VECTOR, VT_I }, routine::revealMap);
    add("SetTutorialWindowsEnabled", VT_V, { VT_I }, routine::setTutorialWindowsEnabled);
    add("ShowTutorialWindow", VT_V, { VT_I }, routine::showTutorialWindow);
    add("StartCreditSequence", VT_V, { VT_I }, routine::startCreditSequence);
    add("IsCreditSequenceInProgress", VT_I, { }, routine::isCreditSequenceInProgress);

    add("SWMG_SetLateralAccelerationPerSecond", VT_V, { VT_F }, routine::minigame::setLateralAccelerationPerSecond);
    add("SWMG_GetLateralAccelerationPerSecond", VT_F, { }, routine::minigame::getLateralAccelerationPerSecond);

    add("GetCurrentAction", VT_I, { VT_O }, routine::getCurrentAction);
    add("GetDifficultyModifier", VT_F, { }, routine::getDifficultyModifier);
    add("GetAppearanceType", VT_I, { VT_O }, routine::getAppearanceType);
    add("FloatingTextStrRefOnCreature", VT_V, { VT_I, VT_O, VT_I }, routine::floatingTextStrRefOnCreature);
    add("FloatingTextStringOnCreature", VT_V, { VT_S, VT_O, VT_I }, routine::floatingTextStringOnCreature);
    add("GetTrapDisarmable", VT_I, { VT_O }, routine::getTrapDisarmable);
    add("GetTrapDetectable", VT_I, { VT_O }, routine::getTrapDetectable);
    add("GetTrapDetectedBy", VT_I, { VT_O, VT_O }, routine::getTrapDetectedBy);
    add("GetTrapFlagged", VT_I, { VT_O }, routine::getTrapFlagged);
    add("GetTrapBaseType", VT_I, { VT_O }, routine::getTrapBaseType);
    add("GetTrapOneShot", VT_I, { VT_O }, routine::getTrapOneShot);
    add("GetTrapCreator", VT_O, { VT_O }, routine::getTrapCreator);
    add("GetTrapKeyTag", VT_S, { VT_O }, routine::getTrapKeyTag);
    add("GetTrapDisarmDC", VT_I, { VT_O }, routine::getTrapDisarmDC);
    add("GetTrapDetectDC", VT_I, { VT_O }, routine::getTrapDetectDC);
    add("GetLockKeyRequired", VT_I, { VT_O }, routine::getLockKeyRequired);
    add("GetLockKeyTag", VT_I, { VT_O }, routine::getLockKeyTag);
    add("GetLockLockable", VT_I, { VT_O }, routine::getLockLockable);
    add("GetLockUnlockDC", VT_I, { VT_O }, routine::getLockUnlockDC);
    add("GetLockLockDC", VT_I, { VT_O }, routine::getLockLockDC);
    add("GetPCLevellingUp", VT_O, { }, routine::getPCLevellingUp);
    add("GetHasFeatEffect", VT_I, { VT_I, VT_O }, routine::getHasFeatEffect);
    add("SetPlaceableIllumination", VT_V, { VT_O, VT_I }, routine::setPlaceableIllumination);
    add("GetPlaceableIllumination", VT_I, { VT_O }, routine::getPlaceableIllumination);
    add("GetIsPlaceableObjectActionPossible", VT_I, { VT_O, VT_I }, routine::getIsPlaceableObjectActionPossible);
    add("DoPlaceableObjectAction", VT_V, { VT_O, VT_I }, routine::doPlaceableObjectAction);
    add("GetFirstPC", VT_O, { }, routine::getFirstPC);
    add("GetNextPC", VT_O, { }, routine::getNextPC);
    add("SetTrapDetectedBy", VT_I, { VT_O, VT_O }, routine::setTrapDetectedBy);
    add("GetIsTrapped", VT_I, { VT_O }, routine::getIsTrapped);
    add("SetEffectIcon", VT_EFFECT, { VT_EFFECT, VT_I }, routine::setEffectIcon);
    add("FaceObjectAwayFromObject", VT_V, { VT_O, VT_O }, routine::faceObjectAwayFromObject);
    add("PopUpDeathGUIPanel", VT_V, { VT_O, VT_I, VT_I, VT_I, VT_S }, routine::popUpDeathGUIPanel);
    add("SetTrapDisabled", VT_V, { VT_O }, routine::setTrapDisabled);
    add("GetLastHostileActor", VT_O, { VT_O }, routine::getLastHostileActor);
    add("ExportAllCharacters", VT_V, { }, routine::exportAllCharacters);
    add("MusicBackgroundGetDayTrack", VT_I, { VT_O }, routine::musicBackgroundGetDayTrack);
    add("MusicBackgroundGetNightTrack", VT_I, { VT_O }, routine::musicBackgroundGetNightTrack);
    add("WriteTimestampedLogEntry", VT_V, { VT_S }, routine::writeTimestampedLogEntry);
    add("GetModuleName", VT_S, { }, routine::getModuleName);
    add("GetFactionLeader", VT_O, { VT_O }, routine::getFactionLeader);

    add("SWMG_SetSpeedBlurEffect", VT_V, { VT_I, VT_F }, routine::minigame::setSpeedBlurEffect);

    add("EndGame", VT_V, { VT_I }, routine::endGame);
    add("GetRunScriptVar", VT_I, { }, routine::getRunScriptVar);
    add("GetCreatureMovmentType", VT_I, { VT_O }, routine::getCreatureMovmentType);
    add("AmbientSoundSetDayVolume", VT_V, { VT_O, VT_I }, routine::ambientSoundSetDayVolume);
    add("AmbientSoundSetNightVolume", VT_V, { VT_O, VT_I }, routine::ambientSoundSetNightVolume);
    add("MusicBackgroundGetBattleTrack", VT_I, { VT_O }, routine::musicBackgroundGetBattleTrack);
    add("GetHasInventory", VT_I, { VT_O }, routine::getHasInventory);
    add("GetStrRefSoundDuration", VT_F, { VT_I }, routine::getStrRefSoundDuration);
    add("AddToParty", VT_V, { VT_O, VT_O }, routine::addToParty);
    add("RemoveFromParty", VT_V, { VT_O }, routine::removeFromParty);
    add("AddPartyMember", VT_I, { VT_I, VT_O }, routine::addPartyMember);
    add("RemovePartyMember", VT_I, { VT_I }, routine::removePartyMember);
    add("IsObjectPartyMember", VT_I, { VT_O }, routine::isObjectPartyMember);
    add("GetPartyMemberByIndex", VT_O, { VT_I }, routine::getPartyMemberByIndex);
    add("GetGlobalBoolean", VT_I, { VT_S }, routine::getGlobalBoolean);
    add("SetGlobalBoolean", VT_V, { VT_S, VT_I }, routine::setGlobalBoolean);
    add("GetGlobalNumber", VT_I, { VT_S }, routine::getGlobalNumber);
    add("SetGlobalNumber", VT_V, { VT_S, VT_I }, routine::setGlobalNumber);
    add("AurPostString", VT_V, { VT_S, VT_I, VT_I, VT_F }, routine::aurPostString);

    add("SWMG_GetLastEvent", VT_S, { }, routine::minigame::getLastEvent);
    add("SWMG_GetLastEventModelName", VT_S, { }, routine::minigame::getLastEventModelName);
    add("SWMG_GetObjectByName", VT_O, { VT_S }, routine::minigame::getObjectByName);
    add("SWMG_PlayAnimation", VT_V, { VT_O, VT_S, VT_I, VT_I, VT_I }, routine::minigame::playAnimation);
    add("SWMG_GetLastBulletHitDamage", VT_I, { }, routine::minigame::getLastBulletHitDamage);
    add("SWMG_GetLastBulletHitTarget", VT_I, { }, routine::minigame::getLastBulletHitTarget);
    add("SWMG_GetLastBulletHitShooter", VT_O, { }, routine::minigame::getLastBulletHitShooter);
    add("SWMG_AdjustFollowerHitPoints", VT_I, { VT_O, VT_I, VT_I }, routine::minigame::adjustFollowerHitPoints);
    add("SWMG_OnBulletHit", VT_V, { }, routine::minigame::onBulletHit);
    add("SWMG_OnObstacleHit", VT_V, { }, routine::minigame::onObstacleHit);
    add("SWMG_GetLastFollowerHit", VT_O, { }, routine::minigame::getLastFollowerHit);
    add("SWMG_GetLastObstacleHit", VT_O, { }, routine::minigame::getLastObstacleHit);
    add("SWMG_GetLastBulletFiredDamage", VT_I, { }, routine::minigame::getLastBulletFiredDamage);
    add("SWMG_GetLastBulletFiredTarget", VT_I, { }, routine::minigame::getLastBulletFiredTarget);
    add("SWMG_GetObjectName", VT_S, { VT_O }, routine::minigame::getObjectName);
    add("SWMG_OnDeath", VT_V, { }, routine::minigame::onDeath);
    add("SWMG_IsFollower", VT_I, { VT_O }, routine::minigame::isFollower);
    add("SWMG_IsPlayer", VT_I, { VT_O }, routine::minigame::isPlayer);
    add("SWMG_IsEnemy", VT_I, { VT_O }, routine::minigame::isEnemy);
    add("SWMG_IsTrigger", VT_I, { VT_O }, routine::minigame::isTrigger);
    add("SWMG_IsObstacle", VT_I, { VT_O }, routine::minigame::isObstacle);
    add("SWMG_SetFollowerHitPoints", VT_V, { VT_O, VT_I }, routine::minigame::setFollowerHitPoints);
    add("SWMG_OnDamage", VT_V, { }, routine::minigame::onDamage);
    add("SWMG_GetLastHPChange", VT_I, { }, routine::minigame::getLastHPChange);
    add("SWMG_RemoveAnimation", VT_V, { VT_O, VT_S }, routine::minigame::removeAnimation);
    add("SWMG_GetCameraNearClip", VT_F, { }, routine::minigame::getCameraNearClip);
    add("SWMG_GetCameraFarClip", VT_F, { }, routine::minigame::getCameraFarClip);
    add("SWMG_SetCameraClip", VT_V, { VT_F, VT_F }, routine::minigame::setCameraClip);
    add("SWMG_GetPlayer", VT_O, { }, routine::minigame::getPlayer);
    add("SWMG_GetEnemyCount", VT_I, { }, routine::minigame::getEnemyCount);
    add("SWMG_GetEnemy", VT_O, { VT_I }, routine::minigame::getEnemy);
    add("SWMG_GetObstacleCount", VT_I, { }, routine::minigame::getObstacleCount);
    add("SWMG_GetObstacle", VT_O, { VT_I }, routine::minigame::getObstacle);
    add("SWMG_GetHitPoints", VT_I, { VT_O }, routine::minigame::getHitPoints);
    add("SWMG_GetMaxHitPoints", VT_I, { VT_O }, routine::minigame::getMaxHitPoints);
    add("SWMG_SetMaxHitPoints", VT_V, { VT_O, VT_I }, routine::minigame::setMaxHitPoints);
    add("SWMG_GetSphereRadius", VT_F, { VT_O }, routine::minigame::getSphereRadius);
    add("SWMG_SetSphereRadius", VT_V, { VT_O, VT_F }, routine::minigame::setSphereRadius);
    add("SWMG_GetNumLoops", VT_I, { VT_O }, routine::minigame::getNumLoops);
    add("SWMG_SetNumLoops", VT_V, { VT_O, VT_I }, routine::minigame::setNumLoops);
    add("SWMG_GetPosition", VT_VECTOR, { VT_O }, routine::minigame::getPosition);
    add("SWMG_GetGunBankCount", VT_I, { VT_O }, routine::minigame::getGunBankCount);
    add("SWMG_GetGunBankBulletModel", VT_S, { VT_O, VT_I }, routine::minigame::getGunBankBulletModel);
    add("SWMG_GetGunBankGunModel", VT_S, { VT_O, VT_I }, routine::minigame::getGunBankGunModel);
    add("SWMG_GetGunBankDamage", VT_I, { VT_O, VT_I }, routine::minigame::getGunBankDamage);
    add("SWMG_GetGunBankTimeBetweenShots", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankTimeBetweenShots);
    add("SWMG_GetGunBankLifespan", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankLifespan);
    add("SWMG_GetGunBankSpeed", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankSpeed);
    add("SWMG_GetGunBankTarget", VT_I, { VT_O, VT_I }, routine::minigame::getGunBankTarget);
    add("SWMG_SetGunBankBulletModel", VT_V, { VT_O, VT_I, VT_S }, routine::minigame::setGunBankBulletModel);
    add("SWMG_SetGunBankGunModel", VT_V, { VT_O, VT_I, VT_S }, routine::minigame::setGunBankGunModel);
    add("SWMG_SetGunBankDamage", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setGunBankDamage);
    add("SWMG_SetGunBankTimeBetweenShots", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankTimeBetweenShots);
    add("SWMG_SetGunBankLifespan", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankLifespan);
    add("SWMG_SetGunBankSpeed", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankSpeed);
    add("SWMG_SetGunBankTarget", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setGunBankTarget);
    add("SWMG_GetLastBulletHitPart", VT_S, { }, routine::minigame::getLastBulletHitPart);
    add("SWMG_IsGunBankTargetting", VT_I, { VT_O, VT_I }, routine::minigame::isGunBankTargetting);
    add("SWMG_GetPlayerOffset", VT_VECTOR, { }, routine::minigame::getPlayerOffset);
    add("SWMG_GetPlayerInvincibility", VT_F, { }, routine::minigame::getPlayerInvincibility);
    add("SWMG_GetPlayerSpeed", VT_F, { }, routine::minigame::getPlayerSpeed);
    add("SWMG_GetPlayerMinSpeed", VT_F, { }, routine::minigame::getPlayerMinSpeed);
    add("SWMG_GetPlayerAccelerationPerSecond", VT_F, { }, routine::minigame::getPlayerAccelerationPerSecond);
    add("SWMG_GetPlayerTunnelPos", VT_VECTOR, { }, routine::minigame::getPlayerTunnelPos);
    add("SWMG_SetPlayerOffset", VT_V, { VT_VECTOR }, routine::minigame::setPlayerOffset);
    add("SWMG_SetPlayerInvincibility", VT_V, { VT_F }, routine::minigame::setPlayerInvincibility);
    add("SWMG_SetPlayerSpeed", VT_V, { VT_F }, routine::minigame::setPlayerSpeed);
    add("SWMG_SetPlayerMinSpeed", VT_V, { VT_F }, routine::minigame::setPlayerMinSpeed);
    add("SWMG_SetPlayerAccelerationPerSecond", VT_V, { VT_F }, routine::minigame::setPlayerAccelerationPerSecond);
    add("SWMG_SetPlayerTunnelPos", VT_V, { VT_VECTOR }, routine::minigame::setPlayerTunnelPos);
    add("SWMG_GetPlayerTunnelNeg", VT_VECTOR, { }, routine::minigame::getPlayerTunnelNeg);
    add("SWMG_SetPlayerTunnelNeg", VT_V, { VT_VECTOR }, routine::minigame::setPlayerTunnelNeg);
    add("SWMG_GetPlayerOrigin", VT_VECTOR, { }, routine::minigame::getPlayerOrigin);
    add("SWMG_SetPlayerOrigin", VT_V, { VT_VECTOR }, routine::minigame::setPlayerOrigin);
    add("SWMG_GetGunBankHorizontalSpread", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankHorizontalSpread);
    add("SWMG_GetGunBankVerticalSpread", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankVerticalSpread);
    add("SWMG_GetGunBankSensingRadius", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankSensingRadius);
    add("SWMG_GetGunBankInaccuracy", VT_F, { VT_O, VT_I }, routine::minigame::getGunBankInaccuracy);
    add("SWMG_SetGunBankHorizontalSpread", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankHorizontalSpread);
    add("SWMG_SetGunBankVerticalSpread", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankVerticalSpread);
    add("SWMG_SetGunBankSensingRadius", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankSensingRadius);
    add("SWMG_SetGunBankInaccuracy", VT_V, { VT_O, VT_I, VT_F }, routine::minigame::setGunBankInaccuracy);
    add("SWMG_GetIsInvulnerable", VT_I, { VT_O }, routine::minigame::getIsInvulnerable);
    add("SWMG_StartInvulnerability", VT_V, { VT_O }, routine::minigame::startInvulnerability);
    add("SWMG_GetPlayerMaxSpeed", VT_F, { }, routine::minigame::getPlayerMaxSpeed);
    add("SWMG_SetPlayerMaxSpeed", VT_V, { VT_F }, routine::minigame::setPlayerMaxSpeed);

    add("AddJournalWorldEntry", VT_V, { VT_I, VT_S, VT_S }, routine::addJournalWorldEntry);
    add("AddJournalWorldEntryStrref", VT_V, { VT_I, VT_I }, routine::addJournalWorldEntryStrref);
    add("BarkString", VT_V, { VT_O, VT_I, VT_I, VT_I }, routine::barkString);
    add("DeleteJournalWorldAllEntries", VT_V, { }, routine::deleteJournalWorldAllEntries);
    add("DeleteJournalWorldEntry", VT_V, { VT_I }, routine::deleteJournalWorldEntry);
    add("DeleteJournalWorldEntryStrref", VT_V, { VT_I }, routine::deleteJournalWorldEntryStrref);
    add("EffectForceDrain", VT_EFFECT, { VT_I }, routine::effectForceDrain);
    add("EffectPsychicStatic", VT_EFFECT, { }, routine::effectPsychicStatic);
    add("PlayVisualAreaEffect", VT_V, { VT_I, VT_LOCATION }, routine::playVisualAreaEffect);
    add("SetJournalQuestEntryPicture", VT_V, { VT_S, VT_O, VT_I, VT_I, VT_I }, routine::setJournalQuestEntryPicture);
    add("GetLocalBoolean", VT_I, { VT_O, VT_I }, routine::getLocalBoolean);
    add("SetLocalBoolean", VT_V, { VT_O, VT_I, VT_I }, routine::setLocalBoolean);
    add("GetLocalNumber", VT_I, { VT_O, VT_I }, routine::getLocalNumber);
    add("SetLocalNumber", VT_V, { VT_O, VT_I, VT_I }, routine::setLocalNumber);

    add("SWMG_GetSoundFrequency", VT_I, { VT_O, VT_I }, routine::minigame::getSoundFrequency);
    add("SWMG_SetSoundFrequency", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setSoundFrequency);
    add("SWMG_GetSoundFrequencyIsRandom", VT_I, { VT_O, VT_I }, routine::minigame::getSoundFrequencyIsRandom);
    add("SWMG_SetSoundFrequencyIsRandom", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setSoundFrequencyIsRandom);
    add("SWMG_GetSoundVolume", VT_I, { VT_O, VT_I }, routine::minigame::getSoundVolume);
    add("SWMG_SetSoundVolume", VT_V, { VT_O, VT_I, VT_I }, routine::minigame::setSoundVolume);

    add("SoundObjectGetPitchVariance", VT_F, { VT_O }, routine::soundObjectGetPitchVariance);
    add("SoundObjectSetPitchVariance", VT_V, { VT_O, VT_F }, routine::soundObjectSetPitchVariance);
    add("SoundObjectGetVolume", VT_I, { VT_O }, routine::soundObjectGetVolume);
    add("GetGlobalLocation", VT_LOCATION, { VT_S }, routine::getGlobalLocation);
    add("SetGlobalLocation", VT_V, { VT_S, VT_LOCATION }, routine::setGlobalLocation);
    add("AddAvailableNPCByObject", VT_I, { VT_I, VT_O }, routine::addAvailableNPCByObject);
    add("RemoveAvailableNPC", VT_I, { VT_I }, routine::removeAvailableNPC);
    add("IsAvailableCreature", VT_I, { VT_I }, routine::isAvailableCreature);
    add("AddAvailableNPCByTemplate", VT_I, { VT_I, VT_S }, routine::addAvailableNPCByTemplate);
    add("SpawnAvailableNPC", VT_O, { VT_I, VT_LOCATION }, routine::spawnAvailableNPC);
    add("IsNPCPartyMember", VT_I, { VT_I }, routine::isNPCPartyMember);
    add("ActionBarkString", VT_V, { VT_I }, routine::actionBarkString);
    add("GetIsConversationActive", VT_I, { }, routine::getIsConversationActive);
    add("EffectLightsaberThrow", VT_EFFECT, { VT_O, VT_O, VT_O, VT_I }, routine::effectLightsaberThrow);
    add("EffectWhirlWind", VT_EFFECT, { }, routine::effectWhirlWind);
    add("GetPartyAIStyle", VT_I, { }, routine::getPartyAIStyle);
    add("GetNPCAIStyle", VT_I, { VT_O }, routine::getNPCAIStyle);
    add("SetPartyAIStyle", VT_V, { VT_I }, routine::setPartyAIStyle);
    add("SetNPCAIStyle", VT_V, { VT_O, VT_I }, routine::setNPCAIStyle);
    add("SetNPCSelectability", VT_V, { VT_I, VT_I }, routine::setNPCSelectability);
    add("GetNPCSelectability", VT_I, { VT_I }, routine::getNPCSelectability);
    add("ClearAllEffects", VT_V, { }, routine::clearAllEffects);
    add("GetLastConversation", VT_S, { }, routine::getLastConversation);
    add("ShowPartySelectionGUI", VT_V, { VT_S, VT_I, VT_I, VT_I }, routine::showPartySelectionGUI);
    add("GetStandardFaction", VT_I, { VT_O }, routine::getStandardFaction);
    add("GivePlotXP", VT_V, { VT_S, VT_I }, routine::givePlotXP);
    add("GetMinOneHP", VT_I, { VT_O }, routine::getMinOneHP);
    add("SetMinOneHP", VT_V, { VT_O, VT_I }, routine::setMinOneHP);

    add("SWMG_GetPlayerTunnelInfinite", VT_VECTOR, { }, routine::minigame::getPlayerTunnelInfinite);
    add("SWMG_SetPlayerTunnelInfinite", VT_V, { VT_VECTOR }, routine::minigame::setPlayerTunnelInfinite);

    add("SetGlobalFadeIn", VT_V, { VT_F, VT_F, VT_F, VT_F, VT_F }, routine::setGlobalFadeIn);
    add("SetGlobalFadeOut", VT_V, { VT_F, VT_F, VT_F, VT_F, VT_F }, routine::setGlobalFadeOut);
    add("GetLastHostileTarget", VT_O, { VT_O }, routine::getLastHostileTarget);
    add("GetLastAttackAction", VT_I, { VT_O }, routine::getLastAttackAction);
    add("GetLastForcePowerUsed", VT_I, { VT_O }, routine::getLastForcePowerUsed);
    add("GetLastCombatFeatUsed", VT_I, { VT_O }, routine::getLastCombatFeatUsed);
    add("GetLastAttackResult", VT_I, { VT_O }, routine::getLastAttackResult);
    add("GetWasForcePowerSuccessful", VT_I, { VT_O }, routine::getWasForcePowerSuccessful);
    add("GetFirstAttacker", VT_O, { VT_O }, routine::getFirstAttacker);
    add("GetNextAttacker", VT_O, { VT_O }, routine::getNextAttacker);
    add("SetFormation", VT_V, { VT_O, VT_O, VT_I, VT_I }, routine::setFormation);
    add("ActionFollowLeader", VT_V, { }, routine::actionFollowLeader);
    add("SetForcePowerUnsuccessful", VT_V, { VT_I, VT_O }, routine::setForcePowerUnsuccessful);
    add("GetIsDebilitated", VT_I, { VT_O }, routine::getIsDebilitated);
    add("PlayMovie", VT_V, { VT_S, VT_I }, routine::playMovie);
    add("SaveNPCState", VT_V, { VT_I }, routine::saveNPCState);
    add("GetCategoryFromTalent", VT_I, { VT_TALENT }, routine::getCategoryFromTalent);
    add("SurrenderByFaction", VT_V, { VT_I, VT_I }, routine::surrenderByFaction);
    add("ChangeFactionByFaction", VT_V, { VT_I, VT_I }, routine::changeFactionByFaction);
    add("PlayRoomAnimation", VT_V, { VT_S, VT_I }, routine::playRoomAnimation);
    add("ShowGalaxyMap", VT_V, { VT_I }, routine::showGalaxyMap);
    add("SetPlanetSelectable", VT_V, { VT_I, VT_I }, routine::setPlanetSelectable);
    add("GetPlanetSelectable", VT_I, { VT_I }, routine::getPlanetSelectable);
    add("SetPlanetAvailable", VT_V, { VT_I, VT_I }, routine::setPlanetAvailable);
    add("GetPlanetAvailable", VT_I, { VT_I }, routine::getPlanetAvailable);
    add("GetSelectedPlanet", VT_I, { }, routine::getSelectedPlanet);
    add("SoundObjectFadeAndStop", VT_V, { VT_O, VT_F }, routine::soundObjectFadeAndStop);
    add("SetAreaFogColor", VT_V, { VT_O, VT_F, VT_F, VT_F }, routine::setAreaFogColor);
    add("ChangeItemCost", VT_V, { VT_S, VT_F }, routine::changeItemCost);
    add("GetIsLiveContentAvailable", VT_I, { VT_I }, routine::getIsLiveContentAvailable);
    add("ResetDialogState", VT_V, { }, routine::resetDialogState);
    add("SetGoodEvilValue", VT_V, { VT_O, VT_I }, routine::setGoodEvilValue);
    add("GetIsPoisoned", VT_I, { VT_O }, routine::getIsPoisoned);
    add("GetSpellTarget", VT_O, { VT_O }, routine::getSpellTarget);
    add("SetSoloMode", VT_V, { VT_I }, routine::setSoloMode);
    add("EffectCutSceneHorrified", VT_EFFECT, { }, routine::effectCutSceneHorrified);
    add("EffectCutSceneParalyze", VT_EFFECT, { }, routine::effectCutSceneParalyze);
    add("EffectCutSceneStunned", VT_EFFECT, { }, routine::effectCutSceneStunned);
    add("CancelPostDialogCharacterSwitch", VT_V, { }, routine::cancelPostDialogCharacterSwitch);
    add("SetMaxHitPoints", VT_V, { VT_O, VT_I }, routine::setMaxHitPoints);
    add("NoClicksFor", VT_V, { VT_F }, routine::noClicksFor);
    add("HoldWorldFadeInForDialog", VT_V, { }, routine::holdWorldFadeInForDialog);
    add("ShipBuild", VT_I, { }, routine::shipBuild);
    add("SurrenderRetainBuffs", VT_V, { }, routine::surrenderRetainBuffs);
    add("SuppressStatusSummaryEntry", VT_V, { VT_I }, routine::suppressStatusSummaryEntry);
    add("GetCheatCode", VT_I, { VT_I }, routine::getCheatCode);
    add("SetMusicVolume", VT_V, { VT_F }, routine::setMusicVolume);
    add("CreateItemOnFloor", VT_O, { VT_S, VT_LOCATION, VT_I }, routine::createItemOnFloor);
    add("SetAvailableNPCId", VT_V, { VT_I, VT_O }, routine::setAvailableNPCId);
    add("GetScriptParameter", VT_I, { VT_I }, routine::getScriptParameter);
    add("SetFadeUntilScript", VT_V, { }, routine::setFadeUntilScript);
    add("EffectForceBody", VT_EFFECT, { VT_I }, routine::effectForceBody);
    add("GetItemComponent", VT_I, { }, routine::getItemComponent);
    add("GetItemComponentPieceValue", VT_I, { }, routine::getItemComponentPieceValue);
    add("ShowChemicalUpgradeScreen", VT_V, { VT_O }, routine::showChemicalUpgradeScreen);
    add("GetChemicals", VT_I, { }, routine::getChemicals);
    add("GetChemicalPieceValue", VT_I, { }, routine::getChemicalPieceValue);
    add("GetSpellForcePointCost", VT_I, { }, routine::getSpellForcePointCost);
    add("EffectFury", VT_EFFECT, { }, routine::effectFury);
    add("EffectBlind", VT_EFFECT, { }, routine::effectBlind);
    add("EffectFPRegenModifier", VT_EFFECT, { VT_I }, routine::effectFPRegenModifier);
    add("EffectVPRegenModifier", VT_EFFECT, { VT_I }, routine::effectVPRegenModifier);
    add("EffectCrush", VT_EFFECT, { }, routine::effectCrush);

    add("SWMG_GetSwoopUpgrade", VT_I, { VT_I }, routine::minigame::getSwoopUpgrade);

    add("GetFeatAcquired", VT_I, { VT_I, VT_O }, routine::getFeatAcquired);
    add("GetSpellAcquired", VT_I, { VT_I, VT_O }, routine::getSpellAcquired);
    add("ShowSwoopUpgradeScreen", VT_V, { }, routine::showSwoopUpgradeScreen);
    add("GrantFeat", VT_V, { VT_I, VT_O }, routine::grantFeat);
    add("GrantSpell", VT_V, { VT_I, VT_O }, routine::grantSpell);
    add("SpawnMine", VT_V, { VT_I, VT_LOCATION, VT_I, VT_I, VT_O }, routine::spawnMine);

    add("SWMG_GetTrackPosition", VT_VECTOR, { VT_O }, routine::minigame::getTrackPosition);
    add("SWMG_SetFollowerPosition", VT_VECTOR, { VT_VECTOR }, routine::minigame::setFollowerPosition);

    add("SetFakeCombatState", VT_V, { VT_O, VT_I }, routine::setFakeCombatState);

    add("SWMG_DestroyMiniGameObject", VT_V, { VT_O }, routine::minigame::destroyMiniGameObject);

    add("GetOwnerDemolitionsSkill", VT_I, { VT_O }, routine::getOwnerDemolitionsSkill);
    add("SetOrientOnClick", VT_V, { VT_O, VT_I }, routine::setOrientOnClick);
    add("GetInfluence", VT_I, { VT_I }, routine::getInfluence);
    add("SetInfluence", VT_V, { VT_I, VT_I }, routine::setInfluence);
    add("ModifyInfluence", VT_V, { VT_I, VT_I }, routine::modifyInfluence);
    add("GetRacialSubType", VT_I, { VT_O }, routine::getRacialSubType);
    add("IncrementGlobalNumber", VT_V, { VT_S, VT_I }, routine::incrementGlobalNumber);
    add("DecrementGlobalNumber", VT_V, { VT_S, VT_I }, routine::decrementGlobalNumber);
    add("SetBonusForcePoints", VT_V, { VT_O, VT_I }, routine::setBonusForcePoints);
    add("AddBonusForcePoints", VT_V, { VT_O, VT_I }, routine::addBonusForcePoints);
    add("GetBonusForcePoints", VT_V, { VT_O }, routine::getBonusForcePoints);

    add("SWMG_SetJumpSpeed", VT_V, { VT_F }, routine::minigame::setJumpSpeed);

    add("IsMoviePlaying", VT_I, { }, routine::isMoviePlaying);
    add("QueueMovie", VT_V, { VT_S, VT_I }, routine::queueMovie);
    add("PlayMovieQueue", VT_V, { VT_I }, routine::playMovieQueue);
    add("YavinHackDoorClose", VT_V, { VT_O }, routine::yavinHackCloseDoor);
    add("EffectDroidConfused", VT_EFFECT, { }, routine::effectDroidConfused);
    add("IsStealthed", VT_I, { VT_O }, routine::isStealthed);
    add("IsMeditating", VT_I, { VT_O }, routine::isMeditating);
    add("IsInTotalDefense", VT_I, { VT_O }, routine::isInTotalDefense);
    add("SetHealTarget", VT_V, { VT_O, VT_O }, routine::setHealTarget);
    add("GetHealTarget", VT_O, { VT_O }, routine::getHealTarget);
    add("GetRandomDestination", VT_VECTOR, { VT_O, VT_I }, routine::getRandomDestination);
    add("IsFormActive", VT_I, { VT_O, VT_I }, routine::isFormActive);
    add("GetSpellFormMask", VT_I, { VT_I }, routine::getSpellFormMask);
    add("GetSpellBaseForcePointCost", VT_I, { VT_I }, routine::getSpellBaseForcePointCost);
    add("SetKeepStealthInDialog", VT_V, { VT_I }, routine::setKeepStealthInDialog);
    add("HasLineOfSight", VT_I, { VT_VECTOR, VT_VECTOR, VT_O, VT_O }, routine::hasLineOfSight);
    add("ShowDemoScreen", VT_I, { VT_S, VT_I, VT_I, VT_I, VT_I }, routine::showDemoScreen);
    add("ForceHeartbeat", VT_V, { VT_O }, routine::forceHeartbeat);
    add("EffectForceSight", VT_EFFECT, { }, routine::effectForceSight);
    add("IsRunning", VT_I, { VT_O }, routine::isRunning);

    add("SWMG_PlayerApplyForce", VT_V, { VT_VECTOR }, routine::minigame::playerApplyForce);

    add("SetForfeitConditions", VT_V, { VT_I }, routine::setForfeitConditions);
    add("GetLastForfeitViolation", VT_I, { }, routine::getLastForfeitViolation);
    add("ModifyReflexSavingThrowBase", VT_V, { VT_O, VT_I }, routine::modifyReflexSavingThrowBase);
    add("ModifyFortitudeSavingThrowBase", VT_V, { VT_O, VT_I }, routine::modifyFortitudeSavingThrowBase);
    add("ModifyWillSavingThrowBase", VT_V, { VT_O, VT_I }, routine::modifyWillSavingThrowBase);
    add("GetScriptStringParameter", VT_S, { }, routine::getScriptStringParameter);
    add("GetObjectPersonalSpace", VT_F, { VT_O }, routine::getObjectPersonalSpace);
    add("AdjustCreatureAttributes", VT_V, { VT_O, VT_I, VT_I }, routine::adjustCreatureAttributes);
    add("SetCreatureAILevel", VT_V, { VT_O, VT_I }, routine::setCreatureAILevel);
    add("ResetCreatureAILevel", VT_V, { VT_O }, routine::resetCreatureAILevel);
    add("AddAvailablePUPByTemplate", VT_I, { VT_I, VT_S }, routine::addAvailablePUPByTemplate);
    add("AddAvailablePUPByObject", VT_I, { VT_I, VT_O }, routine::addAvailablePUPByObject);
    add("AssignPUP", VT_I, { VT_I, VT_I }, routine::assignPUP);
    add("SpawnAvailablePUP", VT_O, { VT_I, VT_LOCATION }, routine::spawnAvailablePUP);
    add("AddPartyPuppet", VT_I, { VT_I, VT_O }, routine::addPartyPuppet);
    add("GetPUPOwner", VT_O, { VT_O }, routine::getPUPOwner);
    add("GetIsPuppet", VT_I, { VT_O }, routine::getIsPuppet);
    add("ActionFollowOwner", VT_V, { VT_F }, routine::actionFollowOwner);
    add("GetIsPartyLeader", VT_I, { VT_O }, routine::getIsPartyLeader);
    add("GetPartyLeader", VT_O, { }, routine::getPartyLeader);
    add("RemoveNPCFromPartyToBase", VT_I, { VT_I }, routine::removeNPCFromPartyToBase);
    add("CreatureFlourishWeapon", VT_V, { VT_O }, routine::creatureFlourishWeapon);
    add("EffectMindTrick", VT_EFFECT, { }, routine::effectMindTrick);
    add("EffectFactionModifier", VT_EFFECT, { VT_I }, routine::effectFactionModifier);
    add("ChangeObjectAppearance", VT_V, { VT_O, VT_I }, routine::changeObjectAppearance);
    add("GetIsXBox", VT_I, { }, routine::getIsXBox);
    add("EffectDroidScramble", VT_EFFECT, { }, routine::effectDroidScramble);
    add("ActionSwitchWeapons", VT_V, { }, routine::actionSwitchWeapons);
    add("PlayOverlayAnimation", VT_V, { VT_O, VT_I }, routine::playOverlayAnimation);
    add("UnlockAllSongs", VT_V, { }, routine::unlockAllSongs);
    add("DisableMap", VT_V, { VT_I }, routine::disableMap);
    add("DetonateMine", VT_V, { VT_O }, routine::detonateMine);
    add("DisableHealthRegen", VT_V, { VT_I }, routine::disableHealthRegen);
    add("SetCurrentForm", VT_V, { VT_O, VT_I }, routine::setCurrentForm);
    add("SetDisableTransit", VT_V, { VT_I }, routine::setDisableTransit);
    add("SetInputClass", VT_V, { VT_I }, routine::setInputClass);
    add("SetForceAlwaysUpdate", VT_V, { VT_O, VT_I }, routine::setForceAlwaysUpdate);
    add("EnableRain", VT_V, { VT_I }, routine::enableRain);
    add("DisplayMessageBox", VT_V, { VT_I, VT_S }, routine::displayMessageBox);
    add("DisplayDatapad", VT_V, { VT_O }, routine::displayDatapad);
    add("RemoveHeartbeat", VT_V, { VT_O }, routine::removeHeartbeat);
    add("RemoveEffectByID", VT_V, { VT_O, VT_I }, routine::removeEffectByID);
    add("RemoveEffectByExactMatch", VT_V, { VT_O, VT_EFFECT }, routine::removeEffectByExactMatch);
    add("AdjustCreatureSkills", VT_V, { VT_O, VT_I, VT_I }, routine::adjustCreatureSkills);
    add("GetSkillRankBase", VT_I, { VT_I, VT_O }, routine::getSkillRankBase);
    add("EnableRendering", VT_V, { VT_O, VT_I }, routine::enableRendering);
    add("GetCombatActionsPending", VT_I, { VT_O }, routine::getCombatActionsPending);
    add("SaveNPCByObject", VT_V, { VT_I, VT_O }, routine::saveNPCByObject);
    add("SavePUPByObject", VT_V, { VT_I, VT_O }, routine::savePUPByObject);
    add("GetIsPlayerMadeCharacter", VT_I, { VT_O }, routine::getIsPlayerMadeCharacter);
    add("RebuildPartyTable", VT_V, { }, routine::rebuildPartyTable);
}

} // namespace game

} // namespace reone
